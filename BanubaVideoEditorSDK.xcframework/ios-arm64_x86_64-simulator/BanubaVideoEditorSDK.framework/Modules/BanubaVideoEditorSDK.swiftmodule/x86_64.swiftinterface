// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BanubaVideoEditorSDK
import AVFoundation
import AVKit
import BanubaLicenseServicingSDK
import BanubaMusicEditorSDK
import BanubaOverlayEditorSDK
import BanubaSDKServicing
import BanubaSdkSimple
import BanubaUtilities
import BanubaVideoEditorEffectsSDK
@_exported import BanubaVideoEditorSDK
import CoreGraphics
import CoreMedia
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import Swift
import UIKit
import VideoEditor
public struct VideoOverlayObjectWithImage : BanubaOverlayEditorSDK.OverlayItem {
  public let id: Swift.String
  public var image: UIKit.UIImage
  public var imageData: Foundation.Data
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`?
  public init(id: Swift.String, image: UIKit.UIImage, imageData: Foundation.Data, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, frame: CoreGraphics.CGRect = .zero, transform: CoreGraphics.CGAffineTransform = .identity)
}
public struct VideoOverlayObjectWithText : BanubaOverlayEditorSDK.OverlayItem {
  public let id: Swift.String
  public var image: UIKit.UIImage
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var text: Swift.String?
  public var font: BanubaVideoEditorSDK.VideoTextFont?
  public var backgroundColor: UIKit.UIColor?
  public var foregroundColor: UIKit.UIColor?
  public var alignment: UIKit.NSTextAlignment?
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`?
  public init()
  public init(image: UIKit.UIImage)
}
@objc @_inheritsConvenienceInitializers public class FullscreenActivityView : UIKit.UIView {
  public var text: Swift.String? {
    get
    set(value)
  }
  public var configuration: BanubaVideoEditorSDK.FullScreenActivityConfiguration? {
    get
    set(value)
  }
  @objc override dynamic public func awakeFromNib()
  public func applyVisibility(_ visible: Swift.Bool)
  public static func loadFromNib() -> BanubaVideoEditorSDK.FullscreenActivityView
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class AudioServiceItem : BanubaMusicEditorSDK.AudioItem {
  final public let id: Swift.Int32
  final public let url: Foundation.URL
  public var title: Swift.String?
  public var isEditable: Swift.Bool
  public var timeRange: CoreMedia.CMTimeRange {
    get
  }
  public init(id: Swift.Int32, url: Foundation.URL, title: Swift.String?, isEditable: Swift.Bool)
  @objc deinit
}
public protocol AudioServicing {
  var delegate: BanubaMusicEditorSDK.AudioPlayerDelegate? { get set }
  var currentAudio: BanubaVideoEditorSDK.AudioServiceItem? { get }
  var duration: Foundation.TimeInterval? { get }
  func autoRepeat(repeat: Swift.Bool)
  func seekToStart()
  func seek(to: Foundation.TimeInterval)
  func load(item: BanubaVideoEditorSDK.AudioServiceItem) throws
  func unload()
  func toggle()
  func play()
  func pause()
  func setDelegate(_ delegate: BanubaMusicEditorSDK.AudioPlayerDelegate)
}
@objc @_inheritsConvenienceInitializers public class AudioService : ObjectiveC.NSObject, BanubaVideoEditorSDK.AudioServicing, BanubaMusicEditorSDK.AudioEditorServiceAdoptable {
  weak public var delegate: BanubaMusicEditorSDK.AudioPlayerDelegate?
  public var currentAudio: BanubaVideoEditorSDK.AudioServiceItem?
  public var player: AVFAudio.AVAudioPlayer?
  public var duration: Foundation.TimeInterval? {
    get
  }
  public func autoRepeat(repeat: Swift.Bool)
  public func seekToStart(isEnabled: Swift.Bool)
  public func load(track: BanubaMusicEditorSDK.AudioTrackAdoptable) throws
  public func createAudioDirectory()
  public func changeVolume(volume: Swift.Float)
  public func load(item: BanubaVideoEditorSDK.AudioServiceItem) throws
  public func load(trackUrl: Foundation.URL) throws
  public func unload()
  public func toggle()
  public func play()
  public func pause()
  public func seekToStart()
  public func seek(to: Foundation.TimeInterval)
  public func setDelegate(_ delegate: BanubaMusicEditorSDK.AudioPlayerDelegate)
  @objc override dynamic public init()
  @objc deinit
}
extension AudioService : AVFAudio.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
}
final public class ApplicationInformation {
  required public init(bundle: Foundation.Bundle)
  final public var version: Swift.String {
    get
  }
  final public var build: Swift.String {
    get
  }
  final public var fullVersion: Swift.String {
    get
  }
  @objc deinit
}
public enum AudioWriterStatus {
  case prepare
  case ready
  case capturing
  case completed
  case failed
  public static func == (a: BanubaVideoEditorSDK.AudioWriterStatus, b: BanubaVideoEditorSDK.AudioWriterStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AudioWriterDelegate : BanubaMusicEditorSDK.AudioWriterAdoptableDelegate {
  override func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFailWithError error: Swift.Error)
  override func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFinishRecording successful: Swift.Bool)
  override func audioWriterDidStartRecording(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable)
}
@objc public class AudioWriter : ObjectiveC.NSObject, BanubaMusicEditorSDK.AudioWriterAdoptable {
  weak public var delegate: BanubaMusicEditorSDK.AudioWriterAdoptableDelegate?
  public var fileUrl: Foundation.URL?
  required public init(file url: Foundation.URL?)
  @objc deinit
  public func deleteAudioRecording()
  public func setAudioCategory(_ category: AVFAudio.AVAudioSession.Category)
  public func resetAudioWriter()
  public func setupUrl(file url: Foundation.URL)
  public func prepare()
  public func startCapturing(forDuration duration: Foundation.TimeInterval?)
  public func stopCapturing()
  @objc override dynamic public init()
}
extension AudioWriter : AVFAudio.AVAudioRecorderDelegate {
  @objc dynamic public func audioRecorderEncodeErrorDidOccur(_ recorder: AVFAudio.AVAudioRecorder, error: Swift.Error?)
  @objc dynamic public func audioRecorderDidFinishRecording(_ recorder: AVFAudio.AVAudioRecorder, successfully flag: Swift.Bool)
}
public struct ExportCoverImages {
  public var coverImage: UIKit.UIImage?
  public var gifFileUrl: Foundation.URL?
}
public protocol BanubaVideoEditorDelegate : AnyObject {
  func videoEditorDidCancel(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
  func videoEditorDone(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
}
public class BanubaVideoEditor {
  weak public var delegate: BanubaVideoEditorSDK.BanubaVideoEditorDelegate?
  public var musicMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? {
    get
  }
  public var metadata: BanubaVideoEditorSDK.VideoEditorMetadata? {
    get
  }
  public var videoMetadta: BanubaVideoEditorSDK.VideoMetadata? {
    get
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var musicTrack: VideoEditor.MediaTrack? {
    get
  }
  public var imageGenerator: AVFoundation.AVAssetImageGenerator? {
    get
  }
  public var currentConfiguration: BanubaVideoEditorSDK.VideoEditorConfig {
    get
  }
  public init(token: Swift.String, configuration: BanubaVideoEditorSDK.VideoEditorConfig, analytics: BanubaVideoEditorSDK.AnalyticsEngine? = nil, externalViewControllerFactory: BanubaVideoEditorSDK.ExternalViewControllerFactory? = nil)
  @objc deinit
  public func export(using configuration: VideoEditor.ExportConfiguration, completion: @escaping ((Swift.Bool, Swift.Error?, BanubaVideoEditorSDK.ExportCoverImages?) -> Swift.Void))
  public func exportAudio(fileUrl: Foundation.URL, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func clearSessionData()
  public func dismissVideoEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func presentVideoEditorAtDrafts(from hostController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func presentVideoEditor(from hostController: UIKit.UIViewController, animated: Swift.Bool, musicTrack: VideoEditor.MediaTrack? = nil, completion: (() -> Swift.Void)?)
  public func presentVideoEditor(withPIPVideoItem pipVideoItem: Foundation.URL, from hostController: UIKit.UIViewController, animated: Swift.Bool, musicTrack: VideoEditor.MediaTrack? = nil, completion: (() -> Swift.Void)?)
  public func presentVideoEditor(withVideoItems videoItems: [Foundation.URL], from hostController: UIKit.UIViewController, animated: Swift.Bool, musicTrack: VideoEditor.MediaTrack? = nil, completion: (() -> Swift.Void)?)
  public func updateVideoEditorConfig(_ config: BanubaVideoEditorSDK.VideoEditorConfig)
}
public class TextEditSelectionBorderAnimationBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let defaultBorderWidth: CoreGraphics.CGFloat
  final public let selectedBorderWidth: CoreGraphics.CGFloat
  public init(defaultBorderWidth: CoreGraphics.CGFloat, selectedBorderWidth: CoreGraphics.CGFloat)
  public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CountdownView : UIKit.UIView, BanubaUtilities.CountdownTimerAnimatableView {
  public var font: UIKit.UIFont {
    get
    set(value)
  }
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
extension CountdownView {
  public var countdownDigit: Swift.Int {
    get
    set(newValue)
  }
  public var digitColor: UIKit.UIColor {
    get
    set(newValue)
  }
  public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func stop()
}
public protocol CountdownTimerViewFactory {
  func makeCountdownTimerView() -> BanubaUtilities.CountdownTimerAnimatableView
}
public struct ColorPair : Swift.Equatable {
  public let background: UIKit.UIColor
  public let foreground: UIKit.UIColor
  public init(background: UIKit.UIColor, foreground: UIKit.UIColor)
  public static func == (a: BanubaVideoEditorSDK.ColorPair, b: BanubaVideoEditorSDK.ColorPair) -> Swift.Bool
}
public struct VideoTextColorPair : Swift.Equatable {
  public let foreground: BanubaVideoEditorSDK.ColorPair
  public let background: BanubaVideoEditorSDK.ColorPair
  public init(colors: (UIKit.UIColor, UIKit.UIColor, UIKit.UIColor, UIKit.UIColor))
  public init(foreground: BanubaVideoEditorSDK.ColorPair, background: BanubaVideoEditorSDK.ColorPair)
  public static func == (lhs: BanubaVideoEditorSDK.VideoTextColorPair, rhs: BanubaVideoEditorSDK.VideoTextColorPair) -> Swift.Bool
}
public struct VideoTextFont {
  public var font: UIKit.UIFont?
  public var name: Swift.String
  public init(font: UIKit.UIFont?, name: Swift.String)
}
public struct GiphyImage {
  public let id: Swift.String
  public let url: Foundation.URL
  public let width: Swift.Int
  public let height: Swift.Int
}
public enum DeviceModel : Swift.String {
  case simulator
  case iPod1
  case iPod2
  case iPod3
  case iPod4
  case iPod5
  case iPod6
  case iPod7
  case iPad2
  case iPad3
  case iPad4
  case iPad5
  case iPad6
  case iPad7
  case iPad8
  case iPadMini1
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadMini5
  case iPadAir1
  case iPadAir2
  case iPadAir3
  case iPadAir4
  case iPadPro9_7
  case iPadPro10_5
  case iPadPro11
  case iPadPro2_11
  case iPadPro3_11
  case iPadPro12_9
  case iPadPro2_12_9
  case iPadPro3_12_9
  case iPadPro4_12_9
  case iPadPro5_12_9
  case iPhone4
  case iPhone4S
  case iPhone5
  case iPhone5S
  case iPhone5C
  case iPhone6
  case iPhone6plus
  case iPhone6S
  case iPhone6Splus
  case iPhoneSE
  case iPhone7
  case iPhone7plus
  case iPhone8
  case iPhone8plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSmax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPhoneSE2ndGen
  case iPhone12
  case iPhone12Mini
  case iPhone12Pro
  case iPhone12ProMax
  case unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: BanubaVideoEditorSDK.DeviceModel {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GIFPickerDataLoadingViewController : UIKit.UIViewController {
  public var loadingIndicator: BanubaUtilities.VideoEditorActivityIndicator?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func startAnimating()
  public func stopAnimating()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class TextEditSelectionBorderRoundingBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let selectionLineWidth: CoreGraphics.CGFloat
  final public let selectionLineColor: UIKit.UIColor
  final public let selectionLinePadding: CoreGraphics.CGFloat
  required public init(selectionLineWidth: CoreGraphics.CGFloat, selectionLineColor: UIKit.UIColor, selectionLinePadding: CoreGraphics.CGFloat)
  public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension UIColor {
  public convenience init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, a: CoreGraphics.CGFloat = 1.0)
  public convenience init(rgb: Swift.Int, a: CoreGraphics.CGFloat = 1.0)
}
public struct VideoEditorConfig {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration
  public var editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration
  public var textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration
  public var toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration
  public var fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration
  public var smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var albumsConfiguration: BanubaUtilities.AlbumsConfiguration
  public var videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration
  public var videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig
  public var gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration
  public var combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration
  public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration?
  public var trimGalleryVideoConfiguration: BanubaVideoEditorSDK.TrimGalleryVideoConfiguration
  public var filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration
  public var videoCoverSelectionConfiguration: BanubaVideoEditorSDK.SimpleVideoCoverSelectionConfiguration
  public var extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  public var musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig
  public var overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration
  public var multiTrimConfiguration: BanubaVideoEditorSDK.MultiTrimConfiguration
  public var watermarkConfiguration: VideoEditor.WatermarkConfiguration?
  public var alertViewConfiguration: BanubaUtilities.AlertViewConfiguration
  public var handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?
  public var pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?
  public var featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration
  public var isHandfreeEnabled: Swift.Bool
  public var draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration
  public var aspectsConfiguration: BanubaVideoEditorSDK.AspectsConfiguration
  public init()
  public init(videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration, recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration, editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration, textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration, toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration, fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration, smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration, albumsConfiguration: BanubaUtilities.AlbumsConfiguration, videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration, videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig, gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration, combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration, trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration, trimGalleryVideoConfiguration: BanubaVideoEditorSDK.TrimGalleryVideoConfiguration, filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration, videoCoverSelectionConfiguration: BanubaVideoEditorSDK.SimpleVideoCoverSelectionConfiguration, extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration, musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig, overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration, featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration, multiTrimConfiguration: BanubaVideoEditorSDK.MultiTrimConfiguration, watermarkConfiguration: VideoEditor.WatermarkConfiguration?, alertViewConfiguration: BanubaUtilities.AlertViewConfiguration, handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?, pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?, draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration, aspectsConfiguration: BanubaVideoEditorSDK.AspectsConfiguration)
  public mutating func applyFont(_ font: UIKit.UIFont)
  public mutating func updateAlertFonts(_ font: UIKit.UIFont)
  public mutating func updateRecorderFonts(_ font: UIKit.UIFont)
  public mutating func updateMultiTrimFonts(_ font: UIKit.UIFont)
  public mutating func updateEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateToastFonts(_ font: UIKit.UIFont)
  public mutating func updateFullScreenActivityFonts(_ font: UIKit.UIFont)
  public mutating func updateAlbumsFonts(_ font: UIKit.UIFont)
  public mutating func updateTextEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateSlideShowFonts(_ font: UIKit.UIFont)
  public mutating func updateTrimGalleryVideoFonts(_ font: UIKit.UIFont)
  public mutating func updateFilterFonts(_ font: UIKit.UIFont)
  public mutating func updateVideoCoverSelectionFonts(_ font: UIKit.UIFont)
  public mutating func updateExtendedVideoCoverSelectionFonts(_ font: UIKit.UIFont)
  public mutating func updateFeatureConfiguration(featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration)
}
public struct VideoEditorDurationConfig {
  public var maximumVideoDuration: Foundation.TimeInterval
  public var minimumDurationFromCamera: Foundation.TimeInterval
  public var minimumDurationFromGallery: Foundation.TimeInterval
  public var minimumVideoDuration: Foundation.TimeInterval
  public var minimumTrimmedPartDuration: Foundation.TimeInterval
  public init(maximumVideoDuration: Foundation.TimeInterval = 60.0, minimumDurationFromCamera: Foundation.TimeInterval = 3.0, minimumDurationFromGallery: Foundation.TimeInterval = 3.0, minimumVideoDuration: Foundation.TimeInterval = 3.0, minimumTrimmedPartDuration: Foundation.TimeInterval = 3.0)
  public func isValidMaxDurationWithTolerance(_ duration: Foundation.TimeInterval) -> Swift.Bool
  public func validateTrimRecorderVideoSupporting()
}
public struct TextEditorConfiguration {
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var fontButton: BanubaUtilities.RoundedButtonConfiguration
  public var textBackgroundButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var alignmentImages: [BanubaVideoEditorSDK.VideoTextAligment : BanubaVideoEditorSDK.ImageButtonConfiguration]
  public var palette: [BanubaVideoEditorSDK.VideoTextColorPair]
  public var fonts: [BanubaVideoEditorSDK.VideoTextFont]
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var palleteInsets: UIKit.UIEdgeInsets
  public var selectionColorBehavior: BanubaVideoEditorSDK.TextEditSelectionColorBehavior
  public var colorItemConfiguration: BanubaVideoEditorSDK.TextEditColorItemConfiguration
  public var cursorColor: UIKit.UIColor
}
public struct TextEditColorItemConfiguration {
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public init(borderColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat)
}
public struct VideoOverlayConfiguration {
  public var deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
}
public struct FullScreenActivityConfiguration {
  public var labelFont: UIKit.UIFont
  public var cornerRadius: CoreGraphics.CGFloat
  public var activityEffectsViewAlpha: CoreGraphics.CGFloat
  public var activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration
  public init(labelFont: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, activityEffectsViewAlpha: CoreGraphics.CGFloat, activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration)
}
public struct RecorderConfiguration {
  public enum ProgressBarPosition : Swift.String {
    case top
    case bottom
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaUtilities.SaveButtonConfiguration?
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var backToDraftsButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var removeButtonImageName: Swift.String
  public var progressLabelConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewWidth: CoreGraphics.CGFloat?
  public var captureButtonMode: BanubaVideoEditorSDK.CaptureButtonMode
  public var recordButtonConfiguration: BanubaVideoEditorSDK.RecordButtonConfiguration
  public var recordButtonProvider: BanubaVideoEditorSDK.RecordButtonProvider?
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var speedBarButtons: BanubaVideoEditorSDK.SpeedBarButtonsConfiguration
  public var galleryButton: BanubaUtilities.RoundedButtonConfiguration
  public var emptyGalleryImageName: Swift.String
  public var timerConfiguration: BanubaVideoEditorSDK.TimerConfiguration
  public var timeLineConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  public var regularRecordButtonPosition: CoreGraphics.CGFloat
  public var recorderEffectsConfiguration: BanubaVideoEditorSDK.RecorderEffectsConfiguration
  public var leftControlsBottomOffsetFromCaptureButton: CoreGraphics.CGFloat
  public var leftControlsLeftOffset: CoreGraphics.CGFloat
  public var sequenceHeight: CoreGraphics.CGFloat
  public var useHorizontalVersion: Swift.Bool
  public var loopAudioWhileRecording: Swift.Bool
  public var takeAudioDurationAsMaximum: Swift.Bool
  public var isDynamicMusicTitle: Swift.Bool
  public var isDefaultFrontCamera: Swift.Bool
  public var isMusicTitleFloatingLineEnabled: Swift.Bool
  public var useHEVCCodecIfPossible: Swift.Bool
  public var isPhotoSequenceAnimationEnabled: Swift.Bool
  public var progressBarPosition: BanubaVideoEditorSDK.RecorderConfiguration.ProgressBarPosition
  public var muteMicrophoneForPIP: Swift.Bool
}
public struct RecordButtonConfiguration {
  public var idleStrokeColor: CoreGraphics.CGColor
  public var strokeColor: CoreGraphics.CGColor
  public var gradientColors: [CoreGraphics.CGColor]
  public var circularTimeLineIdleWidth: CoreGraphics.CGFloat
  public var circularTimeLineCaptureWidth: CoreGraphics.CGFloat
  public var normalImageName: Swift.String
  public var recordImageName: Swift.String
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var outerLayerScale: CoreGraphics.CGFloat
  public var innerLayerScale: CoreGraphics.CGFloat
  public var spacingBetweenButtonAndCircular: CoreGraphics.CGFloat
}
public struct PIPSettingsConfiguration {
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var dragIndicatorConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var titleConfiguration: BanubaUtilities.TextConfiguration
  public var layoutSettingsButtonsConfiguration: [BanubaVideoEditorSDK.PIPSelectableCellConfiguration]
}
public struct MultiTrimConfiguration {
  public var saveButton: BanubaUtilities.SaveButtonConfiguration
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var rotateButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
  public var timeLimeConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  public var trimTimeLineHeight: CoreGraphics.CGFloat
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var bottomViewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var trimSequenceEdgeInsets: UIKit.UIEdgeInsets
  public var trimSequenceHeight: CoreGraphics.CGFloat
  public var editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration
}
public struct TimeLineConfiguration {
  public var isTimeLineHidden: Swift.Bool
  public var timeLineBackgroundColor: UIKit.UIColor
  public var progressBarColor: UIKit.UIColor
  public var progressBarSelectColor: UIKit.UIColor
  public var itemsCornerRadius: CoreGraphics.CGFloat
  public var separatorWidth: CoreGraphics.CGFloat
  public var separatorColor: UIKit.UIColor
  public var isDynamicProgressBar: Swift.Bool
}
public struct TrimTimeLineConfiguration {
  public var maxColor: UIKit.UIColor
  public var defaultColor: UIKit.UIColor
  public var trimControlsColor: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var draggersLineColor: UIKit.UIColor
  public var draggersCornerRadius: CoreGraphics.CGFloat
  public var draggersLineWidth: CoreGraphics.CGFloat
  public var draggersLineHeight: CoreGraphics.CGFloat
  public var numberOfLinesInDraggers: Swift.Int
  public var draggerLinesSpacing: CoreGraphics.CGFloat
  public var borderWidth: CoreGraphics.CGFloat
  public var draggersLineCornerRadius: CoreGraphics.CGFloat
  public var cancelButtonConfiguration: BanubaUtilities.TextButtonConfiguration
  public var doneButtonConfiguration: BanubaUtilities.TextButtonConfiguration
  public var draggerImageName: Swift.String?
  public var draggerWidth: CoreGraphics.CGFloat
  public var timelineTopBottomInset: CoreGraphics.CGFloat
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
}
public struct EditorConfiguration {
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var additionalEffectsButtonsBottomOffset: CoreGraphics.CGFloat
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var isVideoCoverSelectionEnabled: Swift.Bool
  public var useHorizontalVersion: Swift.Bool
  public var useHEVCCodecIfPossible: Swift.Bool
  public var isVideoAspectFillEnabled: Swift.Bool
  public var backgroundColor: UIKit.UIColor
}
public struct GifPickerConfiguration {
  public var regularFont: UIKit.UIFont
  public var boldFont: UIKit.UIFont
  public var activityConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var cursorColor: UIKit.UIColor
  public var giphyAPIKey: Swift.String?
}
public struct TrimGalleryVideoConfiguration {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var activityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var deleteGalleryVideoPartButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var galleryVideoPartsConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration
  public var backButtonConfiguration: BanubaUtilities.BackButtonConfiguration
  public var nextButtonConfiguration: BanubaUtilities.SaveButtonConfiguration
  public var deleteToolTipLabel: BanubaUtilities.TextConfiguration
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var videoPartsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration
  public var aspectsButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
}
public struct FilterConfiguration {
  public var controlButtons: [BanubaVideoEditorSDK.FilterControlButtonConfig]
  public var controlsPanelBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var resetButton: BanubaUtilities.RoundedButtonConfiguration
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var cursorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreGraphics.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var doneButtonHeight: CoreGraphics.CGFloat?
  public var timelineHeight: CoreGraphics.CGFloat
  public var timelineLeftOffset: CoreGraphics.CGFloat
  public var timelineRightOffset: CoreGraphics.CGFloat
  public var filtersHeight: CoreGraphics.CGFloat
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
}
public struct SimpleVideoCoverSelectionConfiguration {
  public var cancelButton: BanubaUtilities.TextButtonConfiguration
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var sliderColor: UIKit.UIColor
  public var sliderMinTrackTintColor: UIKit.UIColor
  public var sliderMaxTrackTintColor: UIKit.UIColor
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
}
public typealias TimerOptionBarConfiguration = BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
public struct HandsfreeConfiguration {
  public struct TimerOptionBarConfiguration {
    public var timerDisabledOptionTitle: Swift.String
    public var selectorColor: UIKit.UIColor
    public var selectorTextColor: UIKit.UIColor
    public var optionBackgroundColor: UIKit.UIColor
    public var optionCornerRadius: CoreGraphics.CGFloat
    public var optionTextColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var backgroundViewColor: UIKit.UIColor
    public var cornerRadius: CoreGraphics.CGFloat
    public var sliderCornerRadius: CoreGraphics.CGFloat
    public var barCornerRadius: CoreGraphics.CGFloat
    public var selectorEdgeInsets: UIKit.UIEdgeInsets
    public var activeThumbAndLineColor: UIKit.UIColor
    public var inactiveThumbAndLineColor: UIKit.UIColor
    public var minVideoDuration: Swift.Double
    public var buttonCornerRadius: CoreGraphics.CGFloat
    public var buttonBackgroundColor: UIKit.UIColor
    public var switchOnTintColor: UIKit.UIColor
    public var timerTitleColor: UIKit.UIColor
    public var modeTitleColor: UIKit.UIColor
    public var dragTitleColor: UIKit.UIColor
    public var buttonTitleColor: UIKit.UIColor
    public var currentValueTextColor: UIKit.UIColor
    public var minimumValueTextColor: UIKit.UIColor
    public var maximumValueTextColor: UIKit.UIColor
    public var thumbLineViewColor: UIKit.UIColor
    public init(timerDisabledOptionTitle: Swift.String, selectorColor: UIKit.UIColor, selectorTextColor: UIKit.UIColor, optionBackgroundColor: UIKit.UIColor, optionCornerRadius: CoreGraphics.CGFloat, optionTextColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, backgroundViewColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, sliderCornerRadius: CoreGraphics.CGFloat, barCornerRadius: CoreGraphics.CGFloat, selectorEdgeInsets: UIKit.UIEdgeInsets, activeThumbAndLineColor: UIKit.UIColor, inactiveThumbAndLineColor: UIKit.UIColor, minVideoDuration: Swift.Double, buttonCornerRadius: CoreGraphics.CGFloat, buttonBackgroundColor: UIKit.UIColor, switchOnTintColor: UIKit.UIColor, timerTitleColor: UIKit.UIColor, modeTitleColor: UIKit.UIColor, dragTitleColor: UIKit.UIColor, buttonTitleColor: UIKit.UIColor, currentValueTextColor: UIKit.UIColor, minimumValueTextColor: UIKit.UIColor, maximumValueTextColor: UIKit.UIColor, thumbLineViewColor: UIKit.UIColor)
  }
  public var timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
  public init(timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration)
}
public protocol MusicSelectorViewControllerDelegate {
  func didSelectFile(at url: Foundation.URL, title: Swift.String, id: Swift.Int64)
  func didClearSelection()
  func didCancel()
}
public protocol MusicSelectorViewController : UIKit.UIViewController {
  var delegate: BanubaVideoEditorSDK.MusicSelectorViewControllerDelegate? { get set }
}
public protocol ExternalViewControllerFactory {
  var musicEditorFactory: BanubaMusicEditorSDK.MusicEditorExternalViewControllerFactory? { get set }
  var countdownTimerViewFactory: BanubaVideoEditorSDK.CountdownTimerViewFactory? { get set }
  var exposureViewFactory: BanubaVideoEditorSDK.AnimatableViewFactory? { get set }
  var galleryViewControllerFactory: BanubaUtilities.GalleryViewControllerFactory? { get set }
}
extension ExternalViewControllerFactory {
  public var galleryViewControllerFactory: BanubaUtilities.GalleryViewControllerFactory? {
    get
    set(newValue)
  }
}
public struct RecorderAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case toggleFlash
    case changeSpeed
    case toggleCamera
    case toggleTimer
    case addFilter
    case addMask
    case changeMaskSubtype
    case toggleBeautification
    case presentMusicPicker
    case presentMaskPicker
    case presentFilterPicker
    case recordVideoPart
    case removeVideoPart
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.RecorderAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.RecorderAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case isFlashOn
    case recordSpeed
    case cameraType
    case timerDuration
    case filterID
    case maskID
    case musicID
    case maskSubtypeID
    case isBeautificationOn
    case recordingGesture
    case videoPartDuration
    case videoPartInfos
    case videoPartCount
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.RecorderAnalytics.EventKind>
}
public struct AnalyticsDefaults {
  public static var recorderScreenName: Swift.String
  public static var editorScreenName: Swift.String
  public static var tapGestureName: Swift.String
  public static var longTapGestureName: Swift.String
  public static var colorEffectTypeName: Swift.String
  public static var visualEffectTypeName: Swift.String
  public static var timeEffectTypeName: Swift.String
}
public struct VideoDurationDefaults {
  public static var shared: BanubaVideoEditorSDK.VideoEditorDurationConfig
}
public struct VideoImportDefaults {
  public static var maximumNumberOfVideos: Swift.Int
}
public struct VideoAspectRatio {
  public static var minFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var maxFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat> {
    get
  }
}
public protocol TimelineViewControllerDelegate : AnyObject {
  func changeVideoPosition(on time: CoreMedia.CMTime)
  func shouldPauseVideo()
}
@_hasMissingDesignatedInitializers public class EffectInterval {
  public struct IntervalRange {
    public var location: Foundation.TimeInterval
    public var length: Foundation.TimeInterval
  }
  public var range: BanubaVideoEditorSDK.EffectInterval.IntervalRange
  @objc deinit
}
public protocol RecorderPresenterProtocol : AnyObject {
  func changeViewToIdleState()
  func changeViewToCaptureState()
  func setSequenceViewMaximumVideoDuration(_ duration: Foundation.TimeInterval)
  func updateCaptureProgress(_ progress: Swift.Double, relevantProgress: Swift.String, isUndoAction: Swift.Bool)
  func presentCountdownAnimations(with timeout: Foundation.TimeInterval, completion: @escaping (Swift.Bool) -> ())
  func dismissCountdownAnimations(isRecording: Swift.Bool)
  func sequenceViewRemoveLast()
  func presentAlertAboutLowDiskSpace()
  func captureSessionDidEnd()
  func presentMessage(with text: Swift.String)
  func didStartExportPhoto()
  func didEndExportPhoto()
  func didUpdateVideoSequence()
  func didReachMaximumDuration()
  func updateNextButtonAppearance()
}
public struct PIPSwitchCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPSwitchLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPCameraCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var selectedTextConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPCameraLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, selectedTextConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPSelectableCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPPlayerLayoutSetting
  public var switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?
  public var cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var isRoundedImageView: Swift.Bool
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public var additionalButtonWidth: CoreGraphics.CGFloat
  public var additionalButtonHeight: CoreGraphics.CGFloat
  public init(identifier: BanubaSDKServicing.PIPPlayerLayoutSetting, switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?, cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, isRoundedImageView: Swift.Bool, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor, additionalButtonWidth: CoreGraphics.CGFloat = 130, additionalButtonHeight: CoreGraphics.CGFloat = 32)
}
public struct TextShadowConfiguration {
  public var shadowColor: UIKit.UIColor
  public var shadowOffset: CoreGraphics.CGSize
  public var shadowBlurRadius: CoreGraphics.CGFloat
  public init(shadowColor: UIKit.UIColor = UIColor.black.withAlphaComponent(0.4), shadowOffset: CoreGraphics.CGSize = CGSize(width: 0, height: 1), shadowBlurRadius: CoreGraphics.CGFloat = 2.0)
  public func shadow() -> UIKit.NSShadow
}
public struct SpeedBarButtonsConfiguration {
  public var imageNameHalf: Swift.String
  public var imageNameNormal: Swift.String
  public var imageNameDouble: Swift.String
  public var imageNameTriple: Swift.String
  public var selectedTitleColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public init(imageNameHalf: Swift.String, imageNameNormal: Swift.String, imageNameDouble: Swift.String, imageNameTriple: Swift.String, selectedTitleColor: UIKit.UIColor, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat?)
}
public struct ToastConfiguration {
  public var kern: Swift.Double
  public var font: UIKit.UIFont
  public var cornerRadius: CoreGraphics.CGFloat
  public var textColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(kern: Swift.Double, font: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, textColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .black)
}
public struct AdditionalEffectsButtonConfiguration {
  public enum Position : Swift.Int {
    case top
    case bottom
    case center
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration?
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition?
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position?
  public var imageTitleSpacing: CoreGraphics.CGFloat?
  public var defaultTitleAlpha: CoreGraphics.CGFloat?
  public var selectedTitleAlpha: CoreGraphics.CGFloat?
  public var cornerRadius: CoreGraphics.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var contentInsets: CoreGraphics.CGFloat
  public init(identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextButtonConfiguration? = nil, titlePosition: BanubaVideoEditorSDK.TitlePosition? = nil, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position? = nil, imageTitleSpacing: CoreGraphics.CGFloat? = nil, defaultTitleAlpha: CoreGraphics.CGFloat? = nil, selectedTitleAlpha: CoreGraphics.CGFloat? = nil, cornerRadius: CoreGraphics.CGFloat = .zero, backgroundColor: UIKit.UIColor = .clear, contentInsets: CoreGraphics.CGFloat = 8.5)
  public enum ButtonType : Swift.String {
    case link
    case color
    case sticker
    case text
    case time
    case sound
    case effects
    case toggle
    case flashlight
    case timer
    case speed
    case beauty
    case masks
    case muteSound
    case interactive
    case pip
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum TitlePosition {
  case top
  case left
  case right
  case bottom
  public static func == (a: BanubaVideoEditorSDK.TitlePosition, b: BanubaVideoEditorSDK.TitlePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RecordButtonProvider {
  func getButton() -> BanubaVideoEditorSDK.RecordButton
}
@objc public enum DraftsFeatureConfig : Swift.Int, Swift.CaseIterable {
  case enabled = 0
  case enabledSaveToDraftsByDefault = 1
  case disabled = 2
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.DraftsFeatureConfig]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.DraftsFeatureConfig] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct FeatureConfiguration {
  public var isOverlayEditorEnabled: Swift.Bool
  public var isDoubleTapForToggleCameraEnabled: Swift.Bool
  public var isMuteCameraAudioEnabled: Swift.Bool
  public var isInteractivesEnabled: Swift.Bool
  public var isSimpleVideoCoverEnabled: Swift.Bool
  public var supportsTrimRecordedVideo: Swift.Bool
  public var draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig
  public var isAspectsEnabled: Swift.Bool
  public static var `default`: BanubaVideoEditorSDK.FeatureConfiguration
  public init(isOverlayEditorEnabled: Swift.Bool, isDoubleTapForToggleCameraEnabled: Swift.Bool, isMuteCameraAudioEnabled: Swift.Bool, isInteractivesEnabled: Swift.Bool, isSimpleVideoCoverEnabled: Swift.Bool, supportsTrimRecordedVideo: Swift.Bool, draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig, isAspectsEnabled: Swift.Bool)
}
public struct RecorderEffectsConfiguration {
  public var cornerRadius: CoreGraphics.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var effectsHeight: CoreGraphics.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public init(cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, effectsHeight: CoreGraphics.CGFloat, effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration, effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration, preferredLutsOrder: [Swift.String], preferredMasksOrder: [Swift.String])
}
public struct EffectAdditionalMediaPickerConfiguration {
  public var galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration
  public var infoLabelConfiguration: BanubaUtilities.TextConfiguration
  public var allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var noMediaLabelConfiguration: BanubaUtilities.TextConfiguration
  public var openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public init(galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration, infoLabelConfiguration: BanubaUtilities.TextConfiguration, allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, noMediaLabelConfiguration: BanubaUtilities.TextConfiguration, openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration)
}
public struct GalleryAssetItemConfiguration {
  public var durationConfiguration: BanubaUtilities.TextConfiguration
  public var cornerRadius: CoreGraphics.CGFloat
  public var selectionColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public var normalImage: BanubaVideoEditorSDK.ImageConfiguration
  public var activityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
}
public struct TimerConfiguration {
  public struct TimerOptionConfiguration : Swift.Equatable {
    public var button: BanubaVideoEditorSDK.ImageButtonConfiguration
    public var startingTimerSeconds: Swift.Int
    public var stoppingTimerSeconds: Swift.Int
    public var description: Swift.String?
    public static func == (lhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration, rhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration) -> Swift.Bool
    public init(button: BanubaVideoEditorSDK.ImageButtonConfiguration, startingTimerSeconds: Swift.Int, stoppingTimerSeconds: Swift.Int, description: Swift.String? = nil)
  }
  public var defaultButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var options: [BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration]
}
public struct ScreenNameConfiguration {
  public var isHidden: Swift.Bool
  public var style: BanubaUtilities.TextConfiguration?
  public init(isHidden: Swift.Bool, style: BanubaUtilities.TextConfiguration? = nil)
}
public struct GalleryVideoPartsConfiguration {
  public var addGalleryVideoPartImageName: Swift.String
  public var videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration
  public init(addGalleryVideoPartImageName: Swift.String, videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration)
  public struct GalleryVideoPartConfiguration {
    public var selectionColor: UIKit.UIColor
    public var durationLabelConfiguration: BanubaUtilities.TextConfiguration
    public var cornerRadius: CoreGraphics.CGFloat
    public var imageCornerRadius: CoreGraphics.CGFloat
    public var imageInsets: UIKit.UIEdgeInsets
    public var scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
    public init(selectionColor: UIKit.UIColor, durationLabelConfiguration: BanubaUtilities.TextConfiguration, cornerRadius: CoreGraphics.CGFloat, imageCornerRadius: CoreGraphics.CGFloat, imageInsets: UIKit.UIEdgeInsets, scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?)
  }
}
public struct EffectItemConfiguration {
  public var titleStyle: BanubaUtilities.TextConfiguration
  public var selectionColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat
  public var borderWidth: CoreGraphics.CGFloat
  public var selectWhenHighlight: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var imageInsets: UIKit.UIEdgeInsets
  public var imageCornerRadius: CoreGraphics.CGFloat
  public var imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration?
  public var alwaysShowTitle: Swift.Bool
  public var showMasksTitle: Swift.Bool
  public var downloadIcon: BanubaVideoEditorSDK.ImageConfiguration?
  public var progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory?
  public init(titleStyle: BanubaUtilities.TextConfiguration, selectionColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat, selectWhenHighlight: Swift.Bool, backgroundColor: UIKit.UIColor, imageInsets: UIKit.UIEdgeInsets, imageCornerRadius: CoreGraphics.CGFloat, imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration? = nil, alwaysShowTitle: Swift.Bool, showMasksTitle: Swift.Bool, downloadIcon: BanubaVideoEditorSDK.ImageConfiguration? = nil, progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory? = nil)
}
public struct BanubaButtonConfiguration {
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var background: BanubaUtilities.BackgroundConfiguration
  public var imageTitleSpacing: CoreGraphics.CGFloat
  public init(title: BanubaUtilities.TextButtonConfiguration, titlePosition: BanubaVideoEditorSDK.TitlePosition = .bottom, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, background: BanubaUtilities.BackgroundConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageTitleSpacing: CoreGraphics.CGFloat = 0.0)
}
public struct TimeLabelConfiguration {
  public var textInsets: UIKit.UIEdgeInsets
  public var cornerRadius: CoreGraphics.CGFloat
  public var defaultColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var style: BanubaUtilities.TextConfiguration
  public init(textInsets: UIKit.UIEdgeInsets, cornerRadius: CoreGraphics.CGFloat, defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, style: BanubaUtilities.TextConfiguration)
}
public struct VideoCoverSelectionConfiguration {
  public var cancelButton: BanubaUtilities.RoundedButtonConfiguration
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var titleLabel: BanubaUtilities.TextConfiguration?
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var selectorColor: UIKit.UIColor
  public var selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var numberOfThumbnails: Swift.Int
  public init(cancelButton: BanubaUtilities.RoundedButtonConfiguration, doneButton: BanubaUtilities.RoundedButtonConfiguration, titleLabel: BanubaUtilities.TextConfiguration?, toolTipLabel: BanubaUtilities.TextConfiguration, selectorColor: UIKit.UIColor, selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration, deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration, thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, numberOfThumbnails: Swift.Int)
}
public struct FilterControlButtonConfig {
  public enum `Type` : Swift.String {
    case cancel
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`
  public let imageName: Swift.String
  public let selectedImageName: Swift.String?
  public let imageEdgeInsets: UIKit.UIEdgeInsets?
  public init(type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`, imageName: Swift.String, selectedImageName: Swift.String?, imageEdgeInsets: UIKit.UIEdgeInsets? = nil)
}
@objc public class ImageConfiguration : ObjectiveC.NSObject, BanubaUtilities.ImageConfigurationProtocol {
  public var imageName: Swift.String
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  public init(imageName: Swift.String)
  public init(image: UIKit.UIImage)
  @objc override dynamic public init()
  @objc deinit
}
public struct ImageButtonConfiguration : BanubaUtilities.ImageButtonConfigurationProtocol {
  public var imageConfiguration: BanubaUtilities.ImageConfigurationProtocol
  public var selectedImageConfiguration: BanubaUtilities.ImageConfigurationProtocol?
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil)
}
public struct DraftsConfiguration {
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var title: BanubaUtilities.TextConfiguration
  public var draftItem: BanubaVideoEditorSDK.DraftItemConfiguration
  public var emptyDraftsImage: BanubaVideoEditorSDK.ImageConfiguration
  public var emptyDraftsLabel: BanubaUtilities.TextConfiguration
  public var actionMenuConfiguration: BanubaVideoEditorSDK.ActionMenuConfiguration
}
public struct ActionMenuConfiguration {
  public var closeButtonImage: BanubaVideoEditorSDK.ImageConfiguration
  public var bacgroundViewCornerRadius: CoreGraphics.CGFloat
  public var previewImageViewCornerRadius: CoreGraphics.CGFloat
}
public struct DraftItemConfiguration {
  public var infoLabel: BanubaUtilities.TextConfiguration
  public var menuImage: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var cornerRadius: CoreGraphics.CGFloat
  public var menuItems: [BanubaVideoEditorSDK.DraftMenuItem]
  public init(infoLabel: BanubaUtilities.TextConfiguration, menuImage: BanubaVideoEditorSDK.ImageButtonConfiguration, cornerRadius: CoreGraphics.CGFloat, menuItems: [BanubaVideoEditorSDK.DraftMenuItem])
}
public enum DraftMenuItemType {
  case remove
  public static func == (a: BanubaVideoEditorSDK.DraftMenuItemType, b: BanubaVideoEditorSDK.DraftMenuItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DraftMenuItem {
  public var type: BanubaVideoEditorSDK.DraftMenuItemType
  public var name: BanubaUtilities.TextConfiguration
  public var image: BanubaVideoEditorSDK.ImageConfiguration?
  public init(type: BanubaVideoEditorSDK.DraftMenuItemType, name: BanubaUtilities.TextConfiguration, image: BanubaVideoEditorSDK.ImageConfiguration?)
}
public struct AspectConfiguration {
  public var aspectRatio: BanubaVideoEditorSDK.AspectRatio
  public var icon: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextConfiguration
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var selectedColor: UIKit.UIColor
  public init(aspectRatio: BanubaVideoEditorSDK.AspectRatio, icon: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextConfiguration, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, selectedColor: UIKit.UIColor)
}
public struct AspectsConfiguration {
  public var cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundControlsViewColor: UIKit.UIColor
  public var aspects: [BanubaVideoEditorSDK.AspectConfiguration]
  public var defaultAspect: BanubaVideoEditorSDK.AspectRatio
}
extension VideoEditorService : BanubaMusicEditorSDK.VideoEditorServiceAdoptable {
  public var isMultiAudioEnabled: Swift.Bool {
    get
  }
  public func changeMusicTrackPosition(currentTime: Swift.Double, durationInSeconds: Swift.Double, compositionTimeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, assetTrack: AVFoundation.AVAssetTrack, audioTrack: BanubaMusicEditorSDK.AudioTrackAdoptable) -> CoreMedia.CMTimeRange?
  public func addMusicTrack(didSelectFile url: Foundation.URL, isEditable: Swift.Bool, title: Swift.String, id: Swift.Int32, start: CoreMedia.CMTime, duration: CoreMedia.CMTime?, trimmedStart: Foundation.TimeInterval?) -> (asset: AVFoundation.AVURLAsset, timeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, compositionStart: CoreMedia.CMTime, avAssetTrack: AVFoundation.AVAssetTrack)?
  public func videoTrackVolume() -> Swift.Float
  public func musicTrackVolume(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable) -> Swift.Float
  public func setVideoTrackVolume(_ volume: Swift.Float, to player: BanubaUtilities.Playable)
  public func setMusicTrackVolume(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable, volume: Swift.Float, to player: BanubaUtilities.Playable)
  public func removeMusicTrack(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable) -> Swift.Bool
}
public class GifImage {
  final public let image: UIKit.UIImage
  final public let data: Foundation.Data
  public init(image: UIKit.UIImage, data: Foundation.Data)
  @objc deinit
}
public class GIFImageRepository {
  public init(giphyApi: BanubaVideoEditorSDK.GiphyAPI)
  public func get(by url: Foundation.URL, completion: @escaping (BanubaVideoEditorSDK.Result<BanubaVideoEditorSDK.GifImage>) -> Swift.Void)
  @objc deinit
}
extension UIView {
  open class func animateWorkarounding(withDuration duration: Foundation.TimeInterval, animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public enum EffectType {
  case mask
  case effect
  case videoEditorEffect
  public static func == (a: BanubaVideoEditorSDK.EffectType, b: BanubaVideoEditorSDK.EffectType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIColor {
  public convenience init?(colorParams: BanubaVideoEditorSDK.ColorParams)
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public func get() throws -> T
  public func map<U>(_ transform: (T) -> U) -> BanubaVideoEditorSDK.Result<U>
}
public struct TrimAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case addVideo
    case moveVideo
    case changePartDuration
    case removeVideoPart
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.TrimAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.TrimAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case videoPartCount
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.TrimAnalytics.EventKind>
}
public protocol AnimatableViewFactory {
  func makeAnimatableView() -> BanubaUtilities.AnimatableView
}
public struct EffectPickerAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case present
    case cancel
    case addEffect
    case removeEffect
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.EffectPickerAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.EffectPickerAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case context
    case effectType
    case effectID
    case effectDuration
    case effectIDs
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.EffectPickerAnalytics.EventKind>
}
public protocol ExternalMaskProviding {
  var didReceiveExternalMasks: (([BanubaVideoEditorSDK.ExternalMask]) -> Swift.Void)? { get set }
  var masks: [BanubaVideoEditorSDK.ExternalMask] { get }
  func requestMask(_ mask: BanubaVideoEditorSDK.ExternalMask, statusUpdateHandler: ((BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Void)?)
  func cancelMaskDownloading(_ mask: BanubaVideoEditorSDK.ExternalMask)
  func requestMaskPreview(_ mask: BanubaVideoEditorSDK.ExternalMask, completion: ((UIKit.UIImage?, Swift.Error?) -> Swift.Void)?)
}
public protocol ExternalMask {
  var id: Swift.UInt { get }
  var name: Swift.String { get }
  var url: Foundation.URL { get }
  var previewImageURL: Foundation.URL { get }
  var status: BanubaVideoEditorSDK.ExternalMaskStatus { get }
}
public enum ExternalMaskStatus : Swift.Equatable {
  case startDownloading
  case notDownloaded
  case downloaded(path: Foundation.URL, shouldApply: Swift.Bool)
  case downloading(progress: Swift.Float)
  case error(Swift.Error)
  public static var downloadEffectMaxProgress: Swift.Float
  public static var downloadEffectMinProgress: Swift.Float
  public static func == (lhs: BanubaVideoEditorSDK.ExternalMaskStatus, rhs: BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Bool
}
public enum VideoTextAligment : Swift.Int {
  case left
  case center
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AnalyticsEngine : AnyObject {
  func report(error: Swift.Error, message: Swift.String)
  func report(message: Swift.String, parameters: [Swift.String : Any]?)
}
public struct MusicEditorMetadata : Swift.Codable {
  public var tracks: [BanubaVideoEditorSDK.MusicEditorTrack]
  public var videoVolume: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MusicEditorTrack : Swift.Codable {
  public var url: Foundation.URL
  public var originalURL: Foundation.URL
  public var title: Swift.String
  public var id: Swift.Int32
  public var volume: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoEditorMetadata : Swift.Codable {
  public var effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]?
  public var colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata?
  public var textOnVideoMetadata: [BanubaVideoEditorSDK.TextOnVideoMetadata]?
  public var gifOnVideoMetadata: [BanubaVideoEditorSDK.GIFOnVideoMetadata]?
  public var videoInteractiveMetadata: BanubaVideoEditorSDK.VideoInteractiveMetadata?
  public init(effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]?, colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata?, textOnVideoMetadata: [BanubaVideoEditorSDK.TextOnVideoMetadata]?, gifOnVideoMetadata: [BanubaVideoEditorSDK.GIFOnVideoMetadata]?, videoInteractiveMetadata: BanubaVideoEditorSDK.VideoInteractiveMetadata?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ColorOnVideoMetadata : Swift.Codable {
  public let title: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EffectOnVideoMetadata : Swift.Codable {
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let effectId: Swift.UInt
  public let tokenId: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TextOnVideoMetadata : Swift.Codable {
  public let imageData: Foundation.Data?
  public let textParams: BanubaVideoEditorSDK.TextParams
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum VideoSequenceEditingStep : Swift.Int, Swift.Codable {
  case camera
  case trimmer
  case editor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VideoMetadata : Swift.Codable {
  public let name: Swift.String
  public var isDrafted: Swift.Bool
  public var aspect: BanubaVideoEditorSDK.AspectRatio
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GIFOnVideoMetadata : Swift.Codable {
  public let id: Swift.String
  public let imageData: Foundation.Data?
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CoordinatesParams : Swift.Codable {
  public let transform: CoreGraphics.CGAffineTransform
  public let frame: CoreGraphics.CGRect
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ColorParams : Swift.Codable {
  public let red: CoreGraphics.CGFloat?
  public let green: CoreGraphics.CGFloat?
  public let blue: CoreGraphics.CGFloat?
  public let alpha: CoreGraphics.CGFloat?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TextParams : Swift.Codable {
  public let text: Swift.String?
  public let textFont: Swift.String?
  public let fontName: Swift.String?
  public let fontSize: CoreGraphics.CGFloat?
  public let textAligment: Swift.Int?
  public let textColor: BanubaVideoEditorSDK.ColorParams?
  public let backgroundColor: BanubaVideoEditorSDK.ColorParams?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoCoverMetadata : Swift.Codable {
  public var image: UIKit.UIImage? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TimeMetadata : Swift.Codable {
  public let seconds: Swift.Double
  public let timescale: CoreMedia.CMTimeScale
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension TimeMetadata {
  public init(cmTime: CoreMedia.CMTime)
  public func getCMTime() -> CoreMedia.CMTime
}
public struct VideoInteractiveMetadata : Swift.Codable {
  public var interactiveQuestionMetadata: [BanubaVideoEditorSDK.InteractiveQuestionMetadata]
  public var interactivePollMetadata: [BanubaVideoEditorSDK.InteractivePollMetadata]
  public var interactiveInterestMetadata: [BanubaVideoEditorSDK.InteractiveInterestMetadata]
  public var interactiveTestMetadata: [BanubaVideoEditorSDK.InteractiveTestMetadata]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InteractiveQuestionMetadata : Swift.Codable {
  public let imageData: Foundation.Data?
  public let text: Swift.String
  public let gradientColors: [BanubaVideoEditorSDK.ColorParams]?
  public let textColor: BanubaVideoEditorSDK.ColorParams?
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InteractivePollMetadata : Swift.Codable {
  public let imageData: Foundation.Data?
  public let titleText: Swift.String
  public let leftCardText: Swift.String
  public let rightCardText: Swift.String
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InteractiveInterestMetadata : Swift.Codable {
  public let imageData: Foundation.Data?
  public let title: Swift.String
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InteractiveTestMetadata : Swift.Codable {
  public let imageData: Foundation.Data?
  public let gradientColors: [BanubaVideoEditorSDK.ColorParams]?
  public let textColor: BanubaVideoEditorSDK.ColorParams?
  public let title: Swift.String
  public let fields: [BanubaVideoEditorSDK.InteractiveTestFieldMetaData]
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InteractiveTestFieldMetaData : Swift.Codable {
  public let answer: Swift.String
  public let isAnswer: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmallActivityIndicatorConfiguration {
  public static var config: BanubaUtilities.SmallActivityIndicatorConfiguration {
    get
  }
}
extension FullScreenActivityConfiguration {
  public static var config: BanubaVideoEditorSDK.FullScreenActivityConfiguration {
    get
  }
}
extension WatermarkConfiguration {
  public static var config: VideoEditor.WatermarkConfiguration {
    get
  }
}
public protocol VideoCoverSelectionControllerDelegate : AnyObject {
  func videoCoverSelectionController(_ viewController: BanubaVideoEditorSDK.VideoCoverSelectionController, didDoneWithImage image: UIKit.UIImage?, atIndents indents: [CoreMedia.CMTime])
  func videoCoverSelectionControllerDidCancel(_ viewController: BanubaVideoEditorSDK.VideoCoverSelectionController)
}
public protocol VideoCoverSelectionController : UIKit.UIViewController {
  var coverTime: CoreMedia.CMTime { get set }
  var delegate: BanubaVideoEditorSDK.VideoCoverSelectionControllerDelegate? { get set }
}
@objc @_hasMissingDesignatedInitializers public class VideoCoverSelectionViewController : UIKit.UIViewController, BanubaVideoEditorSDK.VideoCoverSelectionController {
  final public let asset: AVFoundation.AVAsset
  final public let videoEditorService: VideoEditor.VideoEditorServicing
  final public let configuration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  final public let compositionVideoResolution: BanubaUtilities.VideoResolution
  public var coverTime: CoreMedia.CMTime {
    get
    set(value)
  }
  weak public var delegate: BanubaVideoEditorSDK.VideoCoverSelectionControllerDelegate?
  required public init(asset: AVFoundation.AVAsset, configuration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration, compositionVideoResolution: BanubaUtilities.VideoResolution)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension VideoCoverSelectionViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension VideoCoverSelectionViewController : BanubaVideoEditorSDK.TimelineViewControllerDelegate {
  public func changeVideoPosition(on time: CoreMedia.CMTime)
  public func shouldPauseVideo()
}
extension VideoCoverSelectionViewController {
  public func embed(_ viewController: UIKit.UIViewController, in host: UIKit.UIView)
}
public protocol TextEditSelectionColorBehavior {
  func setColorView(_ view: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
}
public class DefaultExposureViewFactory : BanubaVideoEditorSDK.AnimatableViewFactory {
  public init()
  public func makeAnimatableView() -> BanubaUtilities.AnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ExposureAnimationView : UIKit.UIView, BanubaUtilities.AnimatableView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func stop()
  @objc deinit
}
public enum AspectRatio : Swift.UInt8, Swift.Codable {
  case original
  case aspect16x9
  case aspect9x16
  case aspect4x3
  case aspect4x5
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct EditorAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case appearEffects
    case cancel
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.EditorAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.EditorAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case videoPartsCount
    case musicId
    case visualEffectIds
    case colorEffectId
    case timeEffectIds
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.EditorAnalytics.EventKind>
}
public enum CaptureButtonMode {
  case video
  case mixed
  public static func == (a: BanubaVideoEditorSDK.CaptureButtonMode, b: BanubaVideoEditorSDK.CaptureButtonMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnalyticsEventKind : Swift.RawRepresentable where Self.RawValue == Swift.String {
  associatedtype ParameterKey : BanubaVideoEditorSDK.AnalyticsParameterKey
  static var domain: Swift.String { get }
  var parameterKeys: [Self.ParameterKey]? { get }
}
extension AnalyticsEventKind {
  public var id: Swift.String {
    get
  }
}
public protocol AnalyticsParameterKey : Swift.Hashable, Swift.RawRepresentable where Self.RawValue == Swift.String {
}
public class AnalyticsManager<Kind> where Kind : BanubaVideoEditorSDK.AnalyticsEventKind {
  public typealias ParameterKey = Kind.ParameterKey
  public init(analyticsEngine: BanubaVideoEditorSDK.AnalyticsEngine)
  public func log(_ eventKind: Kind, _ parameters: [BanubaVideoEditorSDK.AnalyticsManager<Kind>.ParameterKey : Any]? = nil)
  public func set(_ value: Any?, forKey key: BanubaVideoEditorSDK.AnalyticsManager<Kind>.ParameterKey)
  public func log(error: Swift.Error, message: Swift.String)
  @objc deinit
}
public struct GalleryAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case present
    case multichoiceOn
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.GalleryAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.GalleryAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case isMultichoiceOn
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.GalleryAnalytics.EventKind>
}
public protocol ProgressAnimatableViewFactory {
  func makeProgressAnimatableView() -> BanubaUtilities.ProgressAnimatableView
}
@_hasMissingDesignatedInitializers public class CircularProgressViewFactory : BanubaVideoEditorSDK.ProgressAnimatableViewFactory {
  public func makeProgressAnimatableView() -> BanubaUtilities.ProgressAnimatableView
  @objc deinit
}
public typealias GetPaginatedListHandler<T> = (BanubaVideoEditorSDK.Result<T>, Swift.Bool) -> Swift.Void
@objc public class GiphyAPI : ObjectiveC.NSObject {
  public init(apiKey: Swift.String)
  public func cancelTask(with url: Foundation.URL)
  public func cancelAllTasks()
  public func getData(from url: Foundation.URL, compeletionQueue: Dispatch.DispatchQueue, completion: @escaping (BanubaVideoEditorSDK.Result<Foundation.Data>) -> Swift.Void)
  public func getTrendingGIFObjects(byPageNumber pageNumber: Swift.Int, completion: @escaping BanubaVideoEditorSDK.GetPaginatedListHandler<[BanubaVideoEditorSDK.GiphyImage]>)
  public func getGIFObjects(byPageNumber pageNumber: Swift.Int, searchQuery: Swift.String, completion: @escaping BanubaVideoEditorSDK.GetPaginatedListHandler<[BanubaVideoEditorSDK.GiphyImage]>)
  @objc override dynamic public init()
  @objc deinit
}
public class MaskModel : Swift.Hashable, Swift.Comparable {
  final public let name: Swift.String
  final public let imageUrl: Foundation.URL
  public var url: Foundation.URL
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType
  final public let id: Swift.UInt
  public var isPreferredFrontCamera: Swift.Bool? {
    get
  }
  public var supportsAdditionalMedia: Swift.Bool {
    get
  }
  public var progress: Swift.Float?
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)?
  public var image: UIKit.UIImage?
  public convenience init(url: Foundation.URL)
  public convenience init(name: Swift.String, imageUrl: Foundation.URL, downloadType: BanubaVideoEditorSDK.ContentLocationType, id: Swift.UInt)
  public init(name: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, downloadType: BanubaVideoEditorSDK.ContentLocationType, id: Swift.UInt)
  public static func == (lhs: BanubaVideoEditorSDK.MaskModel, rhs: BanubaVideoEditorSDK.MaskModel) -> Swift.Bool
  public static func < (lhs: BanubaVideoEditorSDK.MaskModel, rhs: BanubaVideoEditorSDK.MaskModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension MaskModel : BanubaVideoEditorSDK.ExternalMask {
  public var previewImageURL: Foundation.URL {
    get
  }
  public var status: BanubaVideoEditorSDK.ExternalMaskStatus {
    get
  }
}
extension MaskModel : BanubaVideoEditorSDK.EffectViewModel {
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var title: Swift.String {
    get
  }
}
public struct MusicPickerAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static var domain: Swift.String
    case present
    case cancel
    case select
    case remove
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.MusicPickerAnalytics.ParameterKey]? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ParameterKey = BanubaVideoEditorSDK.MusicPickerAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case context
    case musicId
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.MusicPickerAnalytics.EventKind>
}
public enum ContentLocationType : Swift.Int {
  case remote
  case local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol EffectViewModel : AnyObject {
  var type: BanubaVideoEditorSDK.EffectType { get }
  var image: UIKit.UIImage? { get set }
  var title: Swift.String { get }
  var id: Swift.UInt { get }
  var progress: Swift.Float? { get set }
  var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? { get set }
  var downloadType: BanubaVideoEditorSDK.ContentLocationType { get }
  func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
}
extension EffectModel : BanubaVideoEditorSDK.EffectViewModel {
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set(newValue)
  }
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? {
    get
    set(newValue)
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set(newValue)
  }
  public var title: Swift.String {
    get
  }
}
extension VideoEditorFilterModel : BanubaVideoEditorSDK.EffectViewModel {
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set(newValue)
  }
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? {
    get
    set(newValue)
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set(newValue)
  }
  public var title: Swift.String {
    get
  }
}
public protocol RecordButton : UIKit.UIView {
  var delegate: BanubaVideoEditorSDK.RecordButtonDelegate? { get set }
  var configuration: BanubaVideoEditorSDK.RecordButtonConfiguration? { get set }
  func updateVideoRecordingProgress(_ progress: Swift.Double)
  func changeViewToIdleState()
  func changeViewToRecordingState()
  func reset()
}
public protocol RecordButtonDelegate : AnyObject {
  func recordButtonDidTakePhoto(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStartVideoRecording(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStopVideoRecording(_ recordButton: BanubaVideoEditorSDK.RecordButton)
}
