// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -enable-bare-slash-regex -module-name BanubaVideoEditorSDK
import AVFoundation
import AVKit
import Accelerate
import BanubaLicenseServicingSDK
import BanubaSDKServicing
import BanubaUtilities
@_exported import BanubaVideoEditorSDK
import Combine
import CoreGraphics
import CoreMedia
import DeveloperToolsSupport
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import Swift
import SwiftUI
import UIKit
import VEEffectsSDK
import VEExportSDK
import VEPlaybackSDK
import VideoEditor
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import os.signpost
public class EffectItem {
  public var effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var icon: (any BanubaUtilities.ImageConfigurationProtocol)?
  public var text: BanubaUtilities.TextConfiguration
  public var isSelected: Swift.Bool
  public var width: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var selectedColor: UIKit.UIColor
  public init(choosedEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, icon: (any BanubaUtilities.ImageConfigurationProtocol)?, text: BanubaUtilities.TextConfiguration, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, selectedColor: UIKit.UIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FullscreenActivityView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var additionalButton: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) public var configuration: BanubaVideoEditorSDK.FullScreenActivityConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func applyVisibility(_ visible: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func loadFromNib() -> BanubaVideoEditorSDK.FullscreenActivityView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum AudioTrackLinePosition : Swift.Int, Swift.CaseIterable {
  case first
  case second
  case third
  case fourth
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.AudioTrackLinePosition]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.AudioTrackLinePosition] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class AudioTrack : Swift.Equatable {
  public var isAudioRecord: Swift.Bool
  public var dbArray: [Swift.Float]?
  public var compositionTrack: AVFoundation.AVMutableCompositionTrack?
  public var avAssetTrack: AVFoundation.AVAssetTrack?
  public var avURLAsset: AVFoundation.AVURLAsset
  public var timeRange: CoreMedia.CMTimeRange
  public var trimmedTimeRange: CoreMedia.CMTimeRange
  public var compositionStart: CoreMedia.CMTime
  public var url: Foundation.URL
  public var originalURL: Foundation.URL
  public var coverURL: Foundation.URL?
  public var title: Swift.String?
  public var additionalTitle: Swift.String?
  public var id: Swift.Int32?
  final public let uuid: Foundation.UUID
  public var appliedFilterId: Swift.Int?
  public var isCameraTrack: Swift.Bool
  public var isEditable: Swift.Bool
  public var position: BanubaVideoEditorSDK.AudioTrackLinePosition
  required public init(url: Foundation.URL, coverURL: Foundation.URL?, originalURL: Foundation.URL, uuid: Foundation.UUID, id: Swift.Int32?, timeRange: CoreMedia.CMTimeRange, trimTimeRange: CoreMedia.CMTimeRange, compositionStart: CoreMedia.CMTime, avURLAsset: AVFoundation.AVURLAsset, isAudioRecord: Swift.Bool, isEditable: Swift.Bool, isCameraTrack: Swift.Bool, title: Swift.String?, additionalTitle: Swift.String?, appliedFilterId: Swift.Int?)
  public static func == (lhs: BanubaVideoEditorSDK.AudioTrack, rhs: BanubaVideoEditorSDK.AudioTrack) -> Swift.Bool
  public func resetFilter()
  @objc deinit
}
final public class ApplicationInformation {
  required public init(bundle: Foundation.Bundle)
  final public var version: Swift.String {
    get
  }
  final public var build: Swift.String {
    get
  }
  final public var fullVersion: Swift.String {
    get
  }
  @objc deinit
}
@objc public class VideoEditorLaunchConfig : ObjectiveC.NSObject {
  public var entryPoint: BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint
  public var hostController: UIKit.UIViewController
  public var videoItems: [Foundation.URL]?
  public var shouldCopyVideo: Swift.Bool
  public var draftedLaunchConfig: BanubaVideoEditorSDK.VideoEditorLaunchConfig.DraftedLaunchConfig?
  public var pipVideoItem: Foundation.URL?
  public var musicTrack: BanubaUtilities.MediaTrack?
  public var animated: Swift.Bool
  public struct DraftedLaunchConfig {
    public var externalDraft: BanubaVideoEditorSDK.ExternalDraft
    public var draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig
    public init(externalDraft: BanubaVideoEditorSDK.ExternalDraft, draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig)
  }
  public init(entryPoint: BanubaLicenseServicingSDK.BanubaVideoEditorEntryPoint, hostController: UIKit.UIViewController, videoItems: [Foundation.URL]? = nil, shouldCopyVideo: Swift.Bool = false, pipVideoItem: Foundation.URL? = nil, draftedLaunchConfig: BanubaVideoEditorSDK.VideoEditorLaunchConfig.DraftedLaunchConfig? = nil, musicTrack: BanubaUtilities.MediaTrack? = nil, animated: Swift.Bool)
  @objc deinit
}
public struct ExportCoverImages {
  public var coverImage: UIKit.UIImage?
  public var gifFileUrl: Foundation.URL?
}
public protocol BanubaVideoEditorDelegate : AnyObject {
  func videoEditorDidCancel(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
  func videoEditorDone(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
  func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, shouldProcessMediaUrls urls: [Foundation.URL]) -> Swift.Bool
  func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, didSaveDraft draft: BanubaVideoEditorSDK.ExternalDraft)
  func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, didSaveCurrentSession session: BanubaVideoEditorSDK.ExternalDraft)
  func videoEditorDidRequestDrafts(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
}
extension BanubaVideoEditorSDK.BanubaVideoEditorDelegate {
  public func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, shouldProcessMediaUrls urls: [Foundation.URL]) -> Swift.Bool
  public func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, didSaveDraft draft: BanubaVideoEditorSDK.ExternalDraft)
  public func videoEditor(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor, didSaveCurrentSession session: BanubaVideoEditorSDK.ExternalDraft)
  public func videoEditorDidRequestDrafts(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
}
public class BanubaVideoEditor {
  weak public var delegate: (any BanubaVideoEditorSDK.BanubaVideoEditorDelegate)?
  public var musicMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? {
    get
  }
  public var metadata: BanubaVideoEditorSDK.VideoEditorMetadata? {
    get
  }
  public var videoMetadata: BanubaVideoEditorSDK.VideoMetadata? {
    get
  }
  public var blurEffectsList: BanubaVideoEditorSDK.BlurList? {
    get
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var externalAnalyticsEventListener: (any BanubaVideoEditorSDK.ExternalSDKAnalyticsEventsListener)? {
    get
    set
  }
  public var externalLogListener: (any BanubaUtilities.ExternalLogListener)? {
    get
    set
  }
  public var musicTrack: BanubaUtilities.MediaTrack? {
    get
  }
  public var draftsService: BanubaVideoEditorSDK.DraftsService {
    get
  }
  public var imageGenerator: AVFoundation.AVAssetImageGenerator? {
    get
  }
  public var currentConfiguration: BanubaVideoEditorSDK.VideoEditorConfig {
    get
  }
  public var draftActionType: BanubaVideoEditorSDK.DraftActionType {
    get
  }
  public init?(token: Swift.String, arguments: [Swift.String : Any] = [:], isCameraEnabled: Swift.Bool = true, configuration: BanubaVideoEditorSDK.VideoEditorConfig, externalViewControllerFactory: (any BanubaVideoEditorSDK.ExternalViewControllerFactory)? = nil)
  @objc deinit
  public func export(using configuration: VEExportSDK.ExportConfiguration, exportProgress: ((Swift.Float) -> Swift.Void)?, completion: @escaping ((_ error: (any Swift.Error)?, _ exportCoverImages: BanubaVideoEditorSDK.ExportCoverImages?) -> Swift.Void))
  public func stopExport()
  public func isExporting() -> Swift.Bool
  public func exportAudio(fileUrl: Foundation.URL, audioSettings: [Swift.String : Any] = VESettings.audio, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func clearSessionData()
  public func dismissVideoEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func getVideoEditorNavigationController(withLaunchConfiguration configuration: BanubaVideoEditorSDK.VideoEditorLaunchConfig) -> UIKit.UINavigationController?
  public func presentVideoEditor(withLaunchConfiguration configuration: BanubaVideoEditorSDK.VideoEditorLaunchConfig, completion: (() -> Swift.Void)?)
  public func updateVideoEditorConfig(_ config: BanubaVideoEditorSDK.VideoEditorConfig)
  public func updateVideoEditorArgs(_ arguments: [Swift.String : Any])
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public static func presentSharingViewController(from hostController: UIKit.UIViewController, configuration: BanubaVideoEditorSDK.SharingScreenConfiguration, mainVideoUrl: Foundation.URL, videoUrls: [Foundation.URL], previewImage: UIKit.UIImage, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public static func presentFeedBackAlertViewController(from hostController: UIKit.UIViewController, animated: Swift.Bool, completion: @escaping (BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Void)
  public static var currentDevice: Swift.String {
    get
  }
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public func exportExternalDraft(_ externalDraft: BanubaVideoEditorSDK.ExternalDraft) throws -> Foundation.URL
  public func importExternalDraft(fromZipUrl url: Foundation.URL) throws -> BanubaVideoEditorSDK.ExternalDraft
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public func getLicenseState(completion: @escaping ((Swift.Bool) -> Swift.Void))
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public struct TextLink : BanubaVideoEditorSDK.ReflectedStringConvertible {
    public let title: Swift.String
    public let link: Swift.String
    public let start: Foundation.TimeInterval
    public let end: Foundation.TimeInterval
  }
  public var textLinks: [BanubaVideoEditorSDK.BanubaVideoEditor.TextLink] {
    get
  }
}
public struct MainMusicViewControllerConfig {
  public var editButtons: [BanubaVideoEditorSDK.EditButtonConfig]
  public var editButtonsHeight: CoreFoundation.CGFloat
  public var editCompositionButtons: [BanubaVideoEditorSDK.EditCompositionButtonConfig]
  public var controlButtons: [BanubaVideoEditorSDK.ControlButtonConfig]
  public var playerControlsHeight: CoreFoundation.CGFloat
  public var audioWaveConfiguration: BanubaVideoEditorSDK.AudioWaveConfiguration
  public var mainLabelColors: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var tracksLimit: Swift.Int
  public var cursorColor: UIKit.UIColor
  public var controlsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var previewViewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var videoControlsViewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public var toastConfiguration: BanubaUtilities.ToastConfiguration
}
public struct AudioRecorderViewControllerConfig {
  public var rewindToStartButton: BanubaVideoEditorSDK.ControlButtonConfig?
  public var playPauseButton: BanubaVideoEditorSDK.ControlButtonConfig
  public var playerControlsHeight: CoreFoundation.CGFloat
  public var recordButton: BanubaVideoEditorSDK.ControlButtonConfig
  public var recordButtonBorderWidth: CoreFoundation.CGFloat
  public var backButtonImage: Swift.String
  public var doneButtonImage: Swift.String
  public var dimViewColor: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var startingRecordingTimerSeconds: Foundation.TimeInterval
  public var timerColor: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var playerControlsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public var resetButton: BanubaUtilities.RoundedButtonConfiguration
  public var controlButtonsTintColor: UIKit.UIColor?
}
public struct VideoTrackLineEditViewControllerConfig {
  public var doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var sliderTintColor: UIKit.UIColor
  public var thumbImage: BanubaVideoEditorSDK.ImageConfiguration?
  public var mainLabelColors: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
}
public struct AudioWaveConfiguration {
  public var waveBorderColor: UIKit.UIColor
  public var waveCornerRadius: CoreFoundation.CGFloat
  public var waveLinesColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var maxWaveHeight: CoreFoundation.CGFloat
  public var audioTitleFont: UIKit.UIFont?
  public var audioTitleColor: UIKit.UIColor?
  public var bottomOffset: CoreFoundation.CGFloat
}
public struct AudioTrackLineEditViewControllerConfig {
  public var songLabelTextConfiguration: BanubaUtilities.TextConfiguration
  public var audioWaveConfiguration: BanubaVideoEditorSDK.AudioWaveConfiguration
  public var doneButtonImageName: Swift.String
  public var doneButtonTintColor: UIKit.UIColor?
  public var cancelButtonImageName: Swift.String
  public var cancelButtonTintColor: UIKit.UIColor?
  public var sliderTintColor: UIKit.UIColor
  public var sliderThumbImage: BanubaVideoEditorSDK.ImageConfiguration?
  public var draggersColor: UIKit.UIColor
  public var draggerImageName: Swift.String?
  public var trimHeight: CoreFoundation.CGFloat
  public var trimBorderColor: UIKit.UIColor
  public var trimBorderWidth: CoreFoundation.CGFloat
  public var cursorHeight: CoreFoundation.CGFloat
  public var dimViewColor: UIKit.UIColor
  public var mainLabelColors: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var draggersWidth: CoreFoundation.CGFloat
  public var draggersLineColor: UIKit.UIColor
  public var draggersCornerRadius: CoreFoundation.CGFloat
  public var draggersLineWidth: CoreFoundation.CGFloat
  public var draggersLineHeight: CoreFoundation.CGFloat
  public var numberOfLinesInDraggers: Swift.Int
  public var draggerLinesSpacing: CoreFoundation.CGFloat
  public var draggersLineCornerRadius: CoreFoundation.CGFloat
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var voiceFilterConfiguration: BanubaVideoEditorSDK.VoiceFilterConfiguration?
  public var voiceFilterProvider: (any BanubaVideoEditorSDK.VoiceFilterProvider)?
  public var isVoiceFilterHidden: Swift.Bool {
    get
  }
}
public struct EditButtonConfig {
  public enum `Type` : Swift.String {
    case track
    case effect
    case record
    case volume
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var font: UIKit.UIFont
  public var type: BanubaVideoEditorSDK.EditButtonConfig.`Type`
  public var title: Swift.String
  public var titleColor: UIKit.UIColor
  public var imageName: Swift.String
  public var tintColor: UIKit.UIColor?
  public init(font: UIKit.UIFont, type: BanubaVideoEditorSDK.EditButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, imageName: Swift.String, tintColor: UIKit.UIColor? = nil)
}
public struct EditCompositionButtonConfig {
  public enum `Type` : Swift.String {
    case voiceEffect
    case edit
    case delete
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var font: UIKit.UIFont
  public var type: BanubaVideoEditorSDK.EditCompositionButtonConfig.`Type`
  public var title: Swift.String
  public var titleColor: UIKit.UIColor
  public var imageName: Swift.String
  public var selectedImageName: Swift.String?
  public var tintColor: UIKit.UIColor?
  public init(font: UIKit.UIFont, type: BanubaVideoEditorSDK.EditCompositionButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, imageName: Swift.String, selectedImageName: Swift.String?, tintColor: UIKit.UIColor? = nil)
}
public struct ControlButtonConfig {
  public enum `Type` : Swift.String {
    case reset
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: BanubaVideoEditorSDK.ControlButtonConfig.`Type`
  public var image: UIKit.UIImage?
  public var selectedImage: UIKit.UIImage?
  public var imageName: Swift.String
  public var selectedImageName: Swift.String?
  public var imageEdgeInsets: UIKit.UIEdgeInsets?
  public var tintColor: UIKit.UIColor?
  public init(type: BanubaVideoEditorSDK.ControlButtonConfig.`Type`, imageName: Swift.String, selectedImageName: Swift.String?, imageEdgeInsets: UIKit.UIEdgeInsets? = nil, tintColor: UIKit.UIColor? = nil)
}
public typealias TextButtonConfig = BanubaVideoEditorSDK.MusicEditor.TextButtonConfig
public struct MusicEditor {
  public struct TextButtonConfig {
    public var font: UIKit.UIFont
    public var color: UIKit.UIColor
    public var title: Swift.String
  }
}
public struct VoiceFilterConfiguration {
  public var cornerRadius: CoreFoundation.CGFloat
  public var imageCornerRadius: CoreFoundation.CGFloat
  public var selectionBorderWidth: CoreFoundation.CGFloat
  public var selectionColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var noneFilterTitle: Swift.String?
  public var noneFilterImageName: Swift.String
  public var availableVoiceFilterIDs: [Swift.Int]?
  public init(cornerRadius: CoreFoundation.CGFloat, imageCornerRadius: CoreFoundation.CGFloat, selectionBorderWidth: CoreFoundation.CGFloat, selectionColor: UIKit.UIColor, font: UIKit.UIFont, textColor: UIKit.UIColor, noneFilterTitle: Swift.String?, noneFilterImageName: Swift.String)
}
public protocol VoiceFilterProvider {
  func provideFilters() -> [BanubaVideoEditorSDK.VoiceFilter]
}
public enum AVAudioEngineUnit {
  case timePitch
  case reverb
  case delay
  public static func == (a: BanubaVideoEditorSDK.AVAudioEngineUnit, b: BanubaVideoEditorSDK.AVAudioEngineUnit) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AVAudioEngineUnitParameter {
  case pitch
  case rate
  case wetDryMix
  case delayTime
  case feedback
  public static func == (a: BanubaVideoEditorSDK.AVAudioEngineUnitParameter, b: BanubaVideoEditorSDK.AVAudioEngineUnitParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VoiceEffectType : Swift.Int {
  case baritone
  case echo
  case elf
  case giant
  case robot
  case squirrel
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias AVAudioEngineUnitSettings = [BanubaVideoEditorSDK.AVAudioEngineUnitParameter : Swift.Float]
public typealias AVAudioEngineFilterSetting = [BanubaVideoEditorSDK.AVAudioEngineUnit : BanubaVideoEditorSDK.AVAudioEngineUnitSettings]
public struct VoiceFilter : Swift.Equatable {
  public var id: Swift.Int {
    get
  }
  public let type: BanubaVideoEditorSDK.VoiceEffectType
  public var title: Swift.String?
  public var color: UIKit.UIColor
  public var image: UIKit.UIImage?
  public var settings: BanubaVideoEditorSDK.AVAudioEngineFilterSetting
  public init(type: BanubaVideoEditorSDK.VoiceEffectType, title: Swift.String?, color: UIKit.UIColor? = nil, image: UIKit.UIImage?, settings: BanubaVideoEditorSDK.AVAudioEngineFilterSetting? = nil)
  public static func == (lhs: BanubaVideoEditorSDK.VoiceFilter, rhs: BanubaVideoEditorSDK.VoiceFilter) -> Swift.Bool
}
public class TextEditSelectionBorderAnimationBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let defaultBorderWidth: CoreFoundation.CGFloat
  final public let selectedBorderWidth: CoreFoundation.CGFloat
  public init(defaultBorderWidth: CoreFoundation.CGFloat, selectedBorderWidth: CoreFoundation.CGFloat)
  public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultCountdownAnimatableView : BanubaVideoEditorSDK.CountdownTimerViewFactory {
  final public func makeCountdownTimerView() -> any BanubaUtilities.CountdownTimerAnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CountdownView : UIKit.UIView, BanubaUtilities.CountdownTimerAnimatableView {
  @_Concurrency.MainActor(unsafe) final public var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
extension BanubaVideoEditorSDK.CountdownView {
  @_Concurrency.MainActor(unsafe) final public var countdownDigit: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var digitColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) final public func stop()
}
public struct VideoAspectRatio {
  public static var minFillAspectRatio: CoreFoundation.CGFloat {
    get
  }
  public static var maxFillAspectRatio: CoreFoundation.CGFloat {
    get
  }
  public static var fillAspectRatioRange: Swift.ClosedRange<CoreFoundation.CGFloat> {
    get
  }
}
public struct VideoEditorDurationConfig {
  public var maximumVideoDuration: Foundation.TimeInterval
  public var videoDurations: [Foundation.TimeInterval]
  public var minimumDurationFromCamera: Foundation.TimeInterval
  public var minimumDurationFromGallery: Foundation.TimeInterval
  public var minimumVideoDuration: Foundation.TimeInterval
  public var minimumTrimmedPartDuration: Foundation.TimeInterval
  public var slideshowDuration: Foundation.TimeInterval
  public init(maximumVideoDuration: Foundation.TimeInterval, videoDurations: [Foundation.TimeInterval], minimumDurationFromCamera: Foundation.TimeInterval, minimumDurationFromGallery: Foundation.TimeInterval, minimumVideoDuration: Foundation.TimeInterval, minimumTrimmedPartDuration: Foundation.TimeInterval, slideshowDuration: Foundation.TimeInterval)
  public static var `default`: BanubaVideoEditorSDK.VideoEditorDurationConfig {
    get
  }
  public func validateTrimRecorderVideoSupporting(supportsTrimRecordedVideo: Swift.Bool)
}
public struct SharingServiceModel {
  public enum SharingType {
    case facebookReels
    case facebookStories
    case instagramStories
    case other
    public static func == (a: BanubaVideoEditorSDK.SharingServiceModel.SharingType, b: BanubaVideoEditorSDK.SharingServiceModel.SharingType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let sharingType: BanubaVideoEditorSDK.SharingServiceModel.SharingType
  public let sharingTitle: Swift.String
  public let sharingImage: UIKit.UIImage
  public init(sharingType: BanubaVideoEditorSDK.SharingServiceModel.SharingType, sharingTitle: Swift.String, sharingImage: UIKit.UIImage)
}
public protocol CountdownTimerViewFactory {
  func makeCountdownTimerView() -> any BanubaUtilities.CountdownTimerAnimatableView
}
public struct ColorPair : Swift.Equatable {
  public let background: UIKit.UIColor
  public let foreground: UIKit.UIColor
  public init(background: UIKit.UIColor, foreground: UIKit.UIColor)
  public static func == (lhs: BanubaVideoEditorSDK.ColorPair, rhs: BanubaVideoEditorSDK.ColorPair) -> Swift.Bool
}
public struct VideoTextColorPair : Swift.Equatable {
  public let foreground: BanubaVideoEditorSDK.ColorPair
  public let background: BanubaVideoEditorSDK.ColorPair
  public init(colors: (UIKit.UIColor, UIKit.UIColor, UIKit.UIColor, UIKit.UIColor))
  public init(foreground: BanubaVideoEditorSDK.ColorPair, background: BanubaVideoEditorSDK.ColorPair)
  public static func == (lhs: BanubaVideoEditorSDK.VideoTextColorPair, rhs: BanubaVideoEditorSDK.VideoTextColorPair) -> Swift.Bool
}
public struct VideoTextFont : Swift.Equatable {
  public var font: UIKit.UIFont?
  public var name: Swift.String
  public init(font: UIKit.UIFont?, name: Swift.String)
  public static func == (a: BanubaVideoEditorSDK.VideoTextFont, b: BanubaVideoEditorSDK.VideoTextFont) -> Swift.Bool
}
public protocol ExternalSDKAnalyticsEventsListener : AnyObject {
  func onVideoEditorSDKEvent(_ event: Swift.String)
}
public enum SDKEventScreen : Swift.String, Swift.Codable {
  case camera
  case editor
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDKEventName : Swift.String {
  case maskDownloaded
  case maskApplied
  case maskCancelled
  case exportVideo
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SDKEffectEvent : Swift.Codable {
  public let name: Swift.String
  public let data: BanubaVideoEditorSDK.SDKEventEffectData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKEventEffectData : Swift.Codable, Swift.Hashable {
  public let name: Swift.String
  public let screen: BanubaVideoEditorSDK.SDKEventScreen?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BanubaVideoEditorSDK.SDKEventEffectData, b: BanubaVideoEditorSDK.SDKEventEffectData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKExportEvent : Swift.Codable {
  public let name: Swift.String
  public let data: BanubaVideoEditorSDK.SDKExportEvent.SDKExportEventData
  public struct SDKExportEventData : Swift.Codable {
    public let masks: [Swift.String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CameraSessionMetadata : Swift.Codable {
  public let appliedEffects: [Swift.String : [Swift.String]]
  public init(appliedEffects: [Swift.String : [Swift.String]])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoEditorTrimMetadata : Swift.Codable {
  public var sequenceItemsMetadata: [BanubaVideoEditorSDK.VideoSequenceItemMetadata]
  public init(sequenceItemsMetadata: [BanubaVideoEditorSDK.VideoSequenceItemMetadata])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoSequenceItemMetadata : Swift.Codable {
  public var videoName: Swift.String
  public var order: Swift.Int
  public var imageData: Foundation.Data?
  public var trimTimeRange: BanubaVideoEditorSDK.TrimTimeRangeMetadata
  public let isGalleryAsset: Swift.Bool
  public let isSlideShow: Swift.Bool
  public let isPIP: Swift.Bool
  public var transition: BanubaVideoEditorSDK.TransitionEffectMetadata
  public var aspectRatio: BanubaUtilities.AspectRatio
  public var speed: Swift.Double
  public var cropFrame: CoreFoundation.CGRect?
  public var crop: VideoEditor.AssetCrop?
  public init(videoName: Swift.String, order: Swift.Int, imageData: Foundation.Data? = nil, trimTimeRange: BanubaVideoEditorSDK.TrimTimeRangeMetadata, isGalleryAsset: Swift.Bool, isSlideShow: Swift.Bool, isPIP: Swift.Bool = false, transition: BanubaVideoEditorSDK.TransitionEffectMetadata, aspectRatio: BanubaUtilities.AspectRatio, speed: Swift.Double, cropFrame: CoreFoundation.CGRect?, crop: VideoEditor.AssetCrop?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct TransitionEffectMetadata : Swift.Codable {
  public struct Defaults {
    public static let transitionDuration: Swift.Double
    public static let timescale: CoreMedia.CMTimeScale
  }
  public let type: BanubaUtilities.TransitionType
  public init(type: BanubaUtilities.TransitionType)
  public static func startTime(fromTime: CoreMedia.CMTime) -> CoreMedia.CMTime
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrimTimeRangeMetadata : Swift.Codable {
  public let start: BanubaVideoEditorSDK.TimeMetadata
  public let duration: BanubaVideoEditorSDK.TimeMetadata
  public func getCMTimeRange() -> CoreMedia.CMTimeRange
  public init(start: BanubaVideoEditorSDK.TimeMetadata, duration: BanubaVideoEditorSDK.TimeMetadata)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MusicEditorMetadata : Swift.Codable {
  public var tracks: [BanubaVideoEditorSDK.MusicEditorTrack]
  public var pipVolume: Swift.Float?
  public var videoVolume: Swift.Float
  public init(tracks: [BanubaVideoEditorSDK.MusicEditorTrack], pipVolume: Swift.Float?, videoVolume: Swift.Float)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MusicEditorTrack : Swift.Codable {
  public var url: Foundation.URL
  public var coverURL: Foundation.URL?
  public var originalURL: Foundation.URL
  public var title: Swift.String
  public var additionalTitle: Swift.String?
  public var id: Swift.Int32
  public let uuid: Foundation.UUID
  public var volume: Swift.Float
  public var position: Swift.Int
  public var timeScale: Foundation.TimeInterval
  public var compositionStart: Foundation.TimeInterval
  public var timeRangeStart: Foundation.TimeInterval
  public var timeRangeEnd: Foundation.TimeInterval
  public var isAudioRecord: Swift.Bool
  public var isEditable: Swift.Bool
  public var applyedFilterId: Swift.Int?
  public var isCameraTrack: Swift.Bool
  public init(url: Foundation.URL, coverURL: Foundation.URL?, originalURL: Foundation.URL, title: Swift.String, additionalTitle: Swift.String?, uuid: Foundation.UUID, id: Swift.Int32, volume: Swift.Float, position: Swift.Int, timeScale: Foundation.TimeInterval, compositionStart: Foundation.TimeInterval, timeRangeStart: Foundation.TimeInterval, timeRangeEnd: Foundation.TimeInterval, isAudioRecord: Swift.Bool, isEditable: Swift.Bool, applyedFilterId: Swift.Int? = nil, isCameraTrack: Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct VideoEditorMetadata : Swift.Codable {
  public var effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]?
  public var colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata?
  public var textOnVideoMetadata: [BanubaVideoEditorSDK.TextOnVideoMetadata]?
  public var gifOnVideoMetadata: [BanubaVideoEditorSDK.GIFOnVideoMetadata]?
  public var blurOnVideoMetadata: [BanubaVideoEditorSDK.BlurOnVideoMetadata]?
  public var filtersOnVideoMetadata: [BanubaVideoEditorSDK.FilterOnVideoMetadata]?
  public var analyticsMetadataJSON: Swift.String?
  public static var empty: BanubaVideoEditorSDK.VideoEditorMetadata {
    get
  }
  public func adjustBlurEffectMetadata() -> BanubaVideoEditorSDK.BlurList?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ColorOnVideoMetadata : Swift.Codable {
  public let title: Swift.String
  public init(title: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FilterOnVideoMetadata : Swift.Codable {
  public let title: Swift.String
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let linePositionOrderNumber: Swift.Int?
  public init(title: Swift.String, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, linePositionOrderNumber: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CaptionsMetadata : Swift.Codable {
  public let existingCaptionIds: [Swift.String]
  public let styleParams: BanubaVideoEditorSDK.TextParams
  public let styleTextColorDestinationId: Swift.Int
  public let languageCode: Swift.String?
  public let predefinedStyleId: Swift.Int?
  public init(existingCaptionIds: [Swift.String], styleParams: BanubaVideoEditorSDK.TextParams, styleTextColorDestinationId: Swift.Int, languageCode: Swift.String?, predefinedStyleId: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EffectOnVideoMetadata : Swift.Codable {
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let effectId: Swift.UInt
  public let tokenId: Swift.String
  public let linePositionOrderNumber: Swift.Int?
  public init(startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, effectId: Swift.UInt, tokenId: Swift.String, linePositionOrderNumber: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct TextOnVideoMetadata : Swift.Codable {
  public let id: Swift.String
  public let textParams: BanubaVideoEditorSDK.TextParams
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public let order: Swift.Int
  public let textColorDestinationId: Swift.Int
  public let linePosition: Swift.Int?
  public let predefinedStyleId: Swift.Int?
  public let position: Swift.Int?
  public init(id: Swift.String, textParams: BanubaVideoEditorSDK.TextParams, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams, order: Swift.Int, textColorDestinationId: Swift.Int, linePosition: Swift.Int?, predefinedStyleId: Swift.Int?, position: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum VideoSequenceEditingStep : Swift.Int, Swift.Codable {
  case camera
  case trimmer
  case editor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VideoMetadata : Swift.Codable {
  public var name: Swift.String
  public var isDrafted: Swift.Bool
  public var aspect: BanubaUtilities.AspectRatio
  public var modificationDate: Foundation.Date
  public var maxVideoDuration: Foundation.TimeInterval?
  public let isSlideShow: Swift.Bool
  public var parentSequenceId: Swift.String?
  public var musicTrack: BanubaUtilities.MediaTrack?
  public var editingStep: BanubaVideoEditorSDK.VideoSequenceEditingStep
  public init(isSlideShow: Swift.Bool = false, isDrafted: Swift.Bool = false, name: Swift.String, maxVideoDuration: Foundation.TimeInterval?, sequenceParentName: Swift.String? = nil, editingStep: BanubaVideoEditorSDK.VideoSequenceEditingStep = .camera, musicTrack: BanubaUtilities.MediaTrack? = nil, aspect: BanubaUtilities.AspectRatio, modificationDate: Foundation.Date = Date())
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct BlurOnVideoMetadata : Swift.Codable {
  public let id: Swift.String
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let blurCoordinateParams: BanubaUtilities.BlurCoordinateParams
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public let blurFigure: BanubaUtilities.DrawableFigure
  public let titleIndex: Swift.Int
  public let order: Swift.Int
  public let linePositionOrderNumber: Swift.Int?
  public init(id: Swift.String, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, blurCoordinateParams: BanubaUtilities.BlurCoordinateParams, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams, blurFigure: BanubaUtilities.DrawableFigure, titleIndex: Swift.Int, order: Swift.Int, linePositionOrderNumber: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GIFOnVideoMetadata : Swift.Codable {
  public let id: Swift.String
  public let imageDataName: Swift.String
  public let imageData: Foundation.Data?
  public let startTime: BanubaVideoEditorSDK.TimeMetadata
  public let endTime: BanubaVideoEditorSDK.TimeMetadata
  public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public let order: Swift.Int
  public let linePositionOrderNumber: Swift.Int?
  public init(id: Swift.String, imageDataName: Swift.String, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams, order: Swift.Int, linePositionOrderNumber: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CoordinatesParams : Swift.Codable {
  public let transform: CoreFoundation.CGAffineTransform
  public let frame: CoreFoundation.CGRect
  public init(transform: CoreFoundation.CGAffineTransform, frame: CoreFoundation.CGRect)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ColorParams : Swift.Codable {
  public let red: CoreFoundation.CGFloat?
  public let green: CoreFoundation.CGFloat?
  public let blue: CoreFoundation.CGFloat?
  public let alpha: CoreFoundation.CGFloat?
  public init(red: CoreFoundation.CGFloat?, green: CoreFoundation.CGFloat?, blue: CoreFoundation.CGFloat?, alpha: CoreFoundation.CGFloat?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TextParams : Swift.Codable {
  public init(text: Swift.String?, link: Swift.String?, textFont: Swift.String?, fontName: Swift.String?, fontSize: CoreFoundation.CGFloat?, textAlignment: Swift.Int?, textColor: BanubaVideoEditorSDK.ColorParams?, backgroundColor: BanubaVideoEditorSDK.ColorParams?)
  public let text: Swift.String?
  public let link: Swift.String?
  public let textFont: Swift.String?
  public let fontName: Swift.String?
  public let fontSize: CoreFoundation.CGFloat?
  public let textAlignment: Swift.Int?
  public let textColor: BanubaVideoEditorSDK.ColorParams?
  public let backgroundColor: BanubaVideoEditorSDK.ColorParams?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoCoverMetadata : Swift.Codable {
  public var image: UIKit.UIImage? {
    get
  }
  public let imageData: Foundation.Data?
  public let coverIndent: BanubaVideoEditorSDK.TimeMetadata
  public init(imageData: Foundation.Data?, coverIndent: BanubaVideoEditorSDK.TimeMetadata)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TimeMetadata : Swift.Codable {
  public let seconds: Swift.Double
  public let timescale: CoreMedia.CMTimeScale
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BanubaVideoEditorSDK.TimeMetadata {
  public init(cmTime: CoreMedia.CMTime)
  public func getCMTime() -> CoreMedia.CMTime
}
public struct BlurList : Swift.Codable {
  public let blurMask: [BanubaVideoEditorSDK.BlurMask]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BlurMask : Swift.Codable {
  public let id: Swift.String
  public let type: Swift.String
  public let startTime: Swift.Int, endTime: Swift.Int
  public let params: BanubaVideoEditorSDK.Params
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Params : Swift.Codable {
  public let x: Swift.Float
  public let y: Swift.Float
  public let radius: Swift.Float
  public let width: Swift.Float
  public let height: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BanubaVideoEditorSDK.EffectOnVideoMetadata {
  public init(from editorCompositionEffect: any VideoEditor.EditorCompositionEditableEffectProtocol, linePosition: Swift.Int?)
}
public protocol ProgressViewControllerFactory {
  func makeProgressViewController() -> any BanubaVideoEditorSDK.BanubaProgressViewController
}
public enum CaptionsLanguage : Swift.String, Swift.CaseIterable {
  case english
  case mandarin
  case portuguese
  case spanish
  case arabic
  case arabicGulf
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BanubaVideoEditorSDK.CaptionsLanguage]
  public typealias RawValue = Swift.String
  public static var allCases: [BanubaVideoEditorSDK.CaptionsLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol BanubaProgressViewController : UIKit.UIViewController {
  var message: Swift.String { get set }
  var tooltipMessage: Swift.String { get set }
  var configuration: BanubaVideoEditorSDK.ProgressViewConfiguration? { get set }
  var cancelHandler: (() -> Swift.Void)? { get set }
  func updateProgressView(with progress: Swift.Float)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ProgressViewController : UIKit.UIViewController, BanubaVideoEditorSDK.BanubaProgressViewController {
  @_Concurrency.MainActor(unsafe) public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tooltipMessage: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var configuration: BanubaVideoEditorSDK.ProgressViewConfiguration? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cancelHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var slideInTransitioningDelegate: (any UIKit.UIViewControllerTransitioningDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BanubaVideoEditorSDK.ProgressViewController {
  @_Concurrency.MainActor(unsafe) public func updateProgressView(with progress: Swift.Float)
}
extension BanubaVideoEditorSDK.ProgressViewController {
  @_Concurrency.MainActor(unsafe) public static func makeViewController(presentationManager: BanubaUtilities.SlideInPresentationManager? = nil) -> BanubaVideoEditorSDK.ProgressViewController
}
public struct OverlayEditorConfiguration {
  public var mainOverlayViewControllerConfig: BanubaVideoEditorSDK.MainOverlayViewControllerConfig
}
public struct MainOverlayViewControllerConfig {
  public var addButtons: [BanubaVideoEditorSDK.OverlayAddButtonConfig]
  public var editButtonsHeight: CoreFoundation.CGFloat
  public var editButtonsInteritemSpacing: CoreFoundation.CGFloat
  public var editCompositionButtons: [BanubaVideoEditorSDK.OverlayEditButtonConfig]
  public var controlButtons: [BanubaVideoEditorSDK.OverlayControlButtonConfig]
  public var playerControlsHeight: CoreFoundation.CGFloat
  public var mainLabelColors: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var additionalLabelFonts: UIKit.UIFont
  public var cursorColor: UIKit.UIColor
  public var overlayItemConfiguration: BanubaVideoEditorSDK.OverlayItemConfiguration
  public var resizeImageName: Swift.String
  public var draggersHorizontalInset: CoreFoundation.CGFloat
  public var draggersWidth: CoreFoundation.CGFloat?
  public var draggersHeight: CoreFoundation.CGFloat?
  public var draggersImageHeight: CoreFoundation.CGFloat?
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var playerControlsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var defaultLinesCount: Swift.Int
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public var draggerBackgroundColor: UIKit.UIColor
  public var draggerCornerRadius: CoreFoundation.CGFloat?
  public var timeLabelsOffset: CoreFoundation.CGFloat
  public var itemsTopOffset: CoreFoundation.CGFloat
  public var previewViewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
}
public struct OverlayAddButtonConfig {
  public enum `Type` : Swift.String {
    case text
    case sticker
    case blur
    case captions
    public var editorEffectType: VideoEditor.EditorEffectType {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.OverlayAddButtonConfig.`Type`
  public let title: Swift.String
  public var titleColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public var imageName: Swift.String
  public var drawableFigure: BanubaUtilities.DrawableFigure?
  public var tintColor: UIKit.UIColor?
  public init(type: BanubaVideoEditorSDK.OverlayAddButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, font: UIKit.UIFont, imageName: Swift.String, drawableFigure: BanubaUtilities.DrawableFigure? = nil, tintColor: UIKit.UIColor? = nil)
}
public struct OverlayEditButtonConfig {
  public enum `Type` : Swift.String {
    case edit
    case style
    case delete
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.OverlayEditButtonConfig.`Type`
  public let title: Swift.String
  public var titleColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public let imageName: Swift.String
  public let selectedImageName: Swift.String?
  public var tintColor: UIKit.UIColor?
  public init(type: BanubaVideoEditorSDK.OverlayEditButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, font: UIKit.UIFont, imageName: Swift.String, selectedImageName: Swift.String?, tintColor: UIKit.UIColor? = nil)
}
public struct OverlayControlButtonConfig {
  public enum `Type` : Swift.String {
    case reset
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.OverlayControlButtonConfig.`Type`
  public var image: UIKit.UIImage?
  public var selectedImage: UIKit.UIImage?
  public let imageName: Swift.String?
  public let selectedImageName: Swift.String?
  public let imageEdgeInsets: UIKit.UIEdgeInsets?
  public var style: BanubaUtilities.TextConfiguration?
  public var tintColor: UIKit.UIColor?
  public init(type: BanubaVideoEditorSDK.OverlayControlButtonConfig.`Type`, imageName: Swift.String? = nil, selectedImageName: Swift.String? = nil, imageEdgeInsets: UIKit.UIEdgeInsets? = nil, style: BanubaUtilities.TextConfiguration? = nil, tintColor: UIKit.UIColor? = nil)
}
public struct OverlayItemConfiguration {
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var borderInset: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont?
  public var titleColor: UIKit.UIColor?
  public var imageInset: UIKit.UIEdgeInsets
  public init(borderColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, borderInset: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, titleFont: UIKit.UIFont? = nil, titleColor: UIKit.UIColor? = nil, imageInset: UIKit.UIEdgeInsets)
}
public enum BanubaVideoEditorSwiftUIError : Swift.Error, Foundation.LocalizedError {
  case initError
  case licenseError
  case exportError(description: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct BanubaVideoEditorSwiftUIView : SwiftUI.UIViewControllerRepresentable {
  public init(token: Swift.String, launchConfig: BanubaVideoEditorSDK.VideoEditorLaunchConfig, configuration: BanubaVideoEditorSDK.VideoEditorConfig, exportConfiguration: VEExportSDK.ExportConfiguration)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView.Context)
  public func onDidCancel(_ closure: (() -> Swift.Void)?) -> BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView
  public func onDidSave(_ closure: (([Foundation.URL]) -> Swift.Void)?) -> BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView
  public func onUpdateProgress(_ closure: ((Swift.Float) -> Swift.Void)?) -> BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView
  public func onDidFail(_ closure: ((BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIError) -> Swift.Void)?) -> BanubaVideoEditorSDK.BanubaVideoEditorSwiftUIView
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
public enum DraftActionType {
  case save
  case update
  case cancel
  case none
  public var isSaveOrUpdate: Swift.Bool {
    get
  }
  public static func == (a: BanubaVideoEditorSDK.DraftActionType, b: BanubaVideoEditorSDK.DraftActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VideoEditorColorsPalette {
  public let primaryColor: UIKit.UIColor
  public let secondaryColor: UIKit.UIColor
  public let accentColor: UIKit.UIColor
  public let effectButtonColorsPalette: BanubaVideoEditorSDK.EffectButtonColorsPalette
  public let addGalleryItemBackgroundColor: UIKit.UIColor
  public let addGalleryItemIconColor: UIKit.UIColor
  public let timelineEffectColorsPalette: BanubaVideoEditorSDK.TimelineEffectColorsPalette
  public init(primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, accentColor: UIKit.UIColor, effectButtonColorsPalette: BanubaVideoEditorSDK.EffectButtonColorsPalette, addGalleryItemBackgroundColor: UIKit.UIColor, addGalleryItemIconColor: UIKit.UIColor, timelineEffectColorsPalette: BanubaVideoEditorSDK.TimelineEffectColorsPalette)
}
public struct EffectButtonColorsPalette {
  public let defaultIconColor: UIKit.UIColor
  public let defaultBackgroundColor: UIKit.UIColor
  public let selectedIconColor: UIKit.UIColor
  public let selectedBackgroundColor: UIKit.UIColor
  public init(defaultIconColor: UIKit.UIColor, defaultBackgroundColor: UIKit.UIColor, selectedIconColor: UIKit.UIColor, selectedBackgroundColor: UIKit.UIColor)
}
public struct TimelineEffectColorsPalette {
  public let stickersColor: UIKit.UIColor
  public let textsColor: UIKit.UIColor
  public let captionsColor: UIKit.UIColor
  public let pixelationColor: UIKit.UIColor
  public let audioTracksColor: UIKit.UIColor
  public let voiceOversColor: UIKit.UIColor
  public init(stickersColor: UIKit.UIColor, textsColor: UIKit.UIColor, captionsColor: UIKit.UIColor, pixelationColor: UIKit.UIColor, audioTracksColor: UIKit.UIColor, voiceOversColor: UIKit.UIColor)
  public static var `default`: BanubaVideoEditorSDK.TimelineEffectColorsPalette {
    get
  }
}
public struct The3DObjectPickerItemConfiguration {
  public var downloadIconConfiguration: any BanubaUtilities.ImageConfigurationProtocol
  public var progressColor: UIKit.UIColor
  public var progressWidth: CoreFoundation.CGFloat
}
public struct VideoEditorConfig {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration
  public var videoEditorViewConfiguration: BanubaVideoEditorSDK.VideoEditorViewConfiguration
  public var editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration
  public var textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration
  public var toastConfiguration: BanubaUtilities.ToastConfiguration
  public var fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration
  public var smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var albumsConfiguration: BanubaUtilities.AlbumsConfiguration
  public var videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration
  public var videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig
  public var gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration
  public var combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration
  public var trimVideosConfiguration: BanubaVideoEditorSDK.TrimVideosConfiguration
  public var trimVideoConfiguration: BanubaVideoEditorSDK.TrimVideoConfiguration
  public var filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration
  public var extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  public var coverSelectionConfiguration: BanubaVideoEditorSDK.CoverSelectionConfiguration
  public var musicEditorConfiguration: BanubaVideoEditorSDK.MusicEditorConfig
  public var overlayEditorConfiguration: BanubaVideoEditorSDK.OverlayEditorConfiguration
  public var watermarkConfiguration: VideoEditor.WatermarkConfiguration?
  public var alertViewConfiguration: BanubaUtilities.AlertViewConfiguration
  public var popoverAlertViewConfiguration: BanubaUtilities.PopoverAlertViewConfiguration
  public var handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?
  public var pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?
  public var sharingScreenConfiguration: BanubaVideoEditorSDK.SharingScreenConfiguration
  public var featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration
  public var isHandfreeEnabled: Swift.Bool
  public var draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration
  public var aspectsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration
  public var transitionsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration
  public var progressViewConfiguration: BanubaVideoEditorSDK.ProgressViewConfiguration
  public var captionsConfiguration: BanubaVideoEditorSDK.CaptionsConfiguration
  public var autoCutConfiguration: BanubaVideoEditorSDK.AutoCutConfiguration
  public var beautyIntensityConfiguration: BanubaVideoEditorSDK.BeautyIntensityConfiguration
  public var videoPreviewConfiguration: BanubaVideoEditorSDK.VideoPreviewConfiguration
  public var greenScreenBackgroundPickerConfiguration: BanubaVideoEditorSDK.GreenScreenBackgroundPickerConfiguration
  public var the3DObjectsPickerConfiguration: BanubaVideoEditorSDK.The3DObjectsConfiguration
  public init()
  public init(videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration, recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration, editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration, textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration, toastConfiguration: BanubaUtilities.ToastConfiguration, fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration, smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration, albumsConfiguration: BanubaUtilities.AlbumsConfiguration, videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration, videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig, gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration, combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration, trimVideosConfiguration: BanubaVideoEditorSDK.TrimVideosConfiguration, trimVideoConfiguration: BanubaVideoEditorSDK.TrimVideoConfiguration, filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration, extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration, musicEditorConfiguration: BanubaVideoEditorSDK.MusicEditorConfig, overlayEditorConfiguration: BanubaVideoEditorSDK.OverlayEditorConfiguration, featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration, watermarkConfiguration: VideoEditor.WatermarkConfiguration?, alertViewConfiguration: BanubaUtilities.AlertViewConfiguration, popoverAlertViewConfiguration: BanubaUtilities.PopoverAlertViewConfiguration, handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?, pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?, sharingScreenConfiguration: BanubaVideoEditorSDK.SharingScreenConfiguration, draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration, aspectsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration, transitionsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration, progressViewConfiguration: BanubaVideoEditorSDK.ProgressViewConfiguration, captionsConfiguration: BanubaVideoEditorSDK.CaptionsConfiguration, autoCutConfiguration: BanubaVideoEditorSDK.AutoCutConfiguration, beautyIntensityConfiguration: BanubaVideoEditorSDK.BeautyIntensityConfiguration, videoPreviewConfiguration: BanubaVideoEditorSDK.VideoPreviewConfiguration, greenScreenBackgroundPickerConfiguration: BanubaVideoEditorSDK.GreenScreenBackgroundPickerConfiguration, the3DObjectsPickerConfiguration: BanubaVideoEditorSDK.The3DObjectsConfiguration)
  public mutating func setupColorsPalette(_ colorsPalette: BanubaVideoEditorSDK.VideoEditorColorsPalette)
  public mutating func applyFont(_ font: UIKit.UIFont)
  public mutating func updateAlertFonts(_ font: UIKit.UIFont)
  public mutating func updateProgressViewFonts(_ font: UIKit.UIFont)
  public mutating func updateRecorderFonts(_ font: UIKit.UIFont)
  public mutating func updateEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateToastFonts(_ font: UIKit.UIFont)
  public mutating func updateFullScreenActivityFonts(_ font: UIKit.UIFont)
  public mutating func updateAlbumsFonts(_ font: UIKit.UIFont)
  public mutating func updateTextEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateSlideShowFonts(_ font: UIKit.UIFont)
  public mutating func updateTrimVideosFonts(_ font: UIKit.UIFont)
  public mutating func updateTrimVideoFonts(_ font: UIKit.UIFont)
  public mutating func updateFilterFonts(_ font: UIKit.UIFont)
  public mutating func updateExtendedVideoCoverSelectionFonts(_ font: UIKit.UIFont)
  public mutating func updateFeatureConfiguration(featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration)
}
public struct TextEditorConfiguration {
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var fontButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var colorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var textBackgroundButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var alignmentImages: [BanubaVideoEditorSDK.VideoTextAlignment : BanubaVideoEditorSDK.ImageButtonConfiguration]
  public var palette: [BanubaVideoEditorSDK.VideoTextColorPair]
  public var fonts: [BanubaVideoEditorSDK.VideoTextFont]
  public var additionalPaletteBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var palleteInsets: UIKit.UIEdgeInsets
  public var fontInsets: UIKit.UIEdgeInsets
  public var selectionColorBehavior: any BanubaVideoEditorSDK.TextEditSelectionColorBehavior
  public var colorItemConfiguration: BanubaVideoEditorSDK.TextEditColorItemConfiguration
  public var fontItemConfiguration: BanubaVideoEditorSDK.TextEditFontItemConfiguration
  public var cursorColor: UIKit.UIColor
  public var isTextBackgroundColorAppliedByDefault: Swift.Bool
}
public struct TextEditColorItemConfiguration {
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public init(borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
}
public struct TextEditFontItemConfiguration {
  public var titleColor: UIKit.UIColor
  public let fontSize: CoreFoundation.CGFloat
  public let cornerRadius: CoreFoundation.CGFloat
  public let backgroundColor: UIKit.UIColor
  public let borderSelectionColor: UIKit.UIColor
  public let borderSelectionWidth: CoreFoundation.CGFloat
  public init(titleColor: UIKit.UIColor, fontSize: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, borderSelectionColor: UIKit.UIColor = .clear, borderSelectionWidth: CoreFoundation.CGFloat = .zero)
}
public struct VideoOverlayConfiguration {
  public var deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var videoOverlayItemViewBlurConfiguration: BanubaVideoEditorSDK.VideoOverlayItemViewConfiguration?
  public init(deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, videoOverlayItemViewBlurConfiguration: BanubaVideoEditorSDK.VideoOverlayItemViewConfiguration)
}
public struct FullScreenActivityConfiguration {
  public var labelFont: UIKit.UIFont
  public var cornerRadius: CoreFoundation.CGFloat
  public var activityEffectsViewAlpha: CoreFoundation.CGFloat
  public var activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration
  public init(labelFont: UIKit.UIFont, cornerRadius: CoreFoundation.CGFloat, activityEffectsViewAlpha: CoreFoundation.CGFloat, activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration)
}
public struct RecorderConfiguration {
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaUtilities.SaveButtonConfiguration?
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var removeButtonImageName: Swift.String
  public var removeMusicButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var progressLabelConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewWidth: CoreFoundation.CGFloat?
  public var captureButtonModes: [BanubaVideoEditorSDK.CaptureButtonViewMode]
  public var recordButtonConfiguration: BanubaVideoEditorSDK.RecordButtonConfiguration
  public var recordButtonProvider: (any BanubaVideoEditorSDK.RecordButtonProvider)?
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var speedBarButtons: BanubaVideoEditorSDK.SpeedBarButtonsConfiguration
  public var galleryButton: BanubaUtilities.RoundedButtonConfiguration
  public var emptyGalleryImageName: Swift.String
  public var timerConfiguration: BanubaVideoEditorSDK.TimerConfiguration
  public var timeLineConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  public var regularRecordButtonPosition: CoreFoundation.CGFloat
  public var recorderEffectsConfiguration: BanubaVideoEditorSDK.RecorderEffectsConfiguration
  public var leftControlsBottomOffsetFromCaptureButton: CoreFoundation.CGFloat
  public var leftControlsLeftOffset: CoreFoundation.CGFloat
  public var sequenceHeight: CoreFoundation.CGFloat
  public var loopAudioWhileRecording: Swift.Bool
  public var takeAudioDurationAsMaximum: Swift.Bool
  public var isDynamicMusicTitle: Swift.Bool
  public var isDefaultFrontCamera: Swift.Bool
  public var isMusicTitleFloatingLineEnabled: Swift.Bool
  public var useHEVCCodecIfPossible: Swift.Bool
  public var isPhotoSequenceAnimationEnabled: Swift.Bool
  public var muteMicrophoneForPIP: Swift.Bool
  public var isAudioRateEqualsVideoSpeed: Swift.Bool
  public var isGalleryButtonHidden: Swift.Bool
  public var supportMultiRecords: Swift.Bool
  public var videoCaptureButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var photoCaptureButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var backgroundMusicContainerConfiguration: BanubaUtilities.BackgroundConfiguration?
  public var floatingViewSeparatedLines: Swift.Bool
  public var effectSelectorContainerCornerRadius: CoreFoundation.CGFloat
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public var videoDurationButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var isVideoDurationButtonHidden: Swift.Bool
  public var previewScalingMode: BanubaVideoEditorSDK.RecorderPreviewScalingMode
  public var supportsAudioForPhoto: Swift.Bool
}
public struct RecordButtonConfiguration {
  public var strokeColor: CoreGraphics.CGColor
  public var gradientColors: [CoreGraphics.CGColor]
  public var circularTimeLineIdleWidth: CoreFoundation.CGFloat
  public var circularTimeLineCapturingWidth: CoreFoundation.CGFloat
  public var width: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var defaultVideoRecordButtonColor: UIKit.UIColor
  public var defaultTakePhotoButtonColor: UIKit.UIColor
  public var videoRecordButtonColor: UIKit.UIColor
  public var takePhotoButtonColor: UIKit.UIColor
  public var externalCircleFullColor: CoreGraphics.CGColor
  public var externalCircleStrokeColor: CoreGraphics.CGColor
}
public enum RecorderPreviewScalingMode {
  case aspectFill
  case aspectFit
  public static func == (a: BanubaVideoEditorSDK.RecorderPreviewScalingMode, b: BanubaVideoEditorSDK.RecorderPreviewScalingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PIPSettingsConfiguration {
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var dragIndicatorConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var titleConfiguration: BanubaUtilities.TextConfiguration
  public var layoutSettingsButtonsConfiguration: [BanubaVideoEditorSDK.PIPSelectableCellConfiguration]
}
public struct TrimVideoConfiguration {
  public var saveButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  public var trimTimeLineHeight: CoreFoundation.CGFloat
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var controlsPanelBackgroundColor: UIKit.UIColor
  public var trimmerPanelBackgroundColor: UIKit.UIColor
  public var timeLabelsConfiguration: BanubaUtilities.TextConfiguration
}
public struct TimeLineConfiguration {
  public var isTimeLineHidden: Swift.Bool
  public var timeLineBackgroundColor: UIKit.UIColor
  public var progressBarColor: UIKit.UIColor
  public var progressBarSelectColor: UIKit.UIColor
  public var itemsCornerRadius: CoreFoundation.CGFloat
  public var separatorWidth: CoreFoundation.CGFloat
  public var separatorColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
}
public struct TransitionActionConfiguration {
  public let imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public let height: CoreFoundation.CGFloat
  public let clickableWidth: CoreFoundation.CGFloat
  public let backgroundColor: UIKit.UIColor
  public let highlightedBackgroundColor: UIKit.UIColor
  public let cornerRadius: CoreFoundation.CGFloat
  public let shadowColor: UIKit.UIColor
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, height: CoreFoundation.CGFloat, clickableWidth: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, highlightedBackgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, shadowColor: UIKit.UIColor)
}
@objc public class TrimTimeLineConfiguration : ObjectiveC.NSObject {
  public var controlsColor: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var trimContentCornerRadius: CoreFoundation.CGFloat
  public var timelineTopBottomInset: CoreFoundation.CGFloat
  public var draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration
  public var transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]?
  public init(controlsColor: UIKit.UIColor, cursorColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat, trimContentCornerRadius: CoreFoundation.CGFloat, timelineTopBottomInset: CoreFoundation.CGFloat, draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration, transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]? = nil)
  @objc deinit
}
@objc public class CompositionTimelineConfiguration : ObjectiveC.NSObject {
  public var controlsColor: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var contentCornerRadius: CoreFoundation.CGFloat
  public var timelineTopBottomInset: CoreFoundation.CGFloat
  public var draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration
  public var transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]?
  public init(controlsColor: UIKit.UIColor, cursorColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat, contentCornerRadius: CoreFoundation.CGFloat, timelineTopBottomInset: CoreFoundation.CGFloat, draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration, transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]? = nil)
  @objc deinit
}
public struct DraggerConfiguration {
  public var backgroundConfiguraiton: BanubaUtilities.BackgroundConfiguration
  public var numberOfLinesInDraggers: Swift.Int
  public var draggerLineSize: CoreFoundation.CGSize
  public var draggerLineBackgroundConfiguraion: BanubaUtilities.BackgroundConfiguration
  public var draggerImageName: Swift.String?
  public var draggerSize: CoreFoundation.CGSize
  public init(backgroundConfiguraiton: BanubaUtilities.BackgroundConfiguration, draggerImageName: Swift.String?, draggerSize: CoreFoundation.CGSize, numberOfLinesInDraggers: Swift.Int, draggerLineSize: CoreFoundation.CGSize, draggerLineBackgroundConfiguraion: BanubaUtilities.BackgroundConfiguration)
}
public struct EditorConfiguration {
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var additionalEffectsButtonsBottomOffset: CoreFoundation.CGFloat
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var editDraftBackButton: BanubaUtilities.BackButtonConfiguration
  public var openTrimButton: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration
  public var musicPanelConfiguration: BanubaVideoEditorSDK.MusicPanelConfiguration
  public enum AddToDraftsFlow {
    case alert
    case button(_: BanubaUtilities.RoundedButtonConfiguration)
  }
  public var addToDraftsFlow: BanubaVideoEditorSDK.EditorConfiguration.AddToDraftsFlow
  public var isVideoAspectFillEnabled: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public var audioPartSelectionViewConfiguration: BanubaUtilities.AudioPartSelectionViewConfiguration
}
public class VideoEditorViewConfiguration {
  public var backButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var nextButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var previewButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundColor: UIKit.UIColor
  public var effectsBackgroundColor: UIKit.UIColor
  public var timelineConfiguration: BanubaVideoEditorSDK.CompositionTimelineConfiguration
  public var timeLabelsConfiguration: BanubaUtilities.TextConfiguration
  public var toolsPanelConfiguration: BanubaVideoEditorSDK.VideoEditorToolsPanel.Configuration
  public var effectsManagementPanelConfiguration: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.Configuration
  public var toolsBackgroundPanelConfiguration: BanubaUtilities.BackgroundConfiguration
  public var primaryAspectRatio: BanubaUtilities.AspectRatio
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public var preferredVideoEffectOrderAndSet: [VEEffectsSDK.VisualEffectApplicatorType]
  public var addGalleryVideoButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var addGalleryVideoImageButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var appearingViewNavBarConfiguration: BanubaVideoEditorSDK.AppearingViewNavigationViewConfiguration
  public var transitions: [BanubaVideoEditorSDK.TransitionEffect]
  public init(backButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, nextButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration, previewButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, backgroundColor: UIKit.UIColor, effectsBackgroundColor: UIKit.UIColor, timelineConfiguration: BanubaVideoEditorSDK.CompositionTimelineConfiguration, timeLabelsConfiguration: BanubaUtilities.TextConfiguration, toolsPanelConfiguration: BanubaVideoEditorSDK.VideoEditorToolsPanel.Configuration, effectsManagementPanelConfiguration: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.Configuration, toolsBackgroundPanelConfiguration: BanubaUtilities.BackgroundConfiguration, primaryAspectRatio: BanubaUtilities.AspectRatio, preferredLutsOrder: [Swift.String], preferredMasksOrder: [Swift.String], preferredVideoEffectOrderAndSet: [VEEffectsSDK.VisualEffectApplicatorType], addGalleryVideoButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration, addGalleryVideoImageButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, appearingViewNavBarConfiguration: BanubaVideoEditorSDK.AppearingViewNavigationViewConfiguration, transitions: [BanubaVideoEditorSDK.TransitionEffect])
  @objc deinit
}
public struct SharingScreenConfiguration {
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var videoImageViewCornerRadius: CoreFoundation.CGFloat
  public var sharingVideoTextConfiguration: BanubaUtilities.TextConfiguration
  public var closeButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var sharingModels: [BanubaVideoEditorSDK.SharingServiceModel]
  public var sharingCellConfiguration: BanubaVideoEditorSDK.SharingCellConfiguration
  public var facebookId: Swift.String
  public init(sharingModels: [BanubaVideoEditorSDK.SharingServiceModel], videoImageViewCornerRadius: CoreFoundation.CGFloat, sharingVideoTextConfiguration: BanubaUtilities.TextConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, sharingCellConfiguration: BanubaVideoEditorSDK.SharingCellConfiguration, closeButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration, facebookId: Swift.String)
}
public struct SharingCellConfiguration {
  public let titleTextConfiguration: BanubaUtilities.TextConfiguration
  public init(titleTextConfiguration: BanubaUtilities.TextConfiguration)
}
public struct GifPickerConfiguration {
  public var dragIndicatorColor: UIKit.UIColor
  public var regularFont: UIKit.UIFont
  public var boldFont: UIKit.UIFont
  public var activityConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var cursorColor: UIKit.UIColor
  public var searchBarTextColor: UIKit.UIColor
  public var gifResolution: BanubaVideoEditorSDK.GiphyResolution
  public var giphyAPIKey: Swift.String?
  public var preferredRating: Swift.String?
  public var tryAgainButtonColor: UIKit.UIColor
  public var mode: BanubaVideoEditorSDK.GifPickerMode
}
public enum GifPickerMode : Swift.Equatable {
  case search
  case list([Swift.String])
  public static func == (a: BanubaVideoEditorSDK.GifPickerMode, b: BanubaVideoEditorSDK.GifPickerMode) -> Swift.Bool
}
public struct TrimVideosConfiguration {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var backButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var nextButtonConfiguration: BanubaVideoEditorSDK.ImageTextButtonConfiguration
  public var controlsPanelBackgroundColor: UIKit.UIColor
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var videoPartsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var aspectsButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
  public var timeLabelsConfiguration: BanubaUtilities.TextConfiguration
  public var editVideoItemTitleConfiguration: BanubaUtilities.TextConfiguration
  public var editVideoItems: [BanubaVideoEditorSDK.TrimVideoCompositionEditItem]
  public var addGalleryVideoButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var addGalleryVideoImageButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var videoPartConfiguration: BanubaVideoEditorSDK.TrimVideoPartConfiguration
  public var reorderingVideoToolTipLabelConfiguration: BanubaUtilities.TextConfiguration
  public var trimTimelineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  public var isGalleryButtonHidden: Swift.Bool
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
}
public struct TrimVideoPartConfiguration {
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var timeLabelConfiguration: BanubaUtilities.TextConfiguration
  public init(borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, timeLabelConfiguration: BanubaUtilities.TextConfiguration)
}
public struct TrimVideoCompositionEditItem {
  public enum TrimVideoCompositionEditItemType : Swift.CaseIterable {
    case rotate
    case split
    case delete
    case trim
    case volume
    public static func == (a: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType, b: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType]
    public static var allCases: [BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let title: Swift.String
  public let icon: BanubaVideoEditorSDK.ImageConfiguration
  public let type: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType
  public init(title: Swift.String, icon: BanubaVideoEditorSDK.ImageConfiguration, type: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType)
}
public struct FilterConfiguration {
  public var controlButtons: [BanubaVideoEditorSDK.FilterControlButtonConfig]
  public var controlsPanelBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var resetButton: BanubaUtilities.RoundedButtonConfiguration
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var cursorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var doneButtonHeight: CoreFoundation.CGFloat?
  public var timelineHeight: CoreFoundation.CGFloat
  public var timelineLeftOffset: CoreFoundation.CGFloat
  public var timelineRightOffset: CoreFoundation.CGFloat
  public var filtersHeight: CoreFoundation.CGFloat
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public var preferredVideoEffectOrderAndSet: [VEEffectsSDK.VisualEffectApplicatorType]
  public var colorEffectsURL: Foundation.URL
}
public typealias TimerOptionBarConfiguration = BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
public struct HandsfreeConfiguration {
  public struct TimerOptionBarConfiguration {
    public var selectorColor: UIKit.UIColor
    public var selectorTextColor: UIKit.UIColor
    public var selectorTextFont: UIKit.UIFont
    public var selectorBorderWidth: CoreFoundation.CGFloat
    public var selectorBorderColor: CoreGraphics.CGColor
    public var optionBackgroundColor: UIKit.UIColor
    public var optionCornerRadius: CoreFoundation.CGFloat
    public var optionTextColor: UIKit.UIColor
    public var optionTextFont: UIKit.UIFont
    public var backgroundColor: UIKit.UIColor
    public var backgroundViewColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var sliderCornerRadius: CoreFoundation.CGFloat
    public var barCornerRadius: CoreFoundation.CGFloat
    public var selectorEdgeInsets: UIKit.UIEdgeInsets
    public var activeThumbAndLineColor: UIKit.UIColor
    public var inactiveThumbAndLineColor: UIKit.UIColor
    public var minVideoDuration: Swift.Double
    public var buttonCornerRadius: CoreFoundation.CGFloat
    public var buttonBackgroundColor: UIKit.UIColor
    public var modeTitleColor: UIKit.UIColor
    public var dragTitleColor: UIKit.UIColor
    public var dragTitleFont: UIKit.UIFont
    public var buttonTitleColor: UIKit.UIColor
    public var buttonTitleFont: UIKit.UIFont
    public var currentValueTextColor: UIKit.UIColor
    public var minimumValueTextColor: UIKit.UIColor
    public var maximumValueTextColor: UIKit.UIColor
    public var currentValueTextFont: UIKit.UIFont
    public var minimumValueTextFont: UIKit.UIFont
    public var maximumValueTextFont: UIKit.UIFont
    public var thumbLineViewColor: UIKit.UIColor
    public var thumbLineViewBackgroundColor: UIKit.UIColor
    public var cursorViewColor: UIKit.UIColor
    public init(selectorColor: UIKit.UIColor, selectorTextColor: UIKit.UIColor, selectorTextFont: UIKit.UIFont, selectorBorderWidth: CoreFoundation.CGFloat, selectorBorderColor: CoreGraphics.CGColor, optionBackgroundColor: UIKit.UIColor, optionCornerRadius: CoreFoundation.CGFloat, optionTextColor: UIKit.UIColor, optionTextFont: UIKit.UIFont, backgroundColor: UIKit.UIColor, backgroundViewColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, sliderCornerRadius: CoreFoundation.CGFloat, barCornerRadius: CoreFoundation.CGFloat, selectorEdgeInsets: UIKit.UIEdgeInsets, activeThumbAndLineColor: UIKit.UIColor, inactiveThumbAndLineColor: UIKit.UIColor, minVideoDuration: Swift.Double, buttonCornerRadius: CoreFoundation.CGFloat, buttonBackgroundColor: UIKit.UIColor, modeTitleColor: UIKit.UIColor, dragTitleColor: UIKit.UIColor, dragTitleFont: UIKit.UIFont, buttonTitleColor: UIKit.UIColor, buttonTitleFont: UIKit.UIFont, currentValueTextColor: UIKit.UIColor, minimumValueTextColor: UIKit.UIColor, maximumValueTextColor: UIKit.UIColor, currentValueTextFont: UIKit.UIFont, minimumValueTextFont: UIKit.UIFont, maximumValueTextFont: UIKit.UIFont, thumbLineViewColor: UIKit.UIColor, thumbLineViewBackgroundColor: UIKit.UIColor, cursorViewColor: UIKit.UIColor)
  }
  public var timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
  public init(timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration)
}
public class ProgressViewConfiguration {
  public var messageConfiguration: BanubaUtilities.TextConfiguration
  public var tooltipMessageConfiguration: BanubaUtilities.TextConfiguration
  public var cancelButtonTextConfiguration: BanubaUtilities.TextButtonConfiguration
  public var cancelButtonBorderConfiguration: BanubaUtilities.BorderButtonConfiguration
  public var cancelButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundViewBlurStyle: UIKit.UIBlurEffect.Style
  public var progressBarColor: UIKit.UIColor
  public var progressBarHeight: CoreFoundation.CGFloat
  public var progressBarCornerRadius: CoreFoundation.CGFloat
  public init(messageConfiguration: BanubaUtilities.TextConfiguration, tooltipMessageConfiguration: BanubaUtilities.TextConfiguration, cancelButtonTextConfiguration: BanubaUtilities.TextButtonConfiguration, cancelButtonBorderConfiguration: BanubaUtilities.BorderButtonConfiguration, cancelButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, backgroundViewBlurStyle: UIKit.UIBlurEffect.Style, progressBarColor: UIKit.UIColor, progressBarHeight: CoreFoundation.CGFloat, progressBarCornerRadius: CoreFoundation.CGFloat)
  @objc deinit
}
public struct BeautyIntensityConfiguration {
  public var sliderThumbImageName: Swift.String
  public var sliderTintColor: UIKit.UIColor
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public init(sliderThumbImageName: Swift.String, sliderTintColor: UIKit.UIColor, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration)
}
public protocol ExternalViewControllerFactory {
  var musicEditorFactory: (any BanubaVideoEditorSDK.MusicEditorExternalViewControllerFactory)? { get set }
  var countdownTimerViewFactory: (any BanubaVideoEditorSDK.CountdownTimerViewFactory)? { get set }
  var exposureViewFactory: (any BanubaVideoEditorSDK.AnimatableViewFactory)? { get set }
  var galleryViewControllerFactory: (any BanubaUtilities.GalleryViewControllerFactory)? { get set }
  var progressViewControllerFactory: (any BanubaVideoEditorSDK.ProgressViewControllerFactory)? { get set }
}
extension BanubaVideoEditorSDK.ExternalViewControllerFactory {
  public var galleryViewControllerFactory: (any BanubaUtilities.GalleryViewControllerFactory)? {
    get
    set
  }
  public var progressViewControllerFactory: (any BanubaVideoEditorSDK.ProgressViewControllerFactory)? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class VideoEditorEffectsManagementPanel : UIKit.UIView {
  public struct Configuration {
    public let addButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let editButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let replaceButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let deleteButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let circleButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let squareButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let voiceEffectButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
    public let adjustButton: BanubaVideoEditorSDK.VideoEditorEffectsManagementPanel.ButtonConfiguration
  }
  public struct ButtonConfiguration {
    public let title: Swift.String
  }
  @objc deinit
}
public struct AutoCutConfiguration {
  public enum MusicProvider {
    case soundstripe(tracksURL: Foundation.URL)
    case banubaMusic(tracksURL: Foundation.URL)
  }
  public var embeddingsDownloadUrl: Swift.String?
  public var musicProvider: BanubaVideoEditorSDK.AutoCutConfiguration.MusicProvider?
  public init(embeddingsDownloadUrl: Swift.String?, musicProvider: BanubaVideoEditorSDK.AutoCutConfiguration.MusicProvider?)
}
public protocol MusicEditorExternalViewControllerFactory : AnyObject {
  func makeTrackSelectionViewController(selectedAudioItem: (any BanubaUtilities.AudioItem)?, isAudioPartSelectionEnabled: Swift.Bool) -> (any BanubaUtilities.TrackSelectionViewController)?
  func makeEffectSelectionViewController(selectedAudioItem: (any BanubaUtilities.AudioItem)?) -> (any BanubaUtilities.EffectSelectionViewController)?
  func makeRecorderCountdownAnimatableView() -> (any BanubaVideoEditorSDK.MusicEditorCountdownAnimatableView)?
}
extension BanubaVideoEditorSDK.MusicEditorExternalViewControllerFactory {
  public func makeTrackSelectionViewController() -> (any BanubaUtilities.TrackSelectionViewController)?
  public func makeEffectSelectionViewController() -> (any BanubaUtilities.EffectSelectionViewController)?
}
public protocol MusicEditorCountdownAnimatableView : UIKit.UIView {
  var countdownDigit: Swift.Int { get set }
  func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  func stop()
}
public struct PIPSwitchCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreFoundation.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPSwitchLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreFoundation.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreFoundation.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPCameraCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var selectedTextConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreFoundation.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPCameraLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, selectedTextConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreFoundation.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreFoundation.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPSelectableCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPPlayerLayoutSetting
  public var switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?
  public var cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration
  public var croppingCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration?
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreFoundation.CGFloat
  public var selectedBorderColor: CoreGraphics.CGColor
  public var deselectedBorderColor: CoreGraphics.CGColor
  public var isRoundedImageView: Swift.Bool
  public var cornerRadius: CoreFoundation.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPPlayerLayoutSetting, switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?, croppingCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration? = nil, cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreFoundation.CGFloat, selectedBorderColor: CoreGraphics.CGColor, deselectedBorderColor: CoreGraphics.CGColor, isRoundedImageView: Swift.Bool, cornerRadius: CoreFoundation.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct SpeedBarButtonsConfiguration {
  public var imageHalf: BanubaVideoEditorSDK.ImageConfiguration?
  public var imageNormal: BanubaVideoEditorSDK.ImageConfiguration?
  public var imageDouble: BanubaVideoEditorSDK.ImageConfiguration?
  public var imageTriple: BanubaVideoEditorSDK.ImageConfiguration?
  public var selectedTitleColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat?
  public init(imageHalf: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageNormal: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageDouble: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageTriple: BanubaVideoEditorSDK.ImageConfiguration? = nil, selectedTitleColor: UIKit.UIColor, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat?)
}
public struct AdditionalEffectsButtonConfiguration {
  public enum Position : Swift.Int {
    case top
    case bottom
    case center
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration?
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition?
  public var width: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position?
  public var imageTitleSpacing: CoreFoundation.CGFloat?
  public var defaultTitleAlpha: CoreFoundation.CGFloat?
  public var selectedTitleAlpha: CoreFoundation.CGFloat?
  public var cornerRadius: CoreFoundation.CGFloat
  public var backgroundMode: BanubaUtilities.BackgroundMode
  public var backgroundColor: UIKit.UIColor
  public var contentInsets: CoreFoundation.CGFloat
  public init(identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextButtonConfiguration? = nil, titlePosition: BanubaVideoEditorSDK.TitlePosition? = nil, width: CoreFoundation.CGFloat = 50, height: CoreFoundation.CGFloat = 50, position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position? = nil, imageTitleSpacing: CoreFoundation.CGFloat? = nil, defaultTitleAlpha: CoreFoundation.CGFloat? = nil, selectedTitleAlpha: CoreFoundation.CGFloat? = nil, cornerRadius: CoreFoundation.CGFloat = .zero, backgroundMode: BanubaUtilities.BackgroundMode = .color, backgroundColor: UIKit.UIColor = .clear, contentInsets: CoreFoundation.CGFloat = 8.5)
  public enum ButtonType : Swift.String {
    case link
    case color
    case sticker
    case text
    case time
    case sound
    case effects
    case toggle
    case flashlight
    case timer
    case speed
    case beauty
    case masks
    case muteSound
    case pip
    case blur
    case trimDraft
    case captions
    case autoCut
    case additionalCamera
    case the3DObjects
    case the3DObjectLayers
    case the3DObjectBackgroundColor
    case greenScreen
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum TitlePosition {
  case top
  case left
  case right
  case bottom
  public static func == (a: BanubaVideoEditorSDK.TitlePosition, b: BanubaVideoEditorSDK.TitlePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RecordButtonProvider {
  func getButton() -> any BanubaVideoEditorSDK.RecordButton
}
@objc public enum DraftsFeatureConfig : Swift.Int, Swift.CaseIterable {
  case enabled = 0
  case enabledSaveToDraftsByDefault = 1
  case disabled = 2
  case enabledAskIfSaveNotExport = 3
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.DraftsFeatureConfig]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.DraftsFeatureConfig] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct FeatureConfiguration {
  public var isBlurEnabled: Swift.Bool
  public var isBlurEffectsExportable: Swift.Bool
  public var isOverlayEditorEnabled: Swift.Bool
  public var isDoubleTapForToggleCameraEnabled: Swift.Bool
  public var isMuteCameraAudioEnabled: Swift.Bool
  public var isVideoCoverSelectionEnabled: Swift.Bool
  public var supportsTrimRecordedVideo: Swift.Bool
  public var draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig
  public var isAspectsEnabled: Swift.Bool
  public var isSpeedBarEnabled: Swift.Bool
  public var isVideoFitsAspect: Swift.Bool
  public var openAutomaticallyPIPSettingsDropdown: Swift.Bool
  public var useTransitions: Swift.Bool
  public var isDraftSavedToastEnabled: Swift.Bool
  public static let `default`: BanubaVideoEditorSDK.FeatureConfiguration
  public init(isOverlayEditorEnabled: Swift.Bool, isDoubleTapForToggleCameraEnabled: Swift.Bool, isMuteCameraAudioEnabled: Swift.Bool, isVideoCoverSelectionEnabled: Swift.Bool, supportsTrimRecordedVideo: Swift.Bool, draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig, isAspectsEnabled: Swift.Bool, isSpeedBarEnabled: Swift.Bool, isVideoFitsAspect: Swift.Bool, isBlurEnabled: Swift.Bool, isBlurEffectsExportable: Swift.Bool, openAutomaticallyPIPSettingsDropdown: Swift.Bool, useTransitions: Swift.Bool, isDraftSavedToastEnabled: Swift.Bool)
}
public struct RecorderEffectsConfiguration {
  public var cornerRadius: CoreFoundation.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var effectsHeight: CoreFoundation.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public init(cornerRadius: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, effectsHeight: CoreFoundation.CGFloat, effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration, effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration, preferredLutsOrder: [Swift.String], preferredMasksOrder: [Swift.String])
}
public struct EffectAdditionalMediaPickerConfiguration {
  public var galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration
  public var infoLabelConfiguration: BanubaUtilities.TextConfiguration
  public var allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var noMediaLabelConfiguration: BanubaUtilities.TextConfiguration
  public var openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public init(galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration, infoLabelConfiguration: BanubaUtilities.TextConfiguration, allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, noMediaLabelConfiguration: BanubaUtilities.TextConfiguration, openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration)
}
public struct GalleryAssetItemConfiguration {
  public var durationConfiguration: BanubaUtilities.TextConfiguration
  public var cornerRadius: CoreFoundation.CGFloat
  public var selectionColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var normalImage: BanubaVideoEditorSDK.ImageConfiguration
  public var activityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
}
public struct MusicPanelConfiguration {
  public var floatingLineViewConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewWidth: CoreFoundation.CGFloat?
  public var backroundConfiguration: BanubaUtilities.BackgroundConfiguration?
  public var removeMusicButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var musicPanelImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
}
public struct TimerConfiguration {
  public struct TimerOptionConfiguration : Swift.Equatable {
    public var button: BanubaVideoEditorSDK.ImageButtonConfiguration
    public var startingTimerSeconds: Swift.Int
    public var stoppingTimerSeconds: Swift.Int
    public var description: Swift.String?
    public static func == (lhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration, rhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration) -> Swift.Bool
    public init(button: BanubaVideoEditorSDK.ImageButtonConfiguration, startingTimerSeconds: Swift.Int, stoppingTimerSeconds: Swift.Int, description: Swift.String? = nil)
  }
  public var defaultButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var options: [BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration]
  public var soundPath: Swift.String?
}
public struct GalleryVideoPartsConfiguration {
  public var addGalleryVideoPartImageName: Swift.String
  public var videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration
  public init(addGalleryVideoPartImageName: Swift.String, videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration)
  public struct GalleryVideoPartConfiguration {
    public var selectionColor: UIKit.UIColor
    public var durationLabelConfiguration: BanubaUtilities.TextConfiguration
    public var cornerRadius: CoreFoundation.CGFloat
    public var imageCornerRadius: CoreFoundation.CGFloat
    public var imageInsets: UIKit.UIEdgeInsets
    public var scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
    public init(selectionColor: UIKit.UIColor, durationLabelConfiguration: BanubaUtilities.TextConfiguration, cornerRadius: CoreFoundation.CGFloat, imageCornerRadius: CoreFoundation.CGFloat, imageInsets: UIKit.UIEdgeInsets, scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?)
  }
}
public struct EffectItemConfiguration {
  public var noEffectImage: BanubaVideoEditorSDK.ImageConfiguration
  public var titleStyle: BanubaUtilities.TextConfiguration
  public var defaultStateTitleAlpha: CoreFoundation.CGFloat
  public var selectionColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var selectWhenHighlight: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var imageInsets: UIKit.UIEdgeInsets
  public var imageCornerRadius: CoreFoundation.CGFloat
  public var imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration?
  public var alwaysShowTitle: Swift.Bool
  public var showMasksTitle: Swift.Bool
  public var showEffectsTitle: Swift.Bool
  public var downloadIcon: BanubaVideoEditorSDK.ImageConfiguration?
  public var progressViewFactory: (any BanubaVideoEditorSDK.ProgressAnimatableViewFactory)?
  public init(noEffectImage: BanubaVideoEditorSDK.ImageConfiguration, titleStyle: BanubaUtilities.TextConfiguration, defaultStateTitleAlpha: CoreFoundation.CGFloat, selectionColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat, selectWhenHighlight: Swift.Bool, backgroundColor: UIKit.UIColor, imageInsets: UIKit.UIEdgeInsets, imageCornerRadius: CoreFoundation.CGFloat, imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration? = nil, alwaysShowTitle: Swift.Bool, showMasksTitle: Swift.Bool, showEffectsTitle: Swift.Bool, downloadIcon: BanubaVideoEditorSDK.ImageConfiguration? = nil, progressViewFactory: (any BanubaVideoEditorSDK.ProgressAnimatableViewFactory)? = nil)
}
public struct BanubaButtonConfiguration {
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition
  public var width: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var background: BanubaUtilities.BackgroundConfiguration
  public var imageTitleSpacing: CoreFoundation.CGFloat
  public init(title: BanubaUtilities.TextButtonConfiguration, titlePosition: BanubaVideoEditorSDK.TitlePosition = .bottom, width: CoreFoundation.CGFloat = 50, height: CoreFoundation.CGFloat = 50, background: BanubaUtilities.BackgroundConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageTitleSpacing: CoreFoundation.CGFloat = 0.0)
}
public struct TimeLabelConfiguration {
  public var textInsets: UIKit.UIEdgeInsets
  public var cornerRadius: CoreFoundation.CGFloat
  public var defaultColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var style: BanubaUtilities.TextConfiguration
  public init(textInsets: UIKit.UIEdgeInsets, cornerRadius: CoreFoundation.CGFloat, defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, style: BanubaUtilities.TextConfiguration)
}
public struct VideoCoverSelectionConfiguration {
  public var cancelButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var titleLabel: BanubaUtilities.TextConfiguration?
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var selectGalleryImageButton: BanubaUtilities.RoundedButtonConfiguration
  public var deleteGalleryImageConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var numberOfThumbnails: Swift.Int
  public var galleryImageCompressionQuality: CoreFoundation.CGFloat
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public var isGalleryButtonHidden: Swift.Bool
  public var bottomViewConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public init(cancelButton: BanubaVideoEditorSDK.BanubaButtonConfiguration, doneButton: BanubaUtilities.RoundedButtonConfiguration, titleLabel: BanubaUtilities.TextConfiguration?, toolTipLabel: BanubaUtilities.TextConfiguration, selectGalleryImageButton: BanubaUtilities.RoundedButtonConfiguration, deleteGalleryImageConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration, thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, numberOfThumbnails: Swift.Int, galleryImageCompressionQuality: CoreFoundation.CGFloat, preferredStatusBarStyle: UIKit.UIStatusBarStyle, isGalleryButtonHidden: Swift.Bool, bottomViewConfiguration: BanubaUtilities.BackgroundConfiguration, timelineCornerRadius: CoreFoundation.CGFloat)
}
public struct FilterControlButtonConfig {
  public enum `Type` : Swift.String {
    case cancel
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`
  public let imageName: Swift.String
  public let selectedImageName: Swift.String?
  public let imageEdgeInsets: UIKit.UIEdgeInsets?
  public var tintColor: UIKit.UIColor?
  public var image: UIKit.UIImage?
  public var selectedImage: UIKit.UIImage?
  public init(type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`, imageName: Swift.String, selectedImageName: Swift.String?, imageEdgeInsets: UIKit.UIEdgeInsets? = nil, tintColor: UIKit.UIColor? = nil)
}
@objc public class ImageConfiguration : ObjectiveC.NSObject, BanubaUtilities.ImageConfigurationProtocol {
  public var imageName: Swift.String
  @objc public var tintColor: UIKit.UIColor?
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  public init(imageName: Swift.String, tintColor: UIKit.UIColor? = nil)
  public init(image: UIKit.UIImage, tintColor: UIKit.UIColor? = nil)
  @objc deinit
}
public struct ImageButtonConfiguration : BanubaUtilities.ImageButtonConfigurationProtocol {
  public var imageConfiguration: any BanubaUtilities.ImageConfigurationProtocol
  public var selectedImageConfiguration: (any BanubaUtilities.ImageConfigurationProtocol)?
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil)
  public mutating func setTintColor(_ tintColor: UIKit.UIColor)
}
public struct ImageTextButtonConfiguration : BanubaUtilities.ImageTextButtonConfigurationProtocol {
  public var imageConfiguration: (any BanubaUtilities.ImageConfigurationProtocol)?
  public var selectedImageConfiguration: (any BanubaUtilities.ImageConfigurationProtocol)?
  public var style: BanubaUtilities.TextConfiguration?
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, style: BanubaUtilities.TextConfiguration? = nil)
  public mutating func setTintColor(_ tintColor: UIKit.UIColor)
}
public struct DraftsConfiguration {
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var title: BanubaUtilities.TextConfiguration
  public var draftItem: BanubaVideoEditorSDK.DraftItemConfiguration
  public var backgroundColor: UIKit.UIColor
  public var emptyDraftsImage: BanubaVideoEditorSDK.ImageConfiguration
  public var emptyDraftsLabel: BanubaUtilities.TextConfiguration
}
public struct ActionMenuConfiguration {
  public var dragIndicatorColor: UIKit.UIColor
  public var bacgroundViewCornerRadius: CoreFoundation.CGFloat
  public var previewImageViewCornerRadius: CoreFoundation.CGFloat
}
public struct DraftItemConfiguration {
  public var infoLabel: BanubaUtilities.TextConfiguration
  public var subinfoLabel: BanubaUtilities.TextConfiguration
  public var menuButtonImage: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var menuButtonBackgroundColor: UIKit.UIColor
  public var menuButtonImageEdgeInsets: UIKit.UIEdgeInsets
  public var cornerRadius: CoreFoundation.CGFloat
  public var menuItems: [BanubaUtilities.PopoverAlertViewController.ActionType]
  public init(infoLabel: BanubaUtilities.TextConfiguration, subinfoLabel: BanubaUtilities.TextConfiguration, menuButtonImage: BanubaVideoEditorSDK.ImageButtonConfiguration, menuButtonBackgroundColor: UIKit.UIColor, menuButtonImageEdgeInsets: UIKit.UIEdgeInsets, cornerRadius: CoreFoundation.CGFloat, menuItems: [BanubaUtilities.PopoverAlertViewController.ActionType])
}
public enum DraftMenuItemType {
  case edite
  case remove
  public static func == (a: BanubaVideoEditorSDK.DraftMenuItemType, b: BanubaVideoEditorSDK.DraftMenuItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DraftMenuItem {
  public var type: BanubaVideoEditorSDK.DraftMenuItemType
  public var name: BanubaUtilities.TextConfiguration
  public var image: BanubaVideoEditorSDK.ImageConfiguration?
  public init(type: BanubaVideoEditorSDK.DraftMenuItemType, name: BanubaUtilities.TextConfiguration, image: BanubaVideoEditorSDK.ImageConfiguration?)
}
public struct EffectListItemConfiguration {
  public enum `Type` : Swift.Equatable {
    case aspect(BanubaUtilities.AspectRatio)
    case transition(BanubaUtilities.TransitionType)
    public static func == (a: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, b: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`) -> Swift.Bool
  }
  public var effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var icon: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextConfiguration
  public var width: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var selectedColor: UIKit.UIColor
  public init(effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, icon: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextConfiguration, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, selectedColor: UIKit.UIColor)
}
public struct EffectsListConfiguration {
  public var cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var playPauseButton: BanubaUtilities.PlayerControlConfiguration?
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundControlsViewColor: UIKit.UIColor
  public var effects: [BanubaVideoEditorSDK.EffectListItemConfiguration]
  public var defaultEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var primaryAspect: BanubaUtilities.AspectRatio?
  public init(cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration, doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration, playPauseButton: BanubaUtilities.PlayerControlConfiguration?, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, backgroundControlsViewColor: UIKit.UIColor, effects: [BanubaVideoEditorSDK.EffectListItemConfiguration], defaultEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, primaryAspect: BanubaUtilities.AspectRatio? = nil)
}
public struct VideoOverlayItemViewConfiguration {
  public var scaleIconWidth: CoreFoundation.CGFloat
  public var scaleIconHeight: CoreFoundation.CGFloat
  public var overlaySelectedBorderWidth: CoreFoundation.CGFloat
  public var overlaySelectedBorderColor: CoreGraphics.CGColor
  public var scaleIconImageName: Swift.String
  public var blurItemMinSize: CoreFoundation.CGSize
  public init(scaleIconWidth: CoreFoundation.CGFloat, scaleIconHeight: CoreFoundation.CGFloat, overlaySelectedBorderWidth: CoreFoundation.CGFloat, overlaySelectedBorderColor: CoreGraphics.CGColor, scaleIconImageName: Swift.String, blurItemMinSize: CoreFoundation.CGSize)
}
public struct VideoEditorEffectItemConfiguration {
  public var noEffectImage: BanubaVideoEditorSDK.ImageConfiguration
  public var noEffectDefaultBorderColor: UIKit.UIColor
  public var defaultTitleStyle: BanubaUtilities.TextConfiguration
  public var selectedTitleStyle: BanubaUtilities.TextConfiguration
  public var selectionColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderPadding: CoreFoundation.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration?
  public var downloadIcon: BanubaVideoEditorSDK.ImageConfiguration?
  public var progressViewFactory: any BanubaVideoEditorSDK.ProgressAnimatableViewFactory
  public init(noEffectImage: BanubaVideoEditorSDK.ImageConfiguration, noEffectDefaultBorderColor: UIKit.UIColor, defaultTitleStyle: BanubaUtilities.TextConfiguration, selectedTitleStyle: BanubaUtilities.TextConfiguration, selectionColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat, borderPadding: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration? = nil, downloadIcon: BanubaVideoEditorSDK.ImageConfiguration? = nil, progressViewFactory: any BanubaVideoEditorSDK.ProgressAnimatableViewFactory = CircularProgressViewFactory())
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class VideoEditorToolsPanel : UIKit.UIView {
  public struct Configuration {
    public let editButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let canvasButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let stickerButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let textButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let effectsButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let masksButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let audioButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let filtersButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
    public let blurButton: BanubaVideoEditorSDK.VideoEditorToolsPanel.ButtonConfiguration
  }
  public struct ButtonConfiguration {
    public let title: Swift.String
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public protocol AspectsServicing {
  func setupWithVideoResolution(_ videoResolution: BanubaUtilities.VideoResolution)
  func getAspectedVideoSize(forAsset asset: AVFoundation.AVAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> CoreFoundation.CGSize
  func getAspectRatio(forAsset asset: AVFoundation.AVAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> Swift.Double
}
public class AspectsService : BanubaVideoEditorSDK.AspectsServicing {
  public var videoResolution: BanubaUtilities.VideoResolution
  public init()
  public func setupWithVideoResolution(_ videoResolution: BanubaUtilities.VideoResolution)
  public func getAspectedVideoSize(forAsset asset: AVFoundation.AVAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> CoreFoundation.CGSize
  public func getAspectRatio(forAsset asset: AVFoundation.AVAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> Swift.Double
  @objc deinit
}
public struct CaptionLanguageConfiguration {
  public var selectedIcon: any BanubaUtilities.ImageConfigurationProtocol
}
public protocol RecordButton : UIKit.UIView {
  var delegate: (any BanubaVideoEditorSDK.RecordButtonDelegate)? { get set }
  var configuration: BanubaVideoEditorSDK.RecordButtonConfiguration { get set }
  func setCaptureButtonState(_ state: BanubaVideoEditorSDK.CaptureButtonViewState)
  func setCaptureButtonMode(_ mode: BanubaVideoEditorSDK.CaptureButtonViewMode)
  func updateVideoRecordingProgress(_ progress: Swift.Double)
  func addCheckMark(at progress: Swift.Double)
  func removeLaskCheckMark()
  func removeAllCheckMarks()
}
public enum CaptureButtonViewState {
  case idle
  case recording
  case takePhoto
  public static func == (a: BanubaVideoEditorSDK.CaptureButtonViewState, b: BanubaVideoEditorSDK.CaptureButtonViewState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureButtonViewMode {
  case video
  case photo
  public static func == (a: BanubaVideoEditorSDK.CaptureButtonViewMode, b: BanubaVideoEditorSDK.CaptureButtonViewMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RecordButtonDelegate : AnyObject {
  var captureButtonMode: BanubaVideoEditorSDK.CaptureButtonViewMode { get }
  func recordButtonDidTakePhoto(_ recordButton: any BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidCancelTakePhoto(_ recordButton: any BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStartVideoRecording(_ recordButton: any BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStopVideoRecording(_ recordButton: any BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidZoomingVideoRecording(_ recordButton: any BanubaVideoEditorSDK.RecordButton, recognizer: UIKit.UILongPressGestureRecognizer)
}
public struct GreenScreenBackgroundPickerConfiguration {
  public struct ItemConfiguration {
    public var normalImage: BanubaVideoEditorSDK.ImageConfiguration
    public var cornerRadius: CoreFoundation.CGFloat
    public var borderWidth: CoreFoundation.CGFloat
    public var defaultBorderColor: UIKit.UIColor
    public var selectedBorderColor: UIKit.UIColor
    public var durationLabel: BanubaUtilities.TextConfiguration
    public var activityConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
    public var selectionCornerRadiusMultiplier: CoreFoundation.CGFloat
  }
  public var title: BanubaUtilities.TextConfiguration
  public var itemConfiguration: BanubaVideoEditorSDK.GreenScreenBackgroundPickerConfiguration.ItemConfiguration
  public var selectGalleryButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var customBackgroundsURL: Foundation.URL?
}
public struct The3DObjectsConfiguration {
  public var itemConfiguration: BanubaVideoEditorSDK.The3DObjectPickerItemConfiguration
  public var the3DObjectsARCloudURL: Swift.String?
  public var genderTileFont: UIKit.UIFont
}
public enum EffectType {
  case mask
  case effect
  case videoEditorEffect
  public static func == (a: BanubaVideoEditorSDK.EffectType, b: BanubaVideoEditorSDK.EffectType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init?(colorParams: BanubaVideoEditorSDK.ColorParams)
}
public enum VideoRecordSpeed : Swift.Int, Swift.CaseIterable {
  case half
  case normal
  case double
  case triple
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.VideoRecordSpeed]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.VideoRecordSpeed] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct CoverSelectionConfiguration {
  public var backgroundColor: UIKit.UIColor
  public var cancelButton: any BanubaUtilities.ImageButtonConfigurationProtocol
  public var titleConfiguration: BanubaUtilities.TextConfiguration
  public var doneButton: BanubaUtilities.TextButtonConfiguration
  public var deleteGalleryImageButton: any BanubaUtilities.ImageButtonConfigurationProtocol
  public var currentTimeLabelConfiguration: BanubaUtilities.TextConfiguration
  public var selectGalleryButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var cursorBorderWidth: CoreFoundation.CGFloat
  public var cursorColor: UIKit.UIColor
  public var cursorCornerRadius: CoreFoundation.CGFloat
  public var numberOfThumbnails: Swift.Int
  public var previewCornerRadius: CoreFoundation.CGFloat
}
public protocol SDKCameraChangedDelegate : AnyObject {
  func sdkDidChangeCamera(cameraStartedCompletion: (() -> Swift.Void)?)
  func sdkWillChangeCamera()
}
public protocol SDKCameraServicing {
  var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed { get set }
  var cameraChangedDelegate: (any BanubaVideoEditorSDK.SDKCameraChangedDelegate)? { get set }
  func setupCameraChangedDelegate(_ delegate: (any BanubaVideoEditorSDK.SDKCameraChangedDelegate)?)
  var renderQueue: Dispatch.DispatchQueue? { get }
  var autoStart: Swift.Bool { get set }
  var allowProcessing: Swift.Bool { get set }
  var isLoaded: Swift.Bool { get }
  func effectsPaths() -> [Swift.String]
  func setupCamera()
  func setupPostprocessing()
  func destroy()
  func start(completion: @escaping () -> Swift.Void)
  func stop()
  func stop(completion: (() -> Swift.Void)?)
  var appliedFilter: BanubaSDKServicing.EffectModel? { get }
  func applyFilter(_ filter: BanubaSDKServicing.EffectModel)
  func removeFilter(_ filter: BanubaSDKServicing.EffectModel)
  func removeAllFilters()
  func startRenderLoop()
  func stopRenderLoop()
  func loadMask(name: Swift.String, synchronous: Swift.Bool)
  func unloadMask()
  func setRenderTarget(view: UIKit.UIView)
  func removeRenderTarget()
  @discardableResult
  func toggleBeautification() -> Swift.Bool
  func enableGreenScreen(completion: @escaping () -> Swift.Void)
  func disableGreenScreen()
  func discardAppliedChanges()
  func setupDefaultState()
  func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
  func getRendererView() -> UIKit.UIView
  func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  func replaceCamera(_ camera: any BanubaSDKServicing.CameraModule, completion: (() -> Swift.Void)?)
  func addFPSListener(_ listener: ((_ fpsInfo: Foundation.NSAttributedString) -> Swift.Void)?)
}
public class SDKCameraService : BanubaVideoEditorSDK.SDKCameraServicing {
  weak public var cameraChangedDelegate: (any BanubaVideoEditorSDK.SDKCameraChangedDelegate)?
  public var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed
  public var isLoaded: Swift.Bool {
    get
  }
  public var autoStart: Swift.Bool {
    get
    set
  }
  public var allowProcessing: Swift.Bool {
    get
    set
  }
  public var renderQueue: Dispatch.DispatchQueue? {
    get
  }
  public var appliedFilter: BanubaSDKServicing.EffectModel?
  required public init(cameraModule: any BanubaSDKServicing.CameraModule, masksPostprocessingServicing: (any BanubaSDKServicing.SDKMaskPostprocessServicing)?)
  @objc deinit
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func setupCamera()
  public func setupPostprocessing()
  public func destroy()
  public func setupCameraChangedDelegate(_ delegate: (any BanubaVideoEditorSDK.SDKCameraChangedDelegate)?)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func replaceCamera(_ camera: any BanubaSDKServicing.CameraModule, completion: (() -> Swift.Void)?)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func start(completion: @escaping () -> Swift.Void)
  public func stop()
  public func stop(completion: (() -> Swift.Void)?)
  public func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func effectsPaths() -> [Swift.String]
  public func applyFilter(_ filter: BanubaSDKServicing.EffectModel)
  public func removeFilter(_ filter: BanubaSDKServicing.EffectModel)
  public func removeAllFilters()
  public func loadMask(name: Swift.String, synchronous: Swift.Bool)
  public func unloadMask()
  public func toggleBeautification() -> Swift.Bool
  public func enableGreenScreen(completion: @escaping () -> Swift.Void)
  public func disableGreenScreen()
  public func discardAppliedChanges()
  public func setupDefaultState()
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func startRenderLoop()
  public func stopRenderLoop()
  public func setRenderTarget(view: UIKit.UIView)
  public func removeRenderTarget()
  public func getRendererView() -> UIKit.UIView
  public func addFPSListener(_ listener: ((_ fpsInfo: Foundation.NSAttributedString) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FeedbackAlertViewController : UIKit.UIViewController {
  public enum ActionTypes {
    case agree
    case refuse
    case cancel
    public static func == (a: BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes, b: BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) final public var actionHandler: ((BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BanubaVideoEditorSDK.FeedbackAlertViewController {
  @_Concurrency.MainActor(unsafe) public static func makeAlertViewController() -> BanubaVideoEditorSDK.FeedbackAlertViewController
}
@_hasMissingDesignatedInitializers public class SliderRounderCalculator {
  public typealias Result = (rounded: Swift.Float, displayed: Swift.String)
  public static func getRoundedVolumeValue(_ volume: Swift.Float, wasChanged: Swift.Bool) -> BanubaVideoEditorSDK.SliderRounderCalculator.Result
  @objc deinit
}
public typealias Result<T> = Swift.Result<T, any Swift.Error>
public protocol VideoMetadataStorageDelegate : AnyObject {
  func videoMetadataStorageDidStartStoring(_ videoMetadataStorage: BanubaVideoEditorSDK.VideoMetadataStorage)
}
public class VideoMetadataStorage {
  weak public var delegate: (any BanubaVideoEditorSDK.VideoMetadataStorageDelegate)?
  public var videoSequence: VideoEditor.VideoSequence? {
    get
  }
  public var videoMetadata: BanubaVideoEditorSDK.VideoMetadata? {
    get
  }
  public var videoEditorMetadata: BanubaVideoEditorSDK.VideoEditorMetadata? {
    get
  }
  public var videoEditorTrimMetadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata? {
    get
  }
  public var audioTracks: [BanubaVideoEditorSDK.AudioTrack]? {
    get
  }
  public var videoCoverMetadata: BanubaVideoEditorSDK.VideoCoverMetadata? {
    get
  }
  public var musicEditorMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? {
    get
  }
  public var cameraSessionMetadata: BanubaVideoEditorSDK.CameraSessionMetadata? {
    get
  }
  required public init(videoSequence: VideoEditor.VideoSequence? = nil, fileManager: Foundation.FileManager = FileManager.default)
  @objc deinit
  public func update(metadata: [BanubaVideoEditorSDK.AudioTrack], trackVolumes: [Swift.Int32 : Swift.Float], pipVolume: Swift.Float?, videoVolume: Swift.Float)
  public func update(musicEditorTracks: [BanubaVideoEditorSDK.MusicEditorTrack], trackVolumes: [Swift.Int32 : Swift.Float], pipVolume: Swift.Float?, videoVolume: Swift.Float)
  public func update(metadata: BanubaVideoEditorSDK.CameraSessionMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata)
  public func resetTrimMetadata()
  public func update(metadata: BanubaVideoEditorSDK.VideoMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoMetadata, for videoSequence: VideoEditor.VideoSequence)
  public func update(metadata: BanubaVideoEditorSDK.VideoEditorMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoCoverMetadata)
  public func reset()
  public func setupCurrentSequence(_ videoSequence: VideoEditor.VideoSequence)
  public func videoMetadata(forVideoSequence videoSequence: VideoEditor.VideoSequence?) -> BanubaVideoEditorSDK.VideoMetadata?
  public func videoEditorTrimMetadata(for videoSequence: VideoEditor.VideoSequence) -> BanubaVideoEditorSDK.VideoEditorTrimMetadata?
  public func videoCoverMetadata(forVideoSequence videoSequence: VideoEditor.VideoSequence?) -> BanubaVideoEditorSDK.VideoCoverMetadata?
  public func cameraSessionMetadata(forVideoSequence videoSequence: VideoEditor.VideoSequence?) -> BanubaVideoEditorSDK.CameraSessionMetadata?
  public func isVideoSequenceContainsAutocutMetadata(for videoSequence: VideoEditor.VideoSequence) -> Swift.Bool
  public func replaceMetadata(ofVideoSequence destinationSequence: VideoEditor.VideoSequence, withVideoSequence sourceSequence: VideoEditor.VideoSequence)
  public func duplicateMetadata(ofVideoSequence sourceSequence: VideoEditor.VideoSequence, toVideoSequence destinationSequence: VideoEditor.VideoSequence)
}
public protocol AnimatableViewFactory {
  func makeAnimatableView() -> any BanubaUtilities.AnimatableView
}
public typealias ExternalDraft = VideoEditor.VideoSequence
@_hasMissingDesignatedInitializers public class DraftsService {
  public func getDrafts() -> [BanubaVideoEditorSDK.ExternalDraft]
  public func removeExternalDraft(_ externalDraft: BanubaVideoEditorSDK.ExternalDraft) -> Swift.Bool
  public func getPreviewForVideoSequence(_ externalDraft: BanubaVideoEditorSDK.ExternalDraft, thumbnailHeight: CoreFoundation.CGFloat, completion: ((_ preview: UIKit.UIImage?) -> Swift.Void)?)
  @objc deinit
}
public struct CaptionsConfiguration {
  public var captionsUploadUrl: Swift.String?
  public var captionsTranscribeUrl: Swift.String?
  public var apiKey: Swift.String?
  public var progressBarColor: UIKit.UIColor
  public var progressBarBackgroundColor: UIKit.UIColor
  public var supportedLanguages: [BanubaVideoEditorSDK.CaptionsLanguage]
  public var languageConfiguration: BanubaVideoEditorSDK.CaptionLanguageConfiguration
}
public protocol ExternalMaskProviding {
  var isLoadingMasks: Swift.Bool { get }
  var didReceiveExternalMasks: (([any BanubaVideoEditorSDK.ExternalMask]) -> Swift.Void)? { get set }
  var masks: [any BanubaVideoEditorSDK.ExternalMask] { get }
  func requestMasks(_ completion: ((_ masks: [any BanubaVideoEditorSDK.ExternalMask]) -> Swift.Void)?)
  func requestMask(_ mask: any BanubaVideoEditorSDK.ExternalMask, statusUpdateHandler: ((BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Void)?)
  func cancelMaskDownloading(_ mask: any BanubaVideoEditorSDK.ExternalMask)
  func requestMaskPreview(_ mask: any BanubaVideoEditorSDK.ExternalMask, completion: ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)?)
}
public protocol ExternalMask {
  var id: Swift.UInt { get }
  var maskType: Swift.String? { get }
  var name: Swift.String { get }
  var url: Foundation.URL { get }
  var previewImageURL: Foundation.URL { get }
  var status: BanubaVideoEditorSDK.ExternalMaskStatus { get }
}
public enum ExternalMaskStatus : Swift.Equatable {
  case startDownloading
  case notDownloaded
  case downloaded(path: Foundation.URL, shouldApply: Swift.Bool)
  case downloading(progress: Swift.Float)
  case error(any Swift.Error)
  public static let downloadEffectMaxProgress: Swift.Float
  public static let downloadEffectMinProgress: Swift.Float
  public static func == (lhs: BanubaVideoEditorSDK.ExternalMaskStatus, rhs: BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Bool
}
public enum VideoTextAlignment : Swift.Int {
  case left
  case center
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ReflectedStringConvertible : Swift.CustomStringConvertible {
}
extension BanubaVideoEditorSDK.ReflectedStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BanubaUtilities.SmallActivityIndicatorConfiguration {
  public static var config: BanubaUtilities.SmallActivityIndicatorConfiguration {
    get
  }
}
extension BanubaVideoEditorSDK.FullScreenActivityConfiguration {
  public static var config: BanubaVideoEditorSDK.FullScreenActivityConfiguration {
    get
  }
}
extension VideoEditor.WatermarkConfiguration {
  public static var config: VideoEditor.WatermarkConfiguration {
    get
  }
}
public struct VideoPreviewConfiguration {
  public var watermarkConfiguration: VideoEditor.WatermarkConfiguration?
  public var exportVideoInfo: VEExportSDK.ExportVideoInfo
}
public protocol TextEditSelectionColorBehavior {
  func setColorView(_ view: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
}
public class DefaultExposureViewFactory : BanubaVideoEditorSDK.AnimatableViewFactory {
  public init()
  public func makeAnimatableView() -> any BanubaUtilities.AnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ExposureAnimationView : UIKit.UIView, BanubaUtilities.AnimatableView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
public protocol SequencesServicing {
  var aspectRatio: BanubaUtilities.AspectRatio { get }
  var currentSequence: VideoEditor.VideoSequence? { get }
  var lastModifiedSequence: VideoEditor.VideoSequence? { get }
  var sequences: [VideoEditor.VideoSequence] { get }
  var draftedSequences: [VideoEditor.VideoSequence] { get }
  func createNewSequence(withMusicTrack musicTrack: BanubaUtilities.MediaTrack?, isSlideShow: Swift.Bool, editingStep: BanubaVideoEditorSDK.VideoSequenceEditingStep, maxVideoDuration: Foundation.TimeInterval) -> VideoEditor.VideoSequence
  func cancelAndRemoveCurrentSequence()
  @discardableResult
  func removeSequence(_ videoSequence: VideoEditor.VideoSequence) -> Swift.Bool
  @discardableResult
  func duplicateSequence(_ videoSequence: VideoEditor.VideoSequence, withSameName: Swift.Bool) -> (VideoEditor.VideoSequence, BanubaVideoEditorSDK.VideoMetadata)
  func replaceSequenceWithId(_ sequenceId: Swift.String, withVideoSequence: VideoEditor.VideoSequence)
  func setupWithVideoSequence(_ videoSequence: VideoEditor.VideoSequence)
  func setEditingStep(_ editingStep: BanubaVideoEditorSDK.VideoSequenceEditingStep, forSequence videoSequence: VideoEditor.VideoSequence)
  func sequenceWithId(_ sequenceId: Swift.String) -> VideoEditor.VideoSequence?
}
extension BanubaVideoEditorSDK.SequencesServicing {
  public func createNewSequence(withMusicTrack musicTrack: BanubaUtilities.MediaTrack? = nil, isSlideShow: Swift.Bool = false, editingStep: BanubaVideoEditorSDK.VideoSequenceEditingStep = .camera, maxVideoDuration: Foundation.TimeInterval) -> VideoEditor.VideoSequence
}
public struct AppearingViewNavigationViewConfiguration {
  public var cancelButton: BanubaUtilities.TextButtonConfiguration
  public var doneButton: BanubaUtilities.TextButtonConfiguration
  public var title: BanubaUtilities.TextConfiguration
}
public protocol ProgressAnimatableViewFactory {
  func makeProgressAnimatableView() -> any BanubaUtilities.ProgressAnimatableView
}
final public class CircularProgressViewFactory : BanubaVideoEditorSDK.ProgressAnimatableViewFactory {
  final public var progressColor: UIKit.UIColor
  final public let shadowColor: UIKit.UIColor
  public init(progressColor: UIKit.UIColor = .white, shadowColor: UIKit.UIColor = UIColor(white: 0, alpha: 0.25))
  final public func makeProgressAnimatableView() -> any BanubaUtilities.ProgressAnimatableView
  @objc deinit
}
public enum GiphyResolution {
  case medium
  case original
  public static func == (a: BanubaVideoEditorSDK.GiphyResolution, b: BanubaVideoEditorSDK.GiphyResolution) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ContentLocationType : Swift.Int {
  case remote
  case local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol EffectViewModel : AnyObject {
  var type: BanubaVideoEditorSDK.EffectType { get }
  var image: UIKit.UIImage? { get set }
  var title: Swift.String { get }
  var id: Swift.UInt { get }
  var progress: Swift.Float? { get set }
  var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? { get set }
  var downloadType: BanubaVideoEditorSDK.ContentLocationType { get }
  var lutFileName: Swift.String? { get }
  func isEqual(to model: any BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  var isMaskModel: Swift.Bool { get }
}
extension BanubaSDKServicing.EffectModel : BanubaVideoEditorSDK.EffectViewModel {
  public var lutFileName: Swift.String? {
    get
  }
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public func isEqual(to model: any BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var isMaskModel: Swift.Bool {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
extension VideoEditor.VideoEditorFilterModel : BanubaVideoEditorSDK.EffectViewModel {
  public var lutFileName: Swift.String? {
    get
  }
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public func isEqual(to model: any BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var isMaskModel: Swift.Bool {
    get
  }
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
public struct TransitionEffect : Swift.Equatable {
  public let type: BanubaUtilities.TransitionType
  public let icon: any BanubaUtilities.ImageConfigurationProtocol
  public let title: Swift.String
  public static func == (lhs: BanubaVideoEditorSDK.TransitionEffect, rhs: BanubaVideoEditorSDK.TransitionEffect) -> Swift.Bool
}
final public class CircularProgressRecordButtonProvider : BanubaVideoEditorSDK.RecordButtonProvider {
  public init()
  final public func getButton() -> any BanubaVideoEditorSDK.RecordButton
  @objc deinit
}
public struct MusicEditorConfig {
  public var mainMusicViewControllerConfig: BanubaVideoEditorSDK.MainMusicViewControllerConfig
  public var videoTrackLineEditControllerConfig: BanubaVideoEditorSDK.VideoTrackLineEditViewControllerConfig
  public var audioTrackLineEditControllerConfig: BanubaVideoEditorSDK.AudioTrackLineEditViewControllerConfig
  public var audioRecorderViewControllerConfig: BanubaVideoEditorSDK.AudioRecorderViewControllerConfig
  public init()
  public init(mainMusicViewControllerConfig: BanubaVideoEditorSDK.MainMusicViewControllerConfig, videoTrackLineEditControllerConfig: BanubaVideoEditorSDK.VideoTrackLineEditViewControllerConfig, audioTrackLineEditControllerConfig: BanubaVideoEditorSDK.AudioTrackLineEditViewControllerConfig, audioRecorderViewControllerConfig: BanubaVideoEditorSDK.AudioRecorderViewControllerConfig)
}
extension BanubaVideoEditorSDK.AudioTrackLinePosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.AudioTrackLinePosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.AudioTrackLinePosition : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.EditButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.EditButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.EditButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.EditCompositionButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.EditCompositionButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.EditCompositionButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.ControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.ControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.ControlButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AVAudioEngineUnit : Swift.Equatable {}
extension BanubaVideoEditorSDK.AVAudioEngineUnit : Swift.Hashable {}
extension BanubaVideoEditorSDK.AVAudioEngineUnitParameter : Swift.Equatable {}
extension BanubaVideoEditorSDK.AVAudioEngineUnitParameter : Swift.Hashable {}
extension BanubaVideoEditorSDK.VoiceEffectType : Swift.Equatable {}
extension BanubaVideoEditorSDK.VoiceEffectType : Swift.Hashable {}
extension BanubaVideoEditorSDK.VoiceEffectType : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.SharingServiceModel.SharingType : Swift.Equatable {}
extension BanubaVideoEditorSDK.SharingServiceModel.SharingType : Swift.Hashable {}
extension BanubaVideoEditorSDK.SDKEventScreen : Swift.Equatable {}
extension BanubaVideoEditorSDK.SDKEventScreen : Swift.Hashable {}
extension BanubaVideoEditorSDK.SDKEventScreen : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.SDKEventName : Swift.Equatable {}
extension BanubaVideoEditorSDK.SDKEventName : Swift.Hashable {}
extension BanubaVideoEditorSDK.SDKEventName : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.VideoSequenceEditingStep : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoSequenceEditingStep : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoSequenceEditingStep : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.CaptionsLanguage : Swift.Equatable {}
extension BanubaVideoEditorSDK.CaptionsLanguage : Swift.Hashable {}
extension BanubaVideoEditorSDK.CaptionsLanguage : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.OverlayAddButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.OverlayAddButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.OverlayAddButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.OverlayEditButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.OverlayEditButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.OverlayEditButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.OverlayControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.OverlayControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.OverlayControlButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.DraftActionType : Swift.Equatable {}
extension BanubaVideoEditorSDK.DraftActionType : Swift.Hashable {}
extension BanubaVideoEditorSDK.RecorderPreviewScalingMode : Swift.Equatable {}
extension BanubaVideoEditorSDK.RecorderPreviewScalingMode : Swift.Hashable {}
extension BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType : Swift.Equatable {}
extension BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.TitlePosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.TitlePosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.Equatable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.Hashable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.DraftMenuItemType : Swift.Equatable {}
extension BanubaVideoEditorSDK.DraftMenuItemType : Swift.Hashable {}
extension BanubaVideoEditorSDK.CaptureButtonViewState : Swift.Equatable {}
extension BanubaVideoEditorSDK.CaptureButtonViewState : Swift.Hashable {}
extension BanubaVideoEditorSDK.CaptureButtonViewMode : Swift.Equatable {}
extension BanubaVideoEditorSDK.CaptureButtonViewMode : Swift.Hashable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Equatable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes : Swift.Equatable {}
extension BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAlignment : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoTextAlignment : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAlignment : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.GiphyResolution : Swift.Equatable {}
extension BanubaVideoEditorSDK.GiphyResolution : Swift.Hashable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Equatable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Hashable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.RawRepresentable {}
