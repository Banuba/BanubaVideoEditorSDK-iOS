// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BanubaVideoEditorSDK
import ARKit
import AVFoundation
import AVKit
import BanubaARCloudSDK
import BanubaAudioBrowserSDK
import BanubaEffectPlayer
import BanubaMusicEditorSDK
import BanubaOverlayEditorSDK
import BanubaSdk
@_exported import BanubaVideoEditorSDK
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import GLKit
import Lottie
import MobileCoreServices
import OpenGLES
import Photos
import Swift
import UIKit
import VideoEditor
@objc @_inheritsConvenienceInitializers public class VideoEditorActivityIndicator : UIKit.UIView {
  @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  public var configuration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func startAnimating()
  public func stopAnimating()
  @objc deinit
}
public protocol SDKMaskPostprocessServicing : AnyObject {
  func postprocessProcessVideoFrame(_ from: CoreVideo.CVPixelBuffer, to: CoreVideo.CVPixelBuffer, time: CoreMedia.CMTime)
  func postprocessStopVideoProcessing()
  func postprocessPlaybackStop()
  func postprocessSurfaceDestroyed()
  func postprocessSurfaceCreated(with size: CoreGraphics.CGSize)
  func postprocessSetEffectSize(_ size: CoreGraphics.CGSize)
  func postprocessLoadEffect(path: Swift.String)
  func postprocessStartVideoProcessing(with size: CoreGraphics.CGSize)
  func postprocessDraw()
}
public struct VideoOverlayObjectWithImage : BanubaOverlayEditorSDK.OverlayItem {
  public let id: Swift.String
  public var image: UIKit.UIImage
  public var imageData: Foundation.Data
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.OverlayAddButtonConfigType?
  public init(id: Swift.String, image: UIKit.UIImage, imageData: Foundation.Data, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, frame: CoreGraphics.CGRect = .zero, transform: CoreGraphics.CGAffineTransform = .identity)
}
@_inheritsConvenienceInitializers public class BanubaMaskDrawer : BanubaVideoEditorSDK.VideoEditorEffectDrawer {
  @objc deinit
  required public init()
}
extension PlayersBundle : BanubaMusicEditorSDK.PlayerAdoptable {
}
public struct VideoOverlayObjectWithText : BanubaOverlayEditorSDK.OverlayItem {
  public let id: Swift.String
  public var image: UIKit.UIImage
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var text: Swift.String?
  public var font: BanubaVideoEditorSDK.VideoTextFont?
  public var backgroundColor: UIKit.UIColor?
  public var foregroundColor: UIKit.UIColor?
  public var alignment: UIKit.NSTextAlignment?
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.OverlayAddButtonConfigType?
  public init()
  public init(image: UIKit.UIImage)
}
public protocol RenderEffect : AnyObject {
  var name: Swift.String { get }
  var isLoaded: Swift.Bool { get }
  var isActive: Swift.Bool { get set }
  func load(size: CoreGraphics.CGSize)
  func unload()
  func apply(params: Swift.Dictionary<Swift.String, Swift.String>)
}
public class ColorEffect : BanubaVideoEditorSDK.RenderEffect {
  public var name: Swift.String
  public var isLoaded: Swift.Bool {
    get
  }
  public var isActive: Swift.Bool
  public init(file url: Foundation.URL)
  public func load(size: CoreGraphics.CGSize)
  public func unload()
  public func apply(params: Swift.Dictionary<Swift.String, Swift.String>)
  @objc deinit
}
public class ShaderEffect : BanubaVideoEditorSDK.RenderEffect {
  public var name: Swift.String
  public var isLoaded: Swift.Bool {
    get
  }
  public var isActive: Swift.Bool
  public init(name: Swift.String)
  public func load(size: CoreGraphics.CGSize)
  public func unload()
  public func apply(params: Swift.Dictionary<Swift.String, Swift.String>)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FullscreenActivityView : UIKit.UIView {
  public var text: Swift.String? {
    get
    set
  }
  public var configuration: BanubaVideoEditorSDK.FullScreenActivityConfiguration? {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  public func applyVisibility(_ visible: Swift.Bool)
  public static func loadFromNib() -> BanubaVideoEditorSDK.FullscreenActivityView
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers public class EditorEffectModelBuilder {
  public func gifModel(id: Swift.UInt, rendererInstance: VideoEditor.CompositionRenderering?) -> VideoEditor.VideoEditorFilterModel
  public func textModel(id: Swift.UInt, rendererInstance: VideoEditor.CompositionRenderering?) -> VideoEditor.VideoEditorFilterModel
  public func makeModels(configs: [[BanubaVideoEditorSDK.EditorEffectKey : Any]], startId: Swift.UInt) -> [VideoEditor.VideoEditorFilterModel]
  public func makeModel(config: [BanubaVideoEditorSDK.EditorEffectKey : Any], id: Swift.UInt) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertViewController : UIKit.UIViewController {
  public enum AlertType {
    case info
    case selection
    case missedPermission
    public static func == (a: BanubaVideoEditorSDK.AlertViewController.AlertType, b: BanubaVideoEditorSDK.AlertViewController.AlertType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var messageText: Swift.String? {
    get
    set
  }
  public var alertType: BanubaVideoEditorSDK.AlertViewController.AlertType? {
    get
    set
  }
  public var configuration: BanubaVideoEditorSDK.AlertViewConfiguration?
  public var actionHandler: ((Swift.Bool) -> Swift.Void)?
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class AudioServiceItem : BanubaMusicEditorSDK.AudioItem {
  @objc final public let id: Swift.Int64
  @objc final public let url: Foundation.URL
  @objc public var title: Swift.String?
  public var timeRange: CoreMedia.CMTimeRange {
    get
  }
  public init(id: Swift.Int64, url: Foundation.URL, title: Swift.String?)
  @objc deinit
}
public protocol AudioServicing {
  var delegate: BanubaMusicEditorSDK.AudioPlayerDelegate? { get set }
  var currentAudio: BanubaVideoEditorSDK.AudioServiceItem? { get }
  var duration: Foundation.TimeInterval? { get }
  func autoRepeat(repeat: Swift.Bool)
  func seekToStart()
  func seek(to: Foundation.TimeInterval)
  func load(item: BanubaVideoEditorSDK.AudioServiceItem) throws
  func unload()
  func toggle()
  func play()
  func pause()
  func setDelegate(_ delegate: BanubaMusicEditorSDK.AudioPlayerDelegate)
}
@objc @_inheritsConvenienceInitializers public class AudioService : ObjectiveC.NSObject, BanubaVideoEditorSDK.AudioServicing, BanubaMusicEditorSDK.AudioEditorServiceAdoptable {
  weak public var delegate: BanubaMusicEditorSDK.AudioPlayerDelegate?
  public var currentAudio: BanubaVideoEditorSDK.AudioServiceItem?
  public var player: AVFoundation.AVAudioPlayer?
  public var duration: Foundation.TimeInterval? {
    get
  }
  public func autoRepeat(repeat: Swift.Bool)
  public func seekToStart(isEnabled: Swift.Bool)
  public func load(track: BanubaMusicEditorSDK.AudioTrackAdoptable) throws
  public func createAudioDirectory()
  public func changeVolume(volume: Swift.Float)
  public func load(item: BanubaVideoEditorSDK.AudioServiceItem) throws
  public func load(trackUrl: Foundation.URL) throws
  public func unload()
  public func toggle()
  public func play()
  public func pause()
  public func seekToStart()
  public func seek(to: Foundation.TimeInterval)
  public func setDelegate(_ delegate: BanubaMusicEditorSDK.AudioPlayerDelegate)
  @objc deinit
  @objc override dynamic public init()
}
extension AudioService : AVFoundation.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFoundation.AVAudioPlayer, successfully flag: Swift.Bool)
}
public class BanubaCameraModule {
  public var beautyManager: BanubaVideoEditorSDK.BeautyEffectManaging
  public var isLoaded: Swift.Bool
  public var allowProcessing: Swift.Bool
  public var inputDelegate: BanubaVideoEditorSDK.SDKInputServicingDelegate?
  public var inputARDelegate: BanubaVideoEditorSDK.SDKARInputServicingDelegate?
  public static var videoSize: CoreGraphics.CGSize!
  public static var videoPreset: AVFoundation.AVCaptureSession.Preset! {
    get
  }
  required public init()
  @objc deinit
}
extension BanubaCameraModule : BanubaVideoEditorSDK.CameraModule {
  public var autoStart: Swift.Bool {
    get
    set
  }
  public var playerViewSize: CoreGraphics.CGSize {
    get
  }
  public func setup(postproccessContext: OpenGLES.EAGLContext)
  public func destroy()
  public func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  public func start(completion: @escaping () -> Swift.Void)
  public func stop(completion: (() -> Swift.Void)?)
  public func setRenderTarget(view: UIKit.UIView)
  public func removeRenderTarget()
  public func getRendererView() -> UIKit.UIView
}
extension BanubaCameraModule : BanubaVideoEditorSDK.SDKInputServicing {
  public var zoomFactor: Swift.Float {
    get
  }
  public var isFrontCamera: Swift.Bool {
    get
  }
  public var currentCameraSessionType: BanubaVideoEditorSDK.CameraModuleSessionType {
    get
  }
  public func configureFocusSettings(_ point: CoreGraphics.CGPoint?, useContinuousDetection: Swift.Bool)
  public func configureExposureSettings(_ point: CoreGraphics.CGPoint?, useContinuousDetection: Swift.Bool)
  public func setZoomFactor(_ zoomFactor: Swift.Float) -> Swift.Float
  public func toggleCamera(completion: @escaping BanubaSdk.RotateCameraCallBack)
  public func startCamera()
  public func startAudioCapturing()
  public func stopAudioCapturing()
  public func setCameraSessionType(_ type: BanubaVideoEditorSDK.CameraModuleSessionType)
  public func setTorch(mode: AVFoundation.AVCaptureDevice.TorchMode) -> AVFoundation.AVCaptureDevice.TorchMode
  public func toggleTorch() -> AVFoundation.AVCaptureDevice.TorchMode
}
extension BanubaCameraModule : BanubaVideoEditorSDK.SDKOutputServicing {
  public var isRecording: Swift.Bool {
    get
  }
  public var isEnoughDiskSpaceForRecording: Swift.Bool {
    get
  }
  public func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, periodicProgressTimeInterval: Foundation.TimeInterval, boundaryTimes: [Foundation.NSValue], boundaryHandler: @escaping (CoreMedia.CMTime) -> Swift.Void, totalDuration: Foundation.TimeInterval, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func stopVideoCapturing(cancel: Swift.Bool)
}
extension BanubaCameraModule : BanubaVideoEditorSDK.SDKEffectsServicing {
  public func loadMask(name: Swift.String)
  public func unloadMask()
  public func removeAllFilters()
  public func applyFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  public func removeFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  public func setEffectSubtypeModificationsEventListener(_ listener: BanubaVideoEditorSDK.EffectSubtypeModificationsEventListener)
  public func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
}
extension BanubaCameraModule : BanubaVideoEditorSDK.SDKBeautyEffectManaging {
  public var isBeatificationEnabled: Swift.Bool {
    get
    set
  }
  public func toggleBeautification() -> Swift.Bool
}
extension BanubaCameraModule : BanubaSdk.BanubaSdkManagerDelegate {
  @objc dynamic public func willOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
  @objc dynamic public func willOutput(arFrame: ARKit.ARFrame)
  @objc dynamic public func willPresentFramebuffer(renderSize: CoreGraphics.CGSize)
}
extension BanubaCameraModule : BanubaVideoEditorSDK.SDKMaskPostprocessServicing {
  public func postprocessProcessVideoFrame(_ from: CoreVideo.CVPixelBuffer, to: CoreVideo.CVPixelBuffer, time: CoreMedia.CMTime)
  public func postprocessStopVideoProcessing()
  public func postprocessPlaybackStop()
  public func postprocessSurfaceDestroyed()
  public func postprocessSurfaceCreated(with size: CoreGraphics.CGSize)
  public func postprocessSetEffectSize(_ size: CoreGraphics.CGSize)
  public func postprocessLoadEffect(path: Swift.String)
  public func postprocessStartVideoProcessing(with size: CoreGraphics.CGSize)
  public func postprocessDraw()
}
extension BanubaCameraModule : BanubaEffectPlayer.BNBEffectEventListener {
  @objc dynamic public func onEffectEvent(_ name: Swift.String, params: [Swift.String : Swift.String])
}
final public class ApplicationInformation {
  required public init(bundle: Foundation.Bundle)
  final public var version: Swift.String {
    get
  }
  final public var build: Swift.String {
    get
  }
  final public var fullVersion: Swift.String {
    get
  }
  @objc deinit
}
public enum AudioWriterStatus {
  case prepare
  case ready
  case capturing
  case completed
  case failed
  public static func == (a: BanubaVideoEditorSDK.AudioWriterStatus, b: BanubaVideoEditorSDK.AudioWriterStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol AudioWriterDelegate : BanubaMusicEditorSDK.AudioWriterAdoptableDelegate {
  func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFailWithError error: Swift.Error)
  func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFinishRecording successful: Swift.Bool)
  func audioWriterDidStartRecording(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable)
}
@objc public class AudioWriter : ObjectiveC.NSObject, BanubaMusicEditorSDK.AudioWriterAdoptable {
  weak public var delegate: BanubaMusicEditorSDK.AudioWriterAdoptableDelegate?
  public var fileUrl: Foundation.URL?
  required public init(file url: Foundation.URL?)
  @objc deinit
  public func deleteAudioRecording()
  public func setAudioCategory(_ category: AVFoundation.AVAudioSession.Category)
  public func resetAudioWriter()
  public func setupUrl(file url: Foundation.URL)
  public func prepare()
  public func startCapturing(forDuration duration: Foundation.TimeInterval?)
  public func stopCapturing()
  @objc override dynamic public init()
}
extension AudioWriter : AVFoundation.AVAudioRecorderDelegate {
  @objc dynamic public func audioRecorderEncodeErrorDidOccur(_ recorder: AVFoundation.AVAudioRecorder, error: Swift.Error?)
  @objc dynamic public func audioRecorderDidFinishRecording(_ recorder: AVFoundation.AVAudioRecorder, successfully flag: Swift.Bool)
}
@objc public protocol BanubaVideoEditorDelegate {
  @objc func videoEditorDidCancel(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
  @objc func videoEditorDone(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
}
@objc public class BanubaVideoEditor : ObjectiveC.NSObject {
  @objc weak public var delegate: BanubaVideoEditorSDK.BanubaVideoEditorDelegate?
  @objc public var videoEditorDidCancel: ((BanubaVideoEditorSDK.BanubaVideoEditor) -> Swift.Void)?
  @objc public var videoEditorDone: ((BanubaVideoEditorSDK.BanubaVideoEditor) -> Swift.Void)?
  @objc public var sdk: BanubaVideoEditorSDK.SDKService {
    @objc get
  }
  @objc public var musicMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? {
    @objc get
  }
  @objc public var metadata: BanubaVideoEditorSDK.VideoEditorMetadata? {
    @objc get
  }
  @objc public var asset: AVFoundation.AVAsset? {
    @objc get
  }
  public var musicTrack: VideoEditor.MediaTrack? {
    get
  }
  @objc public var imageGenerator: AVFoundation.AVAssetImageGenerator? {
    @objc get
  }
  @objc public var currentConfiguration: BanubaVideoEditorSDK.VideoEditorConfig {
    @objc get
  }
  @objc public init(token: Swift.String, effectsToken: Swift.String, cloudMasksToken: Swift.String? = nil, configuration: BanubaVideoEditorSDK.VideoEditorConfig)
  @objc deinit
  @objc public func exportVideo(fileUrl: Foundation.URL, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc public func exportVideoWithCoverImage(fileUrl: Foundation.URL, completion: @escaping (Swift.Bool, Swift.Error?, UIKit.UIImage) -> Swift.Void)
  @objc public func exportVideos(using configurations: [BanubaVideoEditorSDK.ExportVideoConfiguration], completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc public func exportVideosWithCoverImage(using configurations: [BanubaVideoEditorSDK.ExportVideoConfiguration], completion: @escaping ((Swift.Bool, Swift.Error?, UIKit.UIImage) -> Swift.Void))
  @objc public func exportAudio(fileUrl: Foundation.URL, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc public func clearSessionData()
  @objc public func dismissVideoEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc public func presentVideoEditor(from hostController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func presentVideoEditor(withVideoItems videoItems: [Foundation.URL], from hostController: UIKit.UIViewController, animated: Swift.Bool, musicTrack: VideoEditor.MediaTrack? = nil, completion: (() -> Swift.Void)?)
  @objc public func updateVideoEditorConfig(_ config: BanubaVideoEditorSDK.VideoEditorConfig)
  @objc override dynamic public init()
}
public protocol EffectSubtypeModificationsEventListener : AnyObject {
  func didChangeEffectSubtype(_ subtypeName: Swift.String)
  func didInitiateEffectSubtype(_ subtypeName: Swift.String)
}
public protocol SDKEffectsServicing : AnyObject {
  func loadMask(name: Swift.String)
  func unloadMask()
  func removeAllFilters()
  func applyFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  func removeFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  func setEffectSubtypeModificationsEventListener(_ listener: BanubaVideoEditorSDK.EffectSubtypeModificationsEventListener)
  func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
}
public class TextEditSelectionBorderAnimationBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let defaultBorderWidth: CoreGraphics.CGFloat
  final public let selectedBorderWidth: CoreGraphics.CGFloat
  public init(defaultBorderWidth: CoreGraphics.CGFloat, selectedBorderWidth: CoreGraphics.CGFloat)
  @objc public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CountdownView : UIKit.UIView, BanubaVideoEditorSDK.CountdownTimerAnimatableView {
  public var font: UIKit.UIFont {
    get
    set
  }
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
extension CountdownView {
  @objc dynamic public var countdownDigit: Swift.Int {
    @objc get
    @objc set
  }
  public var digitColor: UIKit.UIColor {
    get
    set
  }
  @objc dynamic public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func stop()
}
public enum CameraAlertType {
  case deleteSegment
  case discardFilters
  case discardChanges
  case discardEffects
  case noCameraAndMicrophonePermissions
  case cameraAccessRestricted
  case noMicrophonePermissions
  case noGalleryPermissions
  case notFinishedVideo
  case discardAll
  case discardSlideshow
  public var message: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  public var actionTitle: Swift.String {
    get
  }
  public var actionStyle: UIKit.UIAlertAction.Style {
    get
  }
  public var cancelActionTitle: Swift.String {
    get
  }
  public static func == (a: BanubaVideoEditorSDK.CameraAlertType, b: BanubaVideoEditorSDK.CameraAlertType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UIViewController {
  public func presentAlert(type: BanubaVideoEditorSDK.CameraAlertType, completion: ((Swift.Bool) -> Swift.Void)?)
}
public protocol SDKCameraChangedDelegate : AnyObject {
  func sdkDidChangeCamera(cameraStartedCompletion: (() -> Swift.Void)?)
  func sdkWillChangeCamera()
}
public protocol SDKServicing : AnyObject {
  var isLoaded: Swift.Bool { get }
  var metadataService: BanubaVideoEditorSDK.VideoMetadataStorage { get }
  var inputService: BanubaVideoEditorSDK.SDKInputServicing { get }
  var outputService: BanubaVideoEditorSDK.SDKOutputServicing { get }
  var editorSequenceService: VideoEditor.VideoSequenceServicing { get }
  var effectsService: BanubaVideoEditorSDK.SDKEffectsServicing { get }
  var videoEditorService: VideoEditor.VideoEditorService { get }
  var beautyManager: BanubaVideoEditorSDK.SDKBeautyEffectManaging { get }
  var audioService: BanubaVideoEditorSDK.AudioServicing { get }
  var playerViewSize: CoreGraphics.CGSize { get }
  var autoStart: Swift.Bool { get set }
  var allowProcessing: Swift.Bool { get set }
  var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed { get set }
  var isARCameraSupported: Swift.Bool { get }
  var cameraChangedDelegate: BanubaVideoEditorSDK.SDKCameraChangedDelegate? { get set }
  func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
  func setup()
  func destroy()
  func start(completion: @escaping () -> Swift.Void)
  func stop()
  func stop(completion: (() -> Swift.Void)?)
  func applyFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  func removeFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  func removeAllFilters()
  func loadMask(name: Swift.String)
  func unloadMask()
  func setRenderTarget(view: UIKit.UIView)
  func removeRenderTarget()
  func toggleBeautification() -> Swift.Bool
  func discardAppliedChanges()
  func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
  func getRendererView() -> UIKit.UIView
  func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  func replaceCamera(_ camera: BanubaVideoEditorSDK.CameraModule, completion: (() -> Swift.Void)?)
}
@objc public class SDKService : ObjectiveC.NSObject, BanubaVideoEditorSDK.SDKServicing {
  weak public var cameraChangedDelegate: BanubaVideoEditorSDK.SDKCameraChangedDelegate?
  public var metadataService: BanubaVideoEditorSDK.VideoMetadataStorage
  public var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed
  public var isARCameraSupported: Swift.Bool {
    get
  }
  public var allowProcessing: Swift.Bool {
    get
    set
  }
  public var isLoaded: Swift.Bool {
    get
  }
  public var beautyManager: BanubaVideoEditorSDK.SDKBeautyEffectManaging {
    get
  }
  public var inputService: BanubaVideoEditorSDK.SDKInputServicing {
    get
  }
  public var outputService: BanubaVideoEditorSDK.SDKOutputServicing {
    get
  }
  public var editorSequenceService: VideoEditor.VideoSequenceServicing {
    get
  }
  public var effectsService: BanubaVideoEditorSDK.SDKEffectsServicing {
    get
  }
  public var videoEditorService: VideoEditor.VideoEditorService {
    get
  }
  public var audioService: BanubaVideoEditorSDK.AudioServicing {
    get
  }
  public var autoStart: Swift.Bool {
    get
    set
  }
  public var playerViewSize: CoreGraphics.CGSize {
    get
  }
  required public init(cameraModule: BanubaVideoEditorSDK.CameraModule)
  public func setup()
  public func destroy()
  public func start(completion: @escaping () -> Swift.Void)
  public func stop()
  public func stop(completion: (() -> Swift.Void)?)
  public func applyFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  public func removeFilter(_ filter: BanubaVideoEditorSDK.EffectModel)
  public func removeAllFilters()
  public func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  public func loadMask(name: Swift.String)
  public func unloadMask()
  public func setRenderTarget(view: UIKit.UIView)
  public func removeRenderTarget()
  public func toggleBeautification() -> Swift.Bool
  public func discardAppliedChanges()
  public func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
  public func getRendererView() -> UIKit.UIView
  public func replaceCamera(_ camera: BanubaVideoEditorSDK.CameraModule, completion: (() -> Swift.Void)?)
  public func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
  @objc deinit
  @objc override dynamic public init()
}
extension SDKService : BanubaVideoEditorSDK.SDKMaskPostprocessServicing {
  public func postprocessProcessVideoFrame(_ from: CoreVideo.CVPixelBuffer, to: CoreVideo.CVPixelBuffer, time: CoreMedia.CMTime)
  public func postprocessStopVideoProcessing()
  public func postprocessPlaybackStop()
  public func postprocessSurfaceDestroyed()
  public func postprocessSurfaceCreated(with size: CoreGraphics.CGSize)
  public func postprocessSetEffectSize(_ size: CoreGraphics.CGSize)
  public func postprocessLoadEffect(path: Swift.String)
  public func postprocessStartVideoProcessing(with size: CoreGraphics.CGSize)
  public func postprocessDraw()
}
public protocol CountdownTimerViewFactory {
  func makeCountdownTimerView() -> BanubaVideoEditorSDK.CountdownTimerAnimatableView
}
@objc public class ColorPair : ObjectiveC.NSObject {
  @objc final public let background: UIKit.UIColor
  @objc final public let foreground: UIKit.UIColor
  @objc public init(background: UIKit.UIColor, foreground: UIKit.UIColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class VideoTextColorPair : ObjectiveC.NSObject {
  @objc final public let foreground: BanubaVideoEditorSDK.ColorPair
  @objc final public let background: BanubaVideoEditorSDK.ColorPair
  @objc convenience public init(color0: UIKit.UIColor, color1: UIKit.UIColor, color2: UIKit.UIColor, color3: UIKit.UIColor)
  @objc public init(foreground: BanubaVideoEditorSDK.ColorPair, background: BanubaVideoEditorSDK.ColorPair)
  public static func == (lhs: BanubaVideoEditorSDK.VideoTextColorPair, rhs: BanubaVideoEditorSDK.VideoTextColorPair) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public class VideoTextFont : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont?
  @objc public var name: Swift.String
  @objc public init(font: UIKit.UIFont?, name: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct GiphyImage {
  public let id: Swift.String
  public let url: Foundation.URL
  public let width: Swift.Int
  public let height: Swift.Int
}
public enum DeviceModel : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPad2, iPad3, iPad4, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPadMini1, iPadMini2, iPadMini3, iPadAir1, iPadAir2, iPadPro9_7, iPadPro9_7_cell, iPadPro10_5, iPadPro10_5_cell, iPadPro12_9, iPadPro12_9_cell, iPhone6, iPhone6plus, iPhone6S, iPhone6Splus, iPhoneSE, iPhone7, iPhone7plus, iPhone8, iPhone8plus, iPhoneX, iPhoneXS, iPhoneXSmax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2ndGen, iPhone12, iPhone12Mini, iPhone12Pro, iPhone12ProMax, unrecognized
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: BanubaVideoEditorSDK.DeviceModel {
    get
  }
}
@frozen public enum CameraModuleSessionType {
  case frontVideo
  case backVideo
  case frontPhoto
  case backPhoto
  public static func == (a: BanubaVideoEditorSDK.CameraModuleSessionType, b: BanubaVideoEditorSDK.CameraModuleSessionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct CameraModulePhotoSettings {
  public let useStabilization: Swift.Bool
  public let flashMode: AVFoundation.AVCaptureDevice.FlashMode
  public init(useStabilization: Swift.Bool, flashMode: AVFoundation.AVCaptureDevice.FlashMode)
}
public struct CameraModuleDefaults {
  public static var viewSize: CoreGraphics.CGSize {
    get
  }
}
public protocol CameraModule : BanubaVideoEditorSDK.SDKBeautyEffectManaging, BanubaVideoEditorSDK.SDKEffectsServicing, BanubaVideoEditorSDK.SDKInputServicing, BanubaVideoEditorSDK.SDKMaskPostprocessServicing, BanubaVideoEditorSDK.SDKOutputServicing {
  var isLoaded: Swift.Bool { get }
  var allowProcessing: Swift.Bool { get set }
  var playerViewSize: CoreGraphics.CGSize { get }
  var autoStart: Swift.Bool { get set }
  func setup(postproccessContext: OpenGLES.EAGLContext)
  func destroy()
  func start(completion: @escaping () -> Swift.Void)
  func stop(completion: (() -> Swift.Void)?)
  func setRenderTarget(view: UIKit.UIView)
  func removeRenderTarget()
  func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  func getRendererView() -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers public class SlideInPresentationManager : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  public init(coverPercentage: CoreGraphics.CGFloat, panToDismiss: Swift.Bool)
  public init(coverHeight: CoreGraphics.CGFloat, panToDismiss: Swift.Bool)
  @objc public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @objc public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc public func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GIFPickerDataLoadingViewController : UIKit.UIViewController {
  public var loadingIndicator: BanubaVideoEditorSDK.VideoEditorActivityIndicator?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func startAnimating()
  public func stopAnimating()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol TimelineAdoptable : AnyObject {
  var timelineDataSource: BanubaVideoEditorSDK.TimelineDataSource? { get set }
}
public class TextEditSelectionBorderRoundingBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let selectionLineWidth: CoreGraphics.CGFloat
  final public let selectionLineColor: UIKit.UIColor
  final public let selectionLinePadding: CoreGraphics.CGFloat
  required public init(selectionLineWidth: CoreGraphics.CGFloat, selectionLineColor: UIKit.UIColor, selectionLinePadding: CoreGraphics.CGFloat)
  @objc public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, a: CoreGraphics.CGFloat = 1.0)
  convenience public init(rgb: Swift.Int, a: CoreGraphics.CGFloat = 1.0)
}
public class VideoEditorEffectDrawer : VideoEditor.CompositionRenderering {
  public var renderer: BanubaVideoEditorSDK.EffectRenderer? {
    get
  }
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, effect: VideoEditor.EditorCompositionEffectProtocol)
  @objc deinit
}
public enum CameraNotificationType {
  case firstPartNotRecorded
  case secondPartIsTooShort
  case videoIsTooShort
  case flashlightOn
  case beautifyerOn
  case beautifyerOff
  case activateTimer(duration: Swift.Int, activate: Swift.Bool)
  case galleryReceiveFromiCloud
  case galleryReceiveError(Swift.Error)
  case maskNotLoaded
  public var message: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VideoEditorConfig : ObjectiveC.NSObject {
  @objc public var videoResolutionConfiguration: VideoEditor.VideoResolutionConfiguration
  @objc public var recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration
  @objc public var editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration
  @objc public var singleTrimConfiguration: BanubaVideoEditorSDK.SingleTrimConfiguration
  @objc public var textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration
  @objc public var toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration
  @objc public var fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration
  @objc public var smallActivityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public var albumsConfiguration: BanubaVideoEditorSDK.AlbumsConfiguration
  @objc public var videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration
  @objc public var videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig
  @objc public var gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration
  @objc public var combinedGalleryConfiguration: BanubaVideoEditorSDK.CombinedGalleryConfiguration
  @objc public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration?
  @objc public var galleryConfiguration: BanubaVideoEditorSDK.GalleryConfiguration
  @objc public var trimGalleryVideoConfiguration: BanubaVideoEditorSDK.TrimGalleryVideoConfiguration
  @objc public var filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration
  @objc public var videoCoverSelectionConfiguration: BanubaVideoEditorSDK.SimpleVideoCoverSelectionConfiguration
  @objc public var extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  @objc public var musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig
  @objc public var overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration
  @objc public var multiTrimConfiguration: BanubaVideoEditorSDK.MultiTrimConfiguration
  @objc public var watermarkConfiguration: BanubaVideoEditorSDK.WatermarkConfiguration?
  @objc public var speedSelectionConfiguration: BanubaVideoEditorSDK.SpeedSelectionConfiguration
  @objc public var alertViewConfiguration: BanubaVideoEditorSDK.AlertViewConfiguration
  @objc public var handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?
  @objc public var featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration
  @objc public var isHandfreeEnabled: Swift.Bool
  @objc convenience override dynamic public init()
  @objc public init(videoResolutionConfiguration: VideoEditor.VideoResolutionConfiguration, recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration, editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration, singleTrimConfiguration: BanubaVideoEditorSDK.SingleTrimConfiguration, textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration, toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration, fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration, smallActivityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration, albumsConfiguration: BanubaVideoEditorSDK.AlbumsConfiguration, videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration, videoDurationConfiguration: BanubaVideoEditorSDK.VideoEditorDurationConfig, gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration, combinedGalleryConfiguration: BanubaVideoEditorSDK.CombinedGalleryConfiguration, trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration, galleryConfiguration: BanubaVideoEditorSDK.GalleryConfiguration, trimGalleryVideoConfiguration: BanubaVideoEditorSDK.TrimGalleryVideoConfiguration, filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration, videoCoverSelectionConfiguration: BanubaVideoEditorSDK.SimpleVideoCoverSelectionConfiguration, extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration, musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig, overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration, featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration, multiTrimConfiguration: BanubaVideoEditorSDK.MultiTrimConfiguration, watermarkConfiguration: BanubaVideoEditorSDK.WatermarkConfiguration?, speedSelectionConfiguration: BanubaVideoEditorSDK.SpeedSelectionConfiguration, alertViewConfiguration: BanubaVideoEditorSDK.AlertViewConfiguration, handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?)
  @objc public func applyFont(_ font: UIKit.UIFont)
  @objc public func updateAlertFonts(_ font: UIKit.UIFont)
  @objc public func updateRecorderFonts(_ font: UIKit.UIFont)
  @objc public func updateMultiTrimFonts(_ font: UIKit.UIFont)
  @objc public func updateEditorFonts(_ font: UIKit.UIFont)
  @objc public func updateSingleTrimFonts(_ font: UIKit.UIFont)
  @objc public func updateToastFonts(_ font: UIKit.UIFont)
  @objc public func updateFullScreenActivityFonts(_ font: UIKit.UIFont)
  @objc public func updateAlbumsFonts(_ font: UIKit.UIFont)
  @objc public func updateTextEditorFonts(_ font: UIKit.UIFont)
  @objc public func updateSlideShowFonts(_ font: UIKit.UIFont)
  @objc public func updateGalleryFonts(_ font: UIKit.UIFont)
  @objc public func updateTrimGalleryVideoFonts(_ font: UIKit.UIFont)
  @objc public func updateFilterFonts(_ font: UIKit.UIFont)
  @objc public func updateVideoCoverSelectionFonts(_ font: UIKit.UIFont)
  @objc public func updateFeatureConfiguration(featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration)
  @objc deinit
}
@objc public class VideoEditorDurationConfig : ObjectiveC.NSObject {
  @objc public var maximumVideoDuration: Foundation.TimeInterval
  @objc public var minimumDurationFromCamera: Foundation.TimeInterval
  @objc public var minimumDurationFromGallery: Foundation.TimeInterval
  @objc public var minimumVideoDuration: Foundation.TimeInterval
  @objc public var minimumTrimmedPartDuration: Foundation.TimeInterval
  @objc public var minimumRecordingTimeToPlayCountdownAnimation: Foundation.TimeInterval
  @objc public init(maximumVideoDuration: Foundation.TimeInterval = 60.0, minimumDurationFromCamera: Foundation.TimeInterval = 3.0, minimumDurationFromGallery: Foundation.TimeInterval = 3.0, minimumVideoDuration: Foundation.TimeInterval = 3.0, minimumTrimmedPartDuration: Foundation.TimeInterval = 2.0, minimumRecordingTimeToPlayCountdownAnimation: Foundation.TimeInterval = 10.0)
  @objc public func isValidMaxDurationWithTolerance(_ duration: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TextEditorConfiguration : ObjectiveC.NSObject {
  @objc public var doneButton: BanubaVideoEditorSDK.RoundedButtonConfiguration
  @objc public var fontButton: BanubaVideoEditorSDK.RoundedButtonConfiguration
  @objc public var textBackgroundButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var alignmentImages: Foundation.NSDictionary
  @objc public var palette: [BanubaVideoEditorSDK.VideoTextColorPair]
  @objc public var fonts: [BanubaVideoEditorSDK.VideoTextFont]
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public var palleteInsets: UIKit.UIEdgeInsets
  @objc public var selectionColorBehavior: BanubaVideoEditorSDK.TextEditSelectionColorBehavior
  @objc public var colorItemConfiguration: BanubaVideoEditorSDK.TextEditColorItemConfiguration
  @objc public init(doneButton: BanubaVideoEditorSDK.RoundedButtonConfiguration, fontButton: BanubaVideoEditorSDK.RoundedButtonConfiguration, textBackgroundButton: BanubaVideoEditorSDK.ImageButtonConfiguration, alignmentImages: Foundation.NSDictionary, palette: [BanubaVideoEditorSDK.VideoTextColorPair], fonts: [BanubaVideoEditorSDK.VideoTextFont], backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, palleteInsets: UIKit.UIEdgeInsets, selectionColorBehavior: BanubaVideoEditorSDK.TextEditSelectionColorBehavior, colorItemConfiguration: BanubaVideoEditorSDK.TextEditColorItemConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TextEditColorItemConfiguration : ObjectiveC.NSObject {
  @objc public var borderColor: UIKit.UIColor
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public init(borderColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class VideoOverlayConfiguration : ObjectiveC.NSObject {
  @objc public var deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  @objc deinit
  @objc override dynamic public init()
}
@objc public class FullScreenActivityConfiguration : ObjectiveC.NSObject {
  @objc public var labelFont: UIKit.UIFont
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var activityEffectsViewAlpha: CoreGraphics.CGFloat
  @objc public var activityIndicator: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public init(labelFont: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, activityEffectsViewAlpha: CoreGraphics.CGFloat, activityIndicator: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class RecorderConfiguration : ObjectiveC.NSObject {
  @objc public var videoResolution: VideoEditor.VideoResolutionConfiguration
  @objc public var saveButton: BanubaVideoEditorSDK.SaveButtonConfiguration?
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var removeButtonImageName: Swift.String
  @objc public var progressLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration?
  @objc public var floatingLineViewConfiguration: BanubaVideoEditorSDK.TextConfiguration?
  @objc public var captureButtonMode: BanubaVideoEditorSDK.CaptureButtonMode
  @objc public var recordButtonConfiguration: BanubaVideoEditorSDK.RecordButtonConfiguration
  @objc public var recordButtonProvider: BanubaVideoEditorSDK.VideoEditorCaptureButtonProvider?
  @objc public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  @objc public var speedButton: BanubaVideoEditorSDK.SpeedButtonConfiguration
  @objc public var galleryButton: BanubaVideoEditorSDK.RoundedButtonConfiguration
  @objc public var emptyGalleryImageName: Swift.String
  @objc public var timerConfiguration: BanubaVideoEditorSDK.TimerConfiguration
  @objc public var timeLineConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  @objc public var regularRecordButtonPosition: CoreGraphics.CGFloat
  @objc public var recorderEffectsConfiguration: BanubaVideoEditorSDK.RecorderEffectsConfiguration
  @objc public var leftControlsBottomOffsetFromCaptureButton: CoreGraphics.CGFloat
  @objc public var leftControlsLeftOffset: CoreGraphics.CGFloat
  @objc public var sequenceHeight: CoreGraphics.CGFloat
  @objc public var useHorizontalVersion: Swift.Bool
  @objc public var loopAudioWhileRecording: Swift.Bool
  @objc public var takeAudioDurationAsMaximum: Swift.Bool
  @objc public var isDynamicMusicTitle: Swift.Bool
  @objc public var isDefaultFrontCamera: Swift.Bool
  @objc public var isMusicTitleFloatingLineEnabled: Swift.Bool
  @objc public init(videoResolution: VideoEditor.VideoResolutionConfiguration, saveButton: BanubaVideoEditorSDK.SaveButtonConfiguration? = nil, backButton: BanubaVideoEditorSDK.BackButtonConfiguration, removeButtonImageName: Swift.String, progressLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration?, floatingLineViewConfiguration: BanubaVideoEditorSDK.TextConfiguration?, captureButtonMode: BanubaVideoEditorSDK.CaptureButtonMode, recordButtonConfiguration: BanubaVideoEditorSDK.RecordButtonConfiguration, recordButtonProvider: BanubaVideoEditorSDK.VideoEditorCaptureButtonProvider? = nil, additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration], speedButton: BanubaVideoEditorSDK.SpeedButtonConfiguration, galleryButton: BanubaVideoEditorSDK.RoundedButtonConfiguration, emptyGalleryImageName: Swift.String, timerConfiguration: BanubaVideoEditorSDK.TimerConfiguration, timeLineConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration, regularRecordButtonPosition: CoreGraphics.CGFloat, recorderEffectsConfiguration: BanubaVideoEditorSDK.RecorderEffectsConfiguration, leftControlsBottomOffsetFromCaptureButton: CoreGraphics.CGFloat, leftControlsLeftOffset: CoreGraphics.CGFloat, sequenceHeight: CoreGraphics.CGFloat, useHorizontalVersion: Swift.Bool, loopAudioWhileRecording: Swift.Bool, takeAudioDurationAsMaximum: Swift.Bool, isDynamicMusicTitle: Swift.Bool, isDefaultFrontCamera: Swift.Bool, isMusicTitleFloatingLineEnabled: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class RecordButtonConfiguration : ObjectiveC.NSObject {
  @objc public var idleStrokeColor: CoreGraphics.CGColor
  @objc public var strokeColor: CoreGraphics.CGColor
  @objc public var gradientColors: Foundation.NSArray
  @objc public var circularTimeLineIdleWidth: CoreGraphics.CGFloat
  @objc public var circularTimeLineCaptureWidth: CoreGraphics.CGFloat
  @objc public var normalImageName: Swift.String
  @objc public var recordImageName: Swift.String
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var recordingScale: CoreGraphics.CGFloat
  @objc public init(idleStrokeColor: CoreGraphics.CGColor, strokeColor: CoreGraphics.CGColor, gradientColors: Foundation.NSArray, circularTimeLineIdleWidth: CoreGraphics.CGFloat, circularTimeLineCaptureWidth: CoreGraphics.CGFloat, normalImageName: Swift.String, recordImageName: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, recordingScale: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class SingleTrimConfiguration : ObjectiveC.NSObject {
  @objc public var saveButton: BanubaVideoEditorSDK.SaveButtonConfiguration
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var rotateButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
  @objc public var throbber: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  @objc public var trimTimeLineHeight: CoreGraphics.CGFloat
  @objc public var playerControlConfiguration: BanubaVideoEditorSDK.PlayerControlConfiguration
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public var editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration
  @objc deinit
  @objc override dynamic public init()
}
@objc public class MultiTrimConfiguration : ObjectiveC.NSObject {
  @objc public var saveButton: BanubaVideoEditorSDK.SaveButtonConfiguration
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var rotateButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
  @objc public var timeLimeConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  @objc public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  @objc public var trimTimeLineHeight: CoreGraphics.CGFloat
  @objc public var playerControlConfiguration: BanubaVideoEditorSDK.PlayerControlConfiguration
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var bottomViewBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public var trimSequenceEdgeInsets: UIKit.UIEdgeInsets
  @objc public var trimSequenceHeight: CoreGraphics.CGFloat
  @objc public var editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration
  @objc public init(saveButton: BanubaVideoEditorSDK.SaveButtonConfiguration, backButton: BanubaVideoEditorSDK.BackButtonConfiguration, rotateButton: BanubaVideoEditorSDK.ImageButtonConfiguration?, timeLimeConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration, trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration, trimTimeLineHeight: CoreGraphics.CGFloat, playerControlConfiguration: BanubaVideoEditorSDK.PlayerControlConfiguration, backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, bottomViewBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, trimSequenceEdgeInsets: UIKit.UIEdgeInsets, trimSequenceHeight: CoreGraphics.CGFloat, editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TimeLineConfiguration : ObjectiveC.NSObject {
  @objc public var isTimeLineHidden: Swift.Bool
  @objc public var timeLineBackgroundColor: UIKit.UIColor
  @objc public var progressBarColor: UIKit.UIColor
  @objc public var progressBarSelectColor: UIKit.UIColor
  @objc public var itemsCornerRadius: CoreGraphics.CGFloat
  @objc public var separatorWidth: CoreGraphics.CGFloat
  @objc public var separatorColor: UIKit.UIColor
  @objc public var isDynamicProgressBar: Swift.Bool
  @objc public init(isTimeLineHidden: Swift.Bool, timeLineBackgroundColor: UIKit.UIColor, progressBarColor: UIKit.UIColor, progressBarSelectColor: UIKit.UIColor, itemsCornerRadius: CoreGraphics.CGFloat, separatorWidth: CoreGraphics.CGFloat, separatorColor: UIKit.UIColor, isDynamicProgressBar: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TrimTimeLineConfiguration : ObjectiveC.NSObject {
  @objc public var maxColor: UIKit.UIColor
  @objc public var defaultColor: UIKit.UIColor
  @objc public var trimControlsColor: UIKit.UIColor
  @objc public var cursorColor: UIKit.UIColor
  @objc public var draggersLineColor: UIKit.UIColor
  @objc public var draggersCornerRadius: CoreGraphics.CGFloat
  @objc public var draggersLineWidth: CoreGraphics.CGFloat
  @objc public var draggersLineHeight: CoreGraphics.CGFloat
  @objc public var numberOfLinesInDraggers: Swift.Int
  @objc public var draggerLinesSpacing: CoreGraphics.CGFloat
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public var draggersLineCornerRadius: CoreGraphics.CGFloat
  @objc public var cancelButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var doneButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var draggerImageName: Swift.String?
  @objc public var draggerWidth: CoreGraphics.CGFloat
  @objc public var timelineTopBottomInset: CoreGraphics.CGFloat
  @objc public var videoResolution: VideoEditor.VideoResolutionConfiguration
  @objc public init(maxColor: UIKit.UIColor, defaultColor: UIKit.UIColor, trimControlsColor: UIKit.UIColor, cursorColor: UIKit.UIColor, draggersLineColor: UIKit.UIColor, draggersCornerRadius: CoreGraphics.CGFloat, draggersLineWidth: CoreGraphics.CGFloat, draggersLineHeight: CoreGraphics.CGFloat, numberOfLinesInDraggers: Swift.Int, draggerLinesSpacing: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat, draggersLineCornerRadius: CoreGraphics.CGFloat, cancelButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration, doneButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration, draggerImageName: Swift.String? = nil, draggerWidth: CoreGraphics.CGFloat, timelineTopBottomInset: CoreGraphics.CGFloat, videoResolution: VideoEditor.VideoResolutionConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class EditorConfiguration : ObjectiveC.NSObject {
  @objc public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  @objc public var additionalEffectsButtonsBottomOffset: CoreGraphics.CGFloat
  @objc public var videoResolution: VideoEditor.VideoResolutionConfiguration
  @objc public var saveButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var isVideoCoverSelectionEnabled: Swift.Bool
  @objc public var useHorizontalVersion: Swift.Bool
  @objc public init(additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration], additionalEffectsButtonsBottomOffset: CoreGraphics.CGFloat, videoResolution: VideoEditor.VideoResolutionConfiguration, saveButton: BanubaVideoEditorSDK.BanubaButtonConfiguration, backButton: BanubaVideoEditorSDK.BackButtonConfiguration, isVideoCoverSelectionEnabled: Swift.Bool, useHorizontalVersion: Swift.Bool, isShortAlertMessageEnabled: Swift.Bool, isScannerModeEnabled: Swift.Bool, isARCameraEnabled: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class AlbumsConfiguration : ObjectiveC.NSObject {
  @objc public var textButton: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public init(textButton: BanubaVideoEditorSDK.TextButtonConfiguration, backButton: BanubaVideoEditorSDK.BackButtonConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class CombinedGalleryConfiguration : ObjectiveC.NSObject {
  @objc public var videoResolution: VideoEditor.VideoResolutionConfiguration
  @objc public var galleryItemConfiguration: BanubaVideoEditorSDK.GalleryItemConfiguration
  @objc public var closeButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var albumButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var nextButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration
  @objc public var noItemsLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var layoutConfiguration: BanubaVideoEditorSDK.GalleryLayoutConfiguration
  @objc public var topBarBlurColor: UIKit.UIColor
  @objc public var clearSelectionButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var galleryTypeButton: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var galleryTypeUnderlineColor: UIKit.UIColor
  @objc public var isVideoEnabled: Swift.Bool
  @objc public var isPhotoEnabled: Swift.Bool
  @objc public init(videoResolution: VideoEditor.VideoResolutionConfiguration, galleryItemConfiguration: BanubaVideoEditorSDK.GalleryItemConfiguration, closeButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, albumButtonConfiguration: BanubaVideoEditorSDK.TextButtonConfiguration, nextButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration, layoutConfiguration: BanubaVideoEditorSDK.GalleryLayoutConfiguration, topBarBlurColor: UIKit.UIColor, clearSelectionButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, noItemsLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration, galleryTypeButton: BanubaVideoEditorSDK.TextButtonConfiguration, galleryTypeUnderlineColor: UIKit.UIColor, isVideoEnabled: Swift.Bool, isPhotoEnabled: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class GifPickerConfiguration : ObjectiveC.NSObject {
  @objc public var regularFont: UIKit.UIFont
  @objc public var boldFont: UIKit.UIFont
  @objc public var activityConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public var cursorColor: UIKit.UIColor
  @objc public var giphyAPIKey: Swift.String?
  @objc public init(regularFont: UIKit.UIFont, boldFont: UIKit.UIFont, activityConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration, cursorColor: UIKit.UIColor, giphyAPIKey: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class GalleryItemConfiguration : ObjectiveC.NSObject {
  @objc public var orderNumberBackgroudColor: UIKit.UIColor
  @objc public var orderNumberTitleColor: UIKit.UIColor
  @objc public var backgroundSelectionIndicatorImageName: Swift.String
  @objc public var hideSelectionIndicatorBySelection: Swift.Bool
  @objc public var durationLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var durationLabelBackgroundColor: UIKit.UIColor
  @objc public var activityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public init(orderNumberBackgroudColor: UIKit.UIColor, orderNumberTitleColor: UIKit.UIColor, backgroundSelectionIndicatorImageName: Swift.String, hideSelectionIndicatorBySelection: Swift.Bool, durationLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration, durationLabelBackgroundColor: UIKit.UIColor, activityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration, cornerRadius: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class GalleryConfiguration : ObjectiveC.NSObject {
  @objc public var backButtonConfiguration: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var titleConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var noVideoFoundTitleConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var noVideoFoundSubtitleConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var multiselectButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var cancelMultiselectButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var chooseSelectionButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration
  @objc public var galleryItemConfiguration: BanubaVideoEditorSDK.GalleryItemConfiguration
  @objc public var layoutConfiguration: BanubaVideoEditorSDK.GalleryLayoutConfiguration
  @objc public init(backButtonConfiguration: BanubaVideoEditorSDK.BackButtonConfiguration, titleConfiguration: BanubaVideoEditorSDK.TextConfiguration, noVideoFoundTitleConfiguration: BanubaVideoEditorSDK.TextConfiguration, noVideoFoundSubtitleConfiguration: BanubaVideoEditorSDK.TextConfiguration, multiselectButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, cancelMultiselectButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, chooseSelectionButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration, galleryItemConfiguration: BanubaVideoEditorSDK.GalleryItemConfiguration, layoutConfiguration: BanubaVideoEditorSDK.GalleryLayoutConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class GalleryLayoutConfiguration : ObjectiveC.NSObject {
  @objc public var numberOfItemsPerRow: Swift.Int
  @objc public var interitemSpacing: CoreGraphics.CGFloat
  @objc public var edgeInsets: UIKit.UIEdgeInsets
  @objc public init(numberOfItemsPerRow: Swift.Int, interitemSpacing: CoreGraphics.CGFloat, edgeInsets: UIKit.UIEdgeInsets)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class AlertViewConfiguration : ObjectiveC.NSObject {
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var buttonRadius: CoreGraphics.CGFloat
  @objc public var refuseButtonBackgroundColor: UIKit.UIColor
  @objc public var refuseButtonTextColor: UIKit.UIColor
  @objc public var agreeButtonBackgroundColor: UIKit.UIColor
  @objc public var agreeButtonTextColor: UIKit.UIColor
  @objc public var titleAligment: UIKit.NSTextAlignment
  @objc public var titleFont: UIKit.UIFont
  @objc public var buttonsFont: UIKit.UIFont
  @objc public init(cornerRadius: CoreGraphics.CGFloat, buttonRadius: CoreGraphics.CGFloat, refuseButtonBackgroundColor: UIKit.UIColor, refuseButtonTextColor: UIKit.UIColor, agreeButtonBackgroundColor: UIKit.UIColor, agreeButtonTextColor: UIKit.UIColor, titleAligment: UIKit.NSTextAlignment, titleFont: UIKit.UIFont, buttonsFont: UIKit.UIFont)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TrimGalleryVideoConfiguration : ObjectiveC.NSObject {
  @objc public var videoResolutionConfiguration: VideoEditor.VideoResolutionConfiguration
  @objc public var activityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration
  @objc public var deleteGalleryVideoPartButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var galleryVideoPartsConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration
  @objc public var backButtonConfiguration: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var nextButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration
  @objc public var deleteToolTipLabel: BanubaVideoEditorSDK.TextConfiguration
  @objc public var playerControlConfiguration: BanubaVideoEditorSDK.PlayerControlConfiguration
  @objc public var videoPartsBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public var editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration
  @objc public init(videoResolutionConfiguration: VideoEditor.VideoResolutionConfiguration, activityIndicatorConfiguration: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration, deleteGalleryVideoPartButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, galleryVideoPartsConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration, backButtonConfiguration: BanubaVideoEditorSDK.BackButtonConfiguration, nextButtonConfiguration: BanubaVideoEditorSDK.SaveButtonConfiguration, deleteToolTipLabel: BanubaVideoEditorSDK.TextConfiguration, playerControlConfiguration: BanubaVideoEditorSDK.PlayerControlConfiguration, videoPartsBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, editedTimeLabelConfiguration: BanubaVideoEditorSDK.TimeLabelConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class FilterConfiguration : ObjectiveC.NSObject {
  @objc public var controlButtons: [BanubaVideoEditorSDK.FilterControlButtonConfig]
  @objc public var resetButton: BanubaVideoEditorSDK.RoundedButtonConfiguration
  @objc public var toolTipLabel: BanubaVideoEditorSDK.TextConfiguration
  @objc public var cursorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var timelineCornerRadius: CoreGraphics.CGFloat
  @objc public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  @objc public var timelineHeight: CoreGraphics.CGFloat
  @objc public var timelineLeftOffset: CoreGraphics.CGFloat
  @objc public var timelineRightOffset: CoreGraphics.CGFloat
  @objc public var filtersHeight: CoreGraphics.CGFloat
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public init(controlButtons: [BanubaVideoEditorSDK.FilterControlButtonConfig], resetButton: BanubaVideoEditorSDK.RoundedButtonConfiguration, toolTipLabel: BanubaVideoEditorSDK.TextConfiguration, cursorButton: BanubaVideoEditorSDK.ImageButtonConfiguration, backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, timelineCornerRadius: CoreGraphics.CGFloat, effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration, timelineHeight: CoreGraphics.CGFloat, timelineLeftOffset: CoreGraphics.CGFloat, timelineRightOffset: CoreGraphics.CGFloat, filtersHeight: CoreGraphics.CGFloat, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class SimpleVideoCoverSelectionConfiguration : ObjectiveC.NSObject {
  @objc public var cancelButton: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var doneButton: BanubaVideoEditorSDK.RoundedButtonConfiguration
  @objc public var toolTipLabel: BanubaVideoEditorSDK.TextConfiguration
  @objc public var sliderColor: UIKit.UIColor
  @objc public var sliderMinTrackTintColor: UIKit.UIColor
  @objc public var sliderMaxTrackTintColor: UIKit.UIColor
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public init(cancelButton: BanubaVideoEditorSDK.TextButtonConfiguration, doneButton: BanubaVideoEditorSDK.RoundedButtonConfiguration, toolTipLabel: BanubaVideoEditorSDK.TextConfiguration, sliderColor: UIKit.UIColor, sliderMinTrackTintColor: UIKit.UIColor, sliderMaxTrackTintColor: UIKit.UIColor, backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class HandsfreeConfiguration : ObjectiveC.NSObject {
  @objc public class TimerOptionBarConfiguration : ObjectiveC.NSObject {
    @objc public var disableOptionTitle: Swift.String
    @objc public var selectorColor: UIKit.UIColor
    @objc public var selectorTextColor: UIKit.UIColor
    @objc public var optionBackgroundColor: UIKit.UIColor
    @objc public var optionCornerRadius: CoreGraphics.CGFloat
    @objc public var optionTextColor: UIKit.UIColor
    @objc public var backgroundColor: UIKit.UIColor
    @objc public var cornerRadius: CoreGraphics.CGFloat
    @objc public var sliderCornerRadius: CoreGraphics.CGFloat
    @objc public var barCornerRadius: CoreGraphics.CGFloat
    @objc public var selectorEdgeInsets: UIKit.UIEdgeInsets
    @objc public var activeThumbAndLineColor: UIKit.UIColor
    @objc public var inactiveThumbAndLineColor: UIKit.UIColor
    @objc public var minVideoDuration: Swift.Double
    @objc public init(disableOptionTitle: Swift.String, selectorColor: UIKit.UIColor, selectorTextColor: UIKit.UIColor, optionBackgroundColor: UIKit.UIColor, optionCornerRadius: CoreGraphics.CGFloat, optionTextColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, sliderCornerRadius: CoreGraphics.CGFloat, barCornerRadius: CoreGraphics.CGFloat, selectorEdgeInsets: UIKit.UIEdgeInsets, activeThumbAndLineColor: UIKit.UIColor, inactiveThumbAndLineColor: UIKit.UIColor, minVideoDuration: Swift.Double)
    @objc deinit
    @objc override dynamic public init()
  }
  @objc public var timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
  @objc public init(timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
public protocol MusicSelectorViewControllerDelegate {
  func didSelectFile(at url: Foundation.URL, title: Swift.String, id: Swift.Int64)
  func didClearSelection()
  func didCancel()
}
public protocol MusicSelectorViewController : UIKit.UIViewController {
  var delegate: BanubaVideoEditorSDK.MusicSelectorViewControllerDelegate? { get set }
}
public protocol ExternalViewControllerFactory {
  var musicEditorFactory: BanubaMusicEditorSDK.MusicEditorExternalViewControllerFactory? { get set }
  var countdownTimerViewFactory: BanubaVideoEditorSDK.CountdownTimerViewFactory? { get set }
  var exposureViewFactory: BanubaVideoEditorSDK.AnimatableViewFactory? { get set }
}
extension UIImage {
  public static func findConfigurationImage(named: Swift.String) -> UIKit.UIImage?
}
public typealias AVAssetExportPreset = Swift.String
public enum ExportQuality {
  case preset(BanubaVideoEditorSDK.AVAssetExportPreset)
  case videoConfiguration(VideoEditor.ExportVideoInfo)
  case auto
}
@objc public class ExportVideoConfiguration : ObjectiveC.NSObject {
  final public let fileURL: Foundation.URL
  final public let watermarkConfiguration: BanubaVideoEditorSDK.WatermarkConfiguration?
  public init(fileURL: Foundation.URL, quality: BanubaVideoEditorSDK.ExportQuality, watermarkConfiguration: BanubaVideoEditorSDK.WatermarkConfiguration?)
  @objc override dynamic public init()
  @objc deinit
}
public struct RecorderAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case toggleFlash
    case changeSpeed
    case toggleCamera
    case toggleTimer
    case addFilter
    case addMask
    case changeMaskSubtype
    case toggleBeautification
    case presentMusicPicker
    case presentMaskPicker
    case presentFilterPicker
    case recordVideoPart
    case removeVideoPart
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.RecorderAnalytics.ParameterKey]? {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.RecorderAnalytics.ParameterKey
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case isFlashOn
    case recordSpeed
    case cameraType
    case timerDuration
    case filterID
    case maskID
    case musicID
    case maskSubtypeID
    case isBeautificationOn
    case recordingGesture
    case videoPartDuration
    case videoPartInfos
    case videoPartCount
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.RecorderAnalytics.EventKind>
}
public struct AnalyticsDefaults {
  public static let recorderScreenName: Swift.String
  public static let editorScreenName: Swift.String
  public static let tapGestureName: Swift.String
  public static let longTapGestureName: Swift.String
  public static let colorEffectTypeName: Swift.String
  public static let visualEffectTypeName: Swift.String
  public static let timeEffectTypeName: Swift.String
}
public struct VideoDurationDefaults {
  public static var shared: BanubaVideoEditorSDK.VideoEditorDurationConfig
}
public struct VideoImportDefaults {
  public static let maximumNumberOfVideos: Swift.Int
}
public struct VideoAspectRatio {
  public static var minFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var maxFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat> {
    get
  }
}
public protocol TimelineViewControllerDelegate : AnyObject {
  func changeVideoPosition(on time: CoreMedia.CMTime)
  func shouldPauseVideo()
}
@_hasMissingDesignatedInitializers public class EffectInterval {
  public struct IntervalRange {
    public var location: Foundation.TimeInterval
    public var length: Foundation.TimeInterval
  }
  public var range: BanubaVideoEditorSDK.EffectInterval.IntervalRange
  @objc deinit
}
@objc public class TimelineViewController : UIKit.UIViewController, BanubaVideoEditorSDK.TimelineAdoptable {
  public var cursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration?
  public var effectIntervals: [BanubaVideoEditorSDK.EffectInterval] {
    get
    set
  }
  public var currentInterval: BanubaVideoEditorSDK.EffectInterval?
  public var timelineDataSource: BanubaVideoEditorSDK.TimelineDataSource?
  weak public var delegate: BanubaVideoEditorSDK.TimelineViewControllerDelegate?
  public func setAppliedEffects(_ effects: [VideoEditor.EditorCompositionEffectProtocol])
  @objc dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  public func setTimelineTime(time: CoreMedia.CMTime)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension TimelineViewController {
  public func startInterval(at startTime: Foundation.TimeInterval, color: UIKit.UIColor, name: Swift.String?)
  public func endInterval(at endTime: Foundation.TimeInterval)
}
extension TimelineViewController : BanubaVideoEditorSDK.TimelineDataSourceDelegate {
  public func didLoadImage(_ image: UIKit.UIImage, at index: Swift.Int)
  public func didFinishThumbnailFetch()
}
@objc @_inheritsConvenienceInitializers public class PreviewVideoView : UIKit.UIImageView {
  @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  public func previewLayer() -> AVFoundation.AVPlayerLayer
  public func setPlayer(_ player: AVFoundation.AVPlayer?, isThumbnailNeeded: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol VideoMetadataStorageDelegate : AnyObject {
  func videoMetadataStorageDidStartStoring(_ videoMetadataStorage: BanubaVideoEditorSDK.VideoMetadataStoring)
}
public protocol VideoMetadataStoring {
  var colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata? { get }
  var videoEditorMetadata: BanubaVideoEditorSDK.VideoEditorMetadata? { get }
  var videoMetadata: BanubaVideoEditorSDK.VideoMetadata? { get }
  var videoEditorTrimMetadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata? { get }
  var audioTracks: [BanubaMusicEditorSDK.AudioTrackAdoptable]? { get }
  var videoCoverMetadata: BanubaVideoEditorSDK.VideoCoverMetadata? { get }
  var musicEditorMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? { get }
  var effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]? { get }
  var cameraSessionMetadata: BanubaVideoEditorSDK.CameraSessionMetadata? { get }
  var delegate: BanubaVideoEditorSDK.VideoMetadataStorageDelegate? { get set }
  func update(metadata: BanubaVideoEditorSDK.CameraSessionMetadata)
  func update(metadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata])
  func update(metadata: [BanubaMusicEditorSDK.AudioTrackAdoptable])
  func update(metadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata)
  func update(metadata: BanubaVideoEditorSDK.VideoEditorMetadata)
  func update(metadata: BanubaVideoEditorSDK.VideoMetadata)
  func update(metadata: BanubaVideoEditorSDK.ColorOnVideoMetadata)
  func update(metadata: BanubaVideoEditorSDK.VideoCoverMetadata)
  func reset()
  func resetColorOnVideoMetadata()
}
@_hasMissingDesignatedInitializers public class VideoMetadataStorage : BanubaVideoEditorSDK.VideoMetadataStoring {
  public var videoMetadata: BanubaVideoEditorSDK.VideoMetadata? {
    get
  }
  public var colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata? {
    get
  }
  public var effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]? {
    get
  }
  public var videoEditorMetadata: BanubaVideoEditorSDK.VideoEditorMetadata? {
    get
  }
  public var videoEditorTrimMetadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata? {
    get
  }
  public var audioTracks: [BanubaMusicEditorSDK.AudioTrackAdoptable]? {
    get
  }
  public var videoCoverMetadata: BanubaVideoEditorSDK.VideoCoverMetadata? {
    get
  }
  public var musicEditorMetadata: BanubaVideoEditorSDK.MusicEditorMetadata? {
    get
  }
  public var cameraSessionMetadata: BanubaVideoEditorSDK.CameraSessionMetadata? {
    get
  }
  weak public var delegate: BanubaVideoEditorSDK.VideoMetadataStorageDelegate?
  public func update(metadata: [BanubaMusicEditorSDK.AudioTrackAdoptable])
  public func update(metadata: BanubaVideoEditorSDK.CameraSessionMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoEditorTrimMetadata)
  public func update(metadata: BanubaVideoEditorSDK.ColorOnVideoMetadata)
  public func update(metadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata])
  public func update(metadata: BanubaVideoEditorSDK.VideoMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoEditorMetadata)
  public func update(metadata: BanubaVideoEditorSDK.VideoCoverMetadata)
  public func reset()
  public func resetColorOnVideoMetadata()
  @objc deinit
}
public struct ImageCroppingInfo {
  public var croppingRect: CoreGraphics.CGRect
  public var imageSize: CoreGraphics.CGSize
}
extension UIViewController {
  public func ext_addChildViewController(_ viewController: UIKit.UIViewController, toView: UIKit.UIView, addConstraints: Swift.Bool = true)
}
public protocol RecorderPresenterProtocol : AnyObject {
  func changeViewToIdleState()
  func changeViewToCaptureState()
  func updateCaptureProgress(_ progress: Swift.Double, relevantProgress: Swift.String, isUndoAction: Swift.Bool)
  func presentCountdownAnimations(with timeout: Foundation.TimeInterval, completion: @escaping (Swift.Bool) -> ())
  func dismissCountdownAnimations()
  func sequenceViewRemoveLast()
  func presentAlertAboutLowDiskSpace()
  func captureSessionDidEnd()
  func presentMessage(with text: Swift.String)
  func didStartExportPhoto()
  func didEndExportPhoto()
  func didUpdateVideoSequence()
  func didReachMaximumDuration()
}
public protocol SDKOutputServicing : AnyObject {
  var isRecording: Swift.Bool { get }
  var isEnoughDiskSpaceForRecording: Swift.Bool { get }
  func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, periodicProgressTimeInterval: Foundation.TimeInterval, boundaryTimes: [Foundation.NSValue], boundaryHandler: @escaping (CoreMedia.CMTime) -> Swift.Void, totalDuration: Foundation.TimeInterval, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  func stopVideoCapturing(cancel: Swift.Bool)
}
@objc public class TextConfiguration : ObjectiveC.NSObject {
  @objc public var kern: Swift.Double
  @objc public var font: UIKit.UIFont
  @objc public var color: UIKit.UIColor
  @objc public var alignment: UIKit.NSTextAlignment
  @objc public var text: Swift.String?
  @objc public init(kern: Swift.Double = 0, font: UIKit.UIFont, color: UIKit.UIColor, alignment: UIKit.NSTextAlignment = .center, text: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ImageConfiguration : ObjectiveC.NSObject {
  @objc public var imageName: Swift.String
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public init(imageName: Swift.String)
  @objc public init(image: UIKit.UIImage)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ImageButtonConfiguration : ObjectiveC.NSObject {
  @objc public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  @objc public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class RoundedButtonConfiguration : ObjectiveC.NSObject {
  @objc public var textConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public var borderColor: CoreGraphics.CGColor?
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public init(textConfiguration: BanubaVideoEditorSDK.TextConfiguration, cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TextButtonConfiguration : ObjectiveC.NSObject {
  @objc public var style: BanubaVideoEditorSDK.TextConfiguration
  @objc public var text: Swift.String?
  @objc public init(style: BanubaVideoEditorSDK.TextConfiguration, text: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class SaveButtonConfiguration : ObjectiveC.NSObject {
  @objc public var textConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var inactiveTextConfiguration: BanubaVideoEditorSDK.TextConfiguration
  @objc public var text: Swift.String
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var inactiveBackgroundColor: UIKit.UIColor
  @objc public init(textConfiguration: BanubaVideoEditorSDK.TextConfiguration, inactiveTextConfiguration: BanubaVideoEditorSDK.TextConfiguration, text: Swift.String, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, inactiveBackgroundColor: UIKit.UIColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class SpeedButtonConfiguration : ObjectiveC.NSObject {
  @objc public var imageNameHalf: Swift.String
  @objc public var imageNameNormal: Swift.String
  @objc public var imageNameDouble: Swift.String
  @objc public var imageNameTriple: Swift.String
  @objc public init(imageNameHalf: Swift.String, imageNameNormal: Swift.String, imageNameDouble: Swift.String, imageNameTriple: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class BackButtonConfiguration : ObjectiveC.NSObject {
  @objc public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  @objc public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public var position: BanubaVideoEditorSDK.BackButtonConfiguration.Position
  @objc public enum Position : Swift.Int {
    case left = 0
    case right = 1
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, position: BanubaVideoEditorSDK.BackButtonConfiguration.Position)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ToastConfiguration : ObjectiveC.NSObject {
  @objc public var kern: Swift.Double
  @objc public var font: UIKit.UIFont
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var textColor: UIKit.UIColor
  @objc public var backroundColor: UIKit.UIColor
  @objc public init(kern: Swift.Double, font: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, textColor: UIKit.UIColor = .white, backroundColor: UIKit.UIColor = .black)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class AdditionalEffectsButtonConfiguration : ObjectiveC.NSObject {
  @objc public enum AdditionalEffectsButtonConfigurationPosition : Swift.Int {
    case top = 100
    case bottom = 200
    case center = 300
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
    public init?(rawValue: Swift.Int)
  }
  @objc public var identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType
  @objc public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  @objc public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public var title: BanubaVideoEditorSDK.TextButtonConfiguration?
  @objc public var titlePosition: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.AdditionalEffectsButtonConfigurationPosition
  @objc public var imageTitleSpacing: CoreGraphics.CGFloat
  @objc public var defaultTitleAlpha: CoreGraphics.CGFloat
  @objc public var selectedTitleAlpha: CoreGraphics.CGFloat
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public init(identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaVideoEditorSDK.TextButtonConfiguration? = nil, titlePosition: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition = .initial, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.AdditionalEffectsButtonConfigurationPosition = .center, imageTitleSpacing: CoreGraphics.CGFloat = .zero, defaultTitleAlpha: CoreGraphics.CGFloat = 1.0, selectedTitleAlpha: CoreGraphics.CGFloat = 1.0, cornerRadius: CoreGraphics.CGFloat = .zero, backgroundColor: UIKit.UIColor = .clear)
  @objc public enum ButtonType : Swift.Int {
    case link = 0
    case color = 1
    case sticker = 2
    case text = 3
    case time = 4
    case sound = 5
    case effects = 6
    case toggle = 7
    case flashlight = 8
    case timer = 9
    case speed = 10
    case beauty = 11
    case masks = 12
    case muteSound = 13
    case interactive = 14
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
    public init?(rawValue: Swift.Int)
  }
  @objc public enum TitlePosition : Swift.Int {
    case top
    case left
    case right
    case bottom
    case initial
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol VideoEditorCaptureButtonProvider {
  @objc func getButton() -> BanubaVideoEditorSDK.VideoEditorCaptureButton?
}
@objc public class SmallActivityIndicatorConfiguration : ObjectiveC.NSObject {
  public enum GradientType {
    case color(BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration.GradientColorConfiguration)
    case image(BanubaVideoEditorSDK.ImageConfiguration)
  }
  @objc public class GradientColorConfiguration : ObjectiveC.NSObject {
    @objc public var angle: CoreGraphics.CGFloat
    @objc public var colors: Foundation.NSArray
    public init(angle: CoreGraphics.CGFloat, colors: Foundation.NSArray)
    @objc deinit
    @objc override dynamic public init()
  }
  public var gradientType: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration.GradientType
  @objc public var activityLineWidth: CoreGraphics.CGFloat
  public init(gradientType: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration.GradientType, activityLineWidth: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class WatermarkConfiguration : ObjectiveC.NSObject {
  @objc public var watermark: BanubaVideoEditorSDK.ImageConfiguration
  @objc public var size: CoreGraphics.CGSize
  @objc public var sharedOffset: CoreGraphics.CGFloat
  @objc public var position: BanubaVideoEditorSDK.WatermarkConfiguration.WatermarkPosition
  @objc public enum WatermarkPosition : Swift.Int {
    case leftTop = 0
    case leftBottom = 1
    case rightTop = 2
    case rightBottom = 3
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(watermark: BanubaVideoEditorSDK.ImageConfiguration, size: CoreGraphics.CGSize, sharedOffset: CoreGraphics.CGFloat, position: BanubaVideoEditorSDK.WatermarkConfiguration.WatermarkPosition)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class FeatureConfiguration : ObjectiveC.NSObject {
  @objc public var isAudioBrowserEnabled: Swift.Bool
  @objc public var isMusicEditorEnabled: Swift.Bool
  @objc public var isOverlayEditorEnabled: Swift.Bool
  @objc public var isDoubleTapForToggleCameraEnabled: Swift.Bool
  @objc public var isMuteCameraAudioEnabled: Swift.Bool
  @objc public var isInteractivesEnabled: Swift.Bool
  @objc public var isSimpleVideoCoverEnabled: Swift.Bool
  @objc public static let `default`: BanubaVideoEditorSDK.FeatureConfiguration
  @objc public init(isMusicEditorEnabled: Swift.Bool, isOverlayEditorEnabled: Swift.Bool, isDoubleTapForToggleCameraEnabled: Swift.Bool, isMuteCameraAudioEnabled: Swift.Bool, isInteractivesEnabled: Swift.Bool, isAudioBrowserEnabled: Swift.Bool, isSimpleVideoCoverEnabled: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class SpeedSelectionConfiguration : ObjectiveC.NSObject {
  @objc public var backButton: BanubaVideoEditorSDK.BackButtonConfiguration
  @objc public var bottomViewBackgroundColor: UIKit.UIColor
  @objc public var bottomViewCornerRadius: CoreGraphics.CGFloat
  @objc public var screenName: BanubaVideoEditorSDK.TextConfiguration
  @objc public var hideScreenName: Swift.Bool
  @objc public var speedBarConfiguration: BanubaVideoEditorSDK.SpeedSelectionConfiguration.SpeedBarConfiguration
  @objc public class SpeedBarConfiguration : ObjectiveC.NSObject {
    @objc public var selectorColor: UIKit.UIColor
    @objc public var selectorTextColor: UIKit.UIColor
    @objc public var speedItemBackgroundColor: UIKit.UIColor
    @objc public var speedItemCornerRadius: CoreGraphics.CGFloat
    @objc public var speedItemTextColor: UIKit.UIColor
    @objc public var backgroundColor: UIKit.UIColor
    @objc public var cornerRadius: CoreGraphics.CGFloat
    @objc public var selectorEdgeInsets: UIKit.UIEdgeInsets
    @objc public init(selectorColor: UIKit.UIColor, selectorTextColor: UIKit.UIColor, speedItemBackgroundColor: UIKit.UIColor, speedItemCornerRadius: CoreGraphics.CGFloat, speedItemTextColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, selectorEdgeInsets: UIKit.UIEdgeInsets)
    @objc deinit
    @objc override dynamic public init()
  }
  @objc public init(backButton: BanubaVideoEditorSDK.BackButtonConfiguration, bottomViewBackgroundColor: UIKit.UIColor, bottomViewCornerRadius: CoreGraphics.CGFloat, screenName: BanubaVideoEditorSDK.TextConfiguration, hideScreenName: Swift.Bool, speedBarConfiguration: BanubaVideoEditorSDK.SpeedSelectionConfiguration.SpeedBarConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class RecorderEffectsConfiguration : ObjectiveC.NSObject {
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  @objc public var effectsHeight: CoreGraphics.CGFloat
  @objc public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  @objc public init(cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, effectsHeight: CoreGraphics.CGFloat, effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class TimerConfiguration : ObjectiveC.NSObject {
  @objc public class TimerOptionConfiguration : ObjectiveC.NSObject {
    @objc public var button: BanubaVideoEditorSDK.ImageButtonConfiguration
    @objc public var startingTimerSeconds: Swift.Int
    @objc public var stoppingTimerSeconds: Swift.Int
    @objc public var timerConfigurationDescription: Swift.String?
    public static func == (lhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration, rhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration) -> Swift.Bool
    @objc public init(button: BanubaVideoEditorSDK.ImageButtonConfiguration, startingTimerSeconds: Swift.Int, stoppingTimerSeconds: Swift.Int, description: Swift.String? = nil)
    @objc deinit
    @objc override dynamic public init()
  }
  @objc public var defaultButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var options: [BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration]
  @objc deinit
  @objc override dynamic public init()
}
@objc public class PlayerControlConfiguration : ObjectiveC.NSObject {
  @objc public var playButtonImageName: Swift.String
  @objc public var pauseButtonImageName: Swift.String
  @objc public init(playButtonImageName: Swift.String, pauseButtonImageName: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ScreenNameConfiguration : ObjectiveC.NSObject {
  @objc public var isHidden: Swift.Bool
  @objc public var style: BanubaVideoEditorSDK.TextConfiguration?
  @objc public init(isHidden: Swift.Bool, style: BanubaVideoEditorSDK.TextConfiguration? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class BackgroundConfiguration : ObjectiveC.NSObject {
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var color: UIKit.UIColor
  @objc public init(cornerRadius: CoreGraphics.CGFloat, color: UIKit.UIColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class GalleryVideoPartsConfiguration : ObjectiveC.NSObject {
  @objc public var addGalleryVideoPartImageName: Swift.String
  @objc public var videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration
  @objc public init(addGalleryVideoPartImageName: Swift.String, videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration)
  @objc public class GalleryVideoPartConfiguration : ObjectiveC.NSObject {
    @objc public var selectionColor: UIKit.UIColor
    @objc public var durationLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration
    @objc public var cornerRadius: CoreGraphics.CGFloat
    @objc public var imageCornerRadius: CoreGraphics.CGFloat
    @objc public var imageInsets: UIKit.UIEdgeInsets
    @objc public init(selectionColor: UIKit.UIColor, durationLabelConfiguration: BanubaVideoEditorSDK.TextConfiguration, cornerRadius: CoreGraphics.CGFloat, imageCornerRadius: CoreGraphics.CGFloat, imageInsets: UIKit.UIEdgeInsets)
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public class EffectItemConfiguration : ObjectiveC.NSObject {
  @objc public var titleStyle: BanubaVideoEditorSDK.TextConfiguration
  @objc public var selectionColor: UIKit.UIColor
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public var selectWhenHighlight: Swift.Bool
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var imageInsets: UIKit.UIEdgeInsets
  @objc public var imageCornerRadius: CoreGraphics.CGFloat
  @objc public var imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public var alwaysShowTitle: Swift.Bool
  @objc public var showMasksTitle: Swift.Bool
  @objc public var downloadIcon: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public var progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory?
  @objc public init(titleStyle: BanubaVideoEditorSDK.TextConfiguration, selectionColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat, selectWhenHighlight: Swift.Bool, backgroundColor: UIKit.UIColor, imageInsets: UIKit.UIEdgeInsets, imageCornerRadius: CoreGraphics.CGFloat, imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration? = nil, alwaysShowTitle: Swift.Bool, showMasksTitle: Swift.Bool, downloadIcon: BanubaVideoEditorSDK.ImageConfiguration? = nil, progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class BanubaButtonConfiguration : ObjectiveC.NSObject {
  @objc public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  @objc public var title: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var titlePosition: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var background: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var imageTitleSpacing: CoreGraphics.CGFloat
  @objc public init(title: BanubaVideoEditorSDK.TextButtonConfiguration, titlePosition: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition = .bottom, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, background: BanubaVideoEditorSDK.BackgroundConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageTitleSpacing: CoreGraphics.CGFloat = 0.0)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TimeLabelConfiguration : ObjectiveC.NSObject {
  @objc public var textInsets: UIKit.UIEdgeInsets
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var defaultColor: UIKit.UIColor
  @objc public var errorColor: UIKit.UIColor
  @objc public var style: BanubaVideoEditorSDK.TextConfiguration
  @objc public init(textInsets: UIKit.UIEdgeInsets, cornerRadius: CoreGraphics.CGFloat, defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, style: BanubaVideoEditorSDK.TextConfiguration)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class VideoCoverSelectionConfiguration : ObjectiveC.NSObject {
  @objc public var cancelButton: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var doneButton: BanubaVideoEditorSDK.TextButtonConfiguration
  @objc public var titleLabel: BanubaVideoEditorSDK.TextConfiguration?
  @objc public var toolTipLabel: BanubaVideoEditorSDK.TextConfiguration
  @objc public var selectorColor: UIKit.UIColor
  @objc public var selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  @objc public var deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  @objc public var backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var previewBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration
  @objc public var thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  @objc public var numberOfThumbnails: Swift.Int
  @objc public init(cancelButton: BanubaVideoEditorSDK.TextButtonConfiguration, doneButton: BanubaVideoEditorSDK.TextButtonConfiguration, titleLabel: BanubaVideoEditorSDK.TextConfiguration?, toolTipLabel: BanubaVideoEditorSDK.TextConfiguration, selectorColor: UIKit.UIColor, selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration, deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, backgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, previewBackgroundConfiguration: BanubaVideoEditorSDK.BackgroundConfiguration, thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, numberOfThumbnails: Swift.Int)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class FilterControlButtonConfig : ObjectiveC.NSObject {
  @objc public enum `Type` : Swift.Int {
    case cancel = 0
    case play = 1
    case done = 2
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
    public init?(rawValue: Swift.Int)
  }
  @objc final public let type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`
  @objc final public let imageName: Swift.String
  @objc final public let selectedImageName: Swift.String?
  @objc public init(type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`, imageName: Swift.String, selectedImageName: Swift.String?)
  @objc deinit
  @objc override dynamic public init()
}
extension VideoEditorService : BanubaMusicEditorSDK.VideoEditorServiceAdoptable {
  public var isMultiAudioEnabled: Swift.Bool {
    get
  }
  public func changeMusicTrackPosition(currentTime: Swift.Double, durationInSeconds: Swift.Double, compositionTimeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, assetTrack: AVFoundation.AVAssetTrack, audioTrack: BanubaMusicEditorSDK.AudioTrackAdoptable) -> CoreMedia.CMTimeRange?
  public func addMusicTrack(didSelectFile url: Foundation.URL, title: Swift.String, id: Swift.Int64, start: CoreMedia.CMTime, duration: CoreMedia.CMTime?, trimmedStart: Foundation.TimeInterval?) -> (asset: AVFoundation.AVURLAsset, timeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, compositionStart: CoreMedia.CMTime, avAssetTrack: AVFoundation.AVAssetTrack)?
  public func videoTrackVolume() -> Swift.Float
  public func musicTrackVolume(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable) -> Swift.Float
  public func setVideoTrackVolume(_ volume: Swift.Float, to player: BanubaMusicEditorSDK.PlayerAdoptable)
  public func setMusicTrackVolume(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable, volume: Swift.Float, to player: BanubaMusicEditorSDK.PlayerAdoptable)
  public func removeMusicTrack(_ track: BanubaMusicEditorSDK.AudioTrackAdoptable) -> Swift.Bool
}
extension AnimationView : BanubaVideoEditorSDK.CountdownTimerAnimatableView {
  final public var countdownDigit: Swift.Int {
    get
    set
  }
  final public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func stop()
}
public enum TimeResult {
  case longerThenRequired
  case shorterThenRequired
  case enough
  public static func == (a: BanubaVideoEditorSDK.TimeResult, b: BanubaVideoEditorSDK.TimeResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol TimelineDataSourceDelegate : BanubaMusicEditorSDK.TimelineDataSourceAdoptableDelegate {
  func didFinishThumbnailFetch()
}
public struct DefaultsTimelineThumbnailConfig {
  public static let thumbnailsCount: Swift.Int
  public static let thumbnailHeight: CoreGraphics.CGFloat
}
public protocol TimelineThumbnailConfigurable {
  var thumbnailsCount: Swift.Int { get }
  var thumbnailHeight: CoreGraphics.CGFloat { get }
}
public struct TimelineThumbnailConfig : BanubaVideoEditorSDK.TimelineThumbnailConfigurable {
  public var thumbnailsCount: Swift.Int
  public var thumbnailHeight: CoreGraphics.CGFloat
  public init(thumbnailsCount: Swift.Int = DefaultsTimelineThumbnailConfig.thumbnailsCount, thumbnailHeight: CoreGraphics.CGFloat = DefaultsTimelineThumbnailConfig.thumbnailHeight)
}
public class TimelineDataSource : BanubaVideoEditorSDK.TimelineThumbnailConfigurable, BanubaMusicEditorSDK.TimeLineDataSourceAdoptable, BanubaOverlayEditorSDK.OverlayEditorTimeLineDataSourceAdoptable {
  weak public var delegate: BanubaMusicEditorSDK.TimelineDataSourceAdoptableDelegate?
  weak public var overlayEditorDelegate: BanubaOverlayEditorSDK.OverlayEditorTimelineDataSourceAdoptableDelegate?
  public var durationInSeconds: Swift.Double {
    get
  }
  public var thumbnails: [UIKit.UIImage] {
    get
  }
  public var isAllThumbnailsFetched: Swift.Bool {
    get
  }
  public var asset: AVFoundation.AVAsset {
    get
  }
  public var thumbnailsCount: Swift.Int
  public var thumbnailHeight: CoreGraphics.CGFloat
  public init(with asset: AVFoundation.AVAsset, instructions: [AVFoundation.AVVideoCompositionInstructionProtocol]? = nil, config: BanubaVideoEditorSDK.TimelineThumbnailConfigurable = TimelineThumbnailConfig(), alreadyAvailableThumbnails: [UIKit.UIImage] = [])
  public func loadPreview(completion: @escaping (UIKit.UIImage?) -> Swift.Void, at second: Swift.Double = 0.1)
  public func getImage(at index: Swift.Int) -> UIKit.UIImage?
  @objc deinit
}
public class GifImage {
  final public let image: UIKit.UIImage
  final public let data: Foundation.Data
  public init(image: UIKit.UIImage, data: Foundation.Data)
  @objc deinit
}
public class GIFImageRepository {
  public init(giphyApi: BanubaVideoEditorSDK.GiphyAPI)
  public func get(by url: Foundation.URL, completion: @escaping (BanubaVideoEditorSDK.Result<BanubaVideoEditorSDK.GifImage>) -> Swift.Void)
  @objc deinit
}
public protocol BanubaVideoEditorInteractor {
  associatedtype DelegateType
  var delegate: Self.DelegateType? { get set }
  var sdk: BanubaVideoEditorSDK.SDKServicing? { get set }
}
extension UIView {
  open class func animateWorkarounding(withDuration duration: Foundation.TimeInterval, animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public protocol ImagesSequence {
  var relativeScreenPoints: BanubaVideoEditorSDK.ImagePoints { get }
  func getImage(at time: Foundation.TimeInterval) -> CoreGraphics.CGImage
}
public enum EffectType {
  case mask
  case effect
  case videoEditorEffect
  public static func == (a: BanubaVideoEditorSDK.EffectType, b: BanubaVideoEditorSDK.EffectType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol EffectsManaging {
  func getEffectsWithType(_ type: BanubaVideoEditorSDK.EffectType) -> [BanubaVideoEditorSDK.EffectViewModel]
  func getEditorEffectsWithType(_ type: VideoEditor.EditorEffectType) -> [VideoEditor.VideoEditorFilterModel]
}
@_hasMissingDesignatedInitializers public class EffectsManager : BanubaVideoEditorSDK.EffectsManaging {
  public func getEffectsWithType(_ type: BanubaVideoEditorSDK.EffectType) -> [BanubaVideoEditorSDK.EffectViewModel]
  public func getEditorEffectsWithType(_ type: VideoEditor.EditorEffectType) -> [VideoEditor.VideoEditorFilterModel]
  @objc deinit
}
extension UIColor {
  convenience public init?(colorParams: BanubaVideoEditorSDK.ColorParams)
}
public enum VideoRecordSpeed : Swift.Int, Swift.CaseIterable {
  case half
  case normal
  case double
  case triple
  public var speedValue: Swift.Float {
    get
  }
  public var icon: UIKit.UIImage? {
    get
  }
  public var stringSpeedValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [BanubaVideoEditorSDK.VideoRecordSpeed]
  public static var allCases: [BanubaVideoEditorSDK.VideoRecordSpeed] {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SpeedSelectionBar : UIKit.UIView {
  public var selectionHandler: ((BanubaVideoEditorSDK.VideoRecordSpeed) -> ())?
  public var configuration: BanubaVideoEditorSDK.SpeedSelectionConfiguration.SpeedBarConfiguration? {
    get
    set
  }
  public var speed: BanubaVideoEditorSDK.VideoRecordSpeed {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public func get() throws -> T
  public func map<U>(_ transform: (T) -> U) -> BanubaVideoEditorSDK.Result<U>
}
public protocol SDKInputServicingDelegate {
  func willOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
}
public protocol SDKARInputServicingDelegate {
  func didUpdate(arFrame: ARKit.ARFrame, session: ARKit.ARSession)
  func didAdd(anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
  func didUpdate(anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
  func didRemove(didRemove anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
}
public protocol SDKInputServicing : AnyObject {
  var isFrontCamera: Swift.Bool { get }
  var zoomFactor: Swift.Float { get }
  var currentCameraSessionType: BanubaVideoEditorSDK.CameraModuleSessionType { get }
  var inputDelegate: BanubaVideoEditorSDK.SDKInputServicingDelegate? { get set }
  var inputARDelegate: BanubaVideoEditorSDK.SDKARInputServicingDelegate? { get set }
  func configureExposureSettings(_ point: CoreGraphics.CGPoint?, useContinuousDetection: Swift.Bool)
  func configureFocusSettings(_ point: CoreGraphics.CGPoint?, useContinuousDetection: Swift.Bool)
  func setZoomFactor(_ zoomFactor: Swift.Float) -> Swift.Float
  func toggleCamera(completion: @escaping BanubaSdk.RotateCameraCallBack)
  func startCamera()
  func startAudioCapturing()
  func stopAudioCapturing()
  func setCameraSessionType(_ type: BanubaVideoEditorSDK.CameraModuleSessionType)
  @discardableResult
  func setTorch(mode: AVFoundation.AVCaptureDevice.TorchMode) -> AVFoundation.AVCaptureDevice.TorchMode
  func toggleTorch() -> AVFoundation.AVCaptureDevice.TorchMode
}
public struct ImagePoints {
  public init(leftTop: CoreGraphics.CGPoint, rightTop: CoreGraphics.CGPoint, leftBottom: CoreGraphics.CGPoint, rightBottom: CoreGraphics.CGPoint)
  public var leftTop: CoreGraphics.CGPoint
  public var rightTop: CoreGraphics.CGPoint
  public var leftBottom: CoreGraphics.CGPoint
  public var rightBottom: CoreGraphics.CGPoint
  public func applying(_ t: CoreGraphics.CGAffineTransform) -> BanubaVideoEditorSDK.ImagePoints
}
public class ImageEffectInfo {
  final public let image: CoreGraphics.CGImage
  final public let imagePoints: BanubaVideoEditorSDK.ImagePoints
  public init(image: CoreGraphics.CGImage, imagePoints: BanubaVideoEditorSDK.ImagePoints)
  @objc deinit
}
public struct TrimAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case addVideo
    case moveVideo
    case changePartDuration
    case removeVideoPart
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.TrimAnalytics.ParameterKey]? {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.TrimAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case videoPartCount
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.TrimAnalytics.EventKind>
}
public protocol AnimatableViewFactory : AnyObject {
  func makeAnimatableView() -> BanubaVideoEditorSDK.AnimatableView
}
public enum EditorEffectKey : Swift.String {
  case name
  case type
  case renderer
  case path
  case id
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class EditorEffectsConfigHolder : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension UIView {
  public func ext_addBorderConstraints(toView: UIKit.UIView!, offset: CoreGraphics.CGFloat = 0)
  public func ext_addLeftContraint(toView: UIKit.UIView!, offset: CoreGraphics.CGFloat = 0)
  public func ext_addRightContraint(toView: UIKit.UIView!, offset: CoreGraphics.CGFloat = 0)
  public func ext_addTopContraint(toView: UIKit.UIView!, offset: CoreGraphics.CGFloat = 0)
  public func ext_addBottomContraint(toView: UIKit.UIView!, offset: CoreGraphics.CGFloat = 0)
}
public struct EffectPickerAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case present
    case cancel
    case addEffect
    case removeEffect
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.EffectPickerAnalytics.ParameterKey]? {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.EffectPickerAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case context
    case effectType
    case effectID
    case effectDuration
    case effectIDs
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.EffectPickerAnalytics.EventKind>
}
public protocol ExternalMaskProviding {
  var masks: [BanubaVideoEditorSDK.ExternalMask] { get }
  func requestMask(_ mask: BanubaVideoEditorSDK.ExternalMask, statusUpdateHandler: ((BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Void)?)
  func cancelCurrentMaskDownloading()
  func requestMaskPreview(_ mask: BanubaVideoEditorSDK.ExternalMask, completion: ((UIKit.UIImage?, Swift.Error?) -> Swift.Void)?)
}
public protocol ExternalMask {
  var id: Swift.UInt { get }
  var name: Swift.String { get }
  var url: Foundation.URL { get }
  var previewImageURL: Foundation.URL { get }
  var status: BanubaVideoEditorSDK.ExternalMaskStatus { get }
}
public enum ExternalMaskStatus : Swift.Equatable {
  case notDownloaded
  case downloaded(path: Foundation.URL, shouldApply: Swift.Bool)
  case downloading(progress: Swift.Float)
  case error(Swift.Error)
  public static func == (lhs: BanubaVideoEditorSDK.ExternalMaskStatus, rhs: BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class TextEffectDrawer : BanubaVideoEditorSDK.VideoEditorEffectDrawer {
  required public init(imageInfo: BanubaVideoEditorSDK.ImageEffectInfo)
  required public init()
  public func createRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  @objc deinit
}
public protocol EffectRenderer {
  func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String)
}
@objc public enum VideoTextAligment : Swift.Int {
  case left = 0
  case center = 1
  case right = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AnalyticsEngine : AnyObject {
  func report(error: Swift.Error, message: Swift.String)
  func report(message: Swift.String, parameters: [Swift.String : Any]?)
}
public struct CameraSessionMetadata : Swift.Codable {
  public var isFrontCamera: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class VideoEditorTrimMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc public var url: Foundation.URL
  @objc public var imageData: Foundation.Data?
  @objc public init(url: Foundation.URL, imageData: Foundation.Data?)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class MusicEditorMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc public var tracks: [BanubaVideoEditorSDK.MusicEditorTrack]
  @objc public init(tracks: [BanubaVideoEditorSDK.MusicEditorTrack])
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class MusicEditorTrack : ObjectiveC.NSObject, Swift.Codable {
  @objc public var url: Foundation.URL
  @objc public var originalURL: Foundation.URL
  @objc public var title: Swift.String
  @objc public var id: Swift.Int64
  @objc public init(position: Swift.Int, timeScale: Foundation.TimeInterval, compositionStart: Foundation.TimeInterval, timeRangeStart: Foundation.TimeInterval, timeRangeEnd: Foundation.TimeInterval, url: Foundation.URL, originalURL: Foundation.URL, isAudioRecord: Swift.Bool, applyedFilterId: Swift.Int, title: Swift.String, id: Swift.Int64)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class VideoEditorMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]?
  @objc final public let colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata?
  @objc final public let textOnVideoMetadata: [BanubaVideoEditorSDK.TextOnVideoMetadata]?
  @objc final public let gifOnVideoMetadata: [BanubaVideoEditorSDK.GIFOnVideoMetadata]?
  @objc final public let videoInteractiveMetadata: BanubaVideoEditorSDK.VideoInteractiveMetadata
  @objc public var videoMetadata: BanubaVideoEditorSDK.VideoMetadata?
  @objc public init(effectsOnVideoMetadata: [BanubaVideoEditorSDK.EffectOnVideoMetadata]?, colorOnVideoMetadata: BanubaVideoEditorSDK.ColorOnVideoMetadata?, textOnVideoMetadata: [BanubaVideoEditorSDK.TextOnVideoMetadata]?, gifOnVideoMetadata: [BanubaVideoEditorSDK.GIFOnVideoMetadata]?, videoInteractiveMetadata: BanubaVideoEditorSDK.VideoInteractiveMetadata, videoMetadata: BanubaVideoEditorSDK.VideoMetadata?)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class ColorOnVideoMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let title: Swift.String
  @objc public init(title: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class EffectOnVideoMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let startTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let endTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let effectId: Swift.UInt
  @objc public init(startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, effectId: Swift.UInt)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class TextOnVideoMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let imageData: Foundation.Data?
  @objc final public let textParams: BanubaVideoEditorSDK.TextParams
  @objc final public let startTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let endTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  @objc public init(imageData: Foundation.Data?, textParams: BanubaVideoEditorSDK.TextParams, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class VideoMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let isSlideShow: Swift.Bool
  @objc public init(isSlideShow: Swift.Bool)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class GIFOnVideoMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let imageData: Foundation.Data?
  @objc final public let startTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let endTime: BanubaVideoEditorSDK.TimeMetadata
  @objc final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  @objc public init(id: Swift.String, imageData: Foundation.Data?, startTime: BanubaVideoEditorSDK.TimeMetadata, endTime: BanubaVideoEditorSDK.TimeMetadata, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class CoordinatesParams : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let transform: CoreGraphics.CGAffineTransform
  @objc final public let frame: CoreGraphics.CGRect
  @objc public init(transform: CoreGraphics.CGAffineTransform, frame: CoreGraphics.CGRect)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class ColorParams : ObjectiveC.NSObject, Swift.Codable {
  final public let red: Swift.Float?
  final public let green: Swift.Float?
  final public let blue: Swift.Float?
  final public let alpha: Swift.Float?
  @objc public init(red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class TextParams : ObjectiveC.NSObject, Swift.Codable {
  final public let text: Swift.String?
  final public let textFont: Swift.String?
  final public let fontName: Swift.String?
  final public let fontSize: Swift.Float?
  final public let textAligment: Swift.Int?
  final public let textColor: BanubaVideoEditorSDK.ColorParams?
  final public let backgroundColor: BanubaVideoEditorSDK.ColorParams?
  public init(text: Swift.String?, textFont: Swift.String?, fontName: Swift.String?, fontSize: Swift.Float?, textAligment: Swift.Int?, textColor: BanubaVideoEditorSDK.ColorParams?, backgroundColor: BanubaVideoEditorSDK.ColorParams?)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct VideoCoverMetadata : Swift.Codable {
  public var image: UIKit.UIImage? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class TimeMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let seconds: Swift.Double
  final public let timescale: CoreMedia.CMTimeScale
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension TimeMetadata {
  @objc convenience dynamic public init(cmTime: CoreMedia.CMTime)
  @objc dynamic public func getCMTime() -> CoreMedia.CMTime
}
@objc public class VideoInteractiveMetadata : ObjectiveC.NSObject, Swift.Codable {
  public var interactiveQuestionMetadata: [BanubaVideoEditorSDK.InteractiveQuestionMetadata]
  public var interactivePollMetadata: [BanubaVideoEditorSDK.InteractivePollMetadata]
  public var interactiveInterestMetadata: [BanubaVideoEditorSDK.InteractiveInterestMetadata]
  public var interactiveTestMetadata: [BanubaVideoEditorSDK.InteractiveTestMetadata]
  public init(interactiveQuestionMetadata: [BanubaVideoEditorSDK.InteractiveQuestionMetadata], interactivePollMetadata: [BanubaVideoEditorSDK.InteractivePollMetadata], interactiveInterestMetadata: [BanubaVideoEditorSDK.InteractiveInterestMetadata], interactiveTestMetadata: [BanubaVideoEditorSDK.InteractiveTestMetadata])
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class InteractiveQuestionMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let imageData: Foundation.Data?
  final public let text: Swift.String
  final public let gradientColors: [BanubaVideoEditorSDK.ColorParams]?
  final public let textColor: BanubaVideoEditorSDK.ColorParams?
  final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public init(imageData: Foundation.Data?, text: Swift.String, gradientColors: [BanubaVideoEditorSDK.ColorParams]?, textColor: BanubaVideoEditorSDK.ColorParams?, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class InteractivePollMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let imageData: Foundation.Data?
  final public let titleText: Swift.String
  final public let leftCardText: Swift.String
  final public let rightCardText: Swift.String
  final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public init(imageData: Foundation.Data?, titleText: Swift.String, leftCardText: Swift.String, rightCardText: Swift.String, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class InteractiveInterestMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let imageData: Foundation.Data?
  final public let title: Swift.String
  final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public init(imageData: Foundation.Data?, title: Swift.String, coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class InteractiveTestMetadata : ObjectiveC.NSObject, Swift.Codable {
  final public let imageData: Foundation.Data?
  final public let gradientColors: [BanubaVideoEditorSDK.ColorParams]?
  final public let textColor: BanubaVideoEditorSDK.ColorParams?
  final public let title: Swift.String
  final public let fields: [BanubaVideoEditorSDK.InteractiveTestFieldMetaData]
  final public let coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams
  public init(imageData: Foundation.Data?, gradientColors: [BanubaVideoEditorSDK.ColorParams]?, textColor: BanubaVideoEditorSDK.ColorParams?, title: Swift.String, fields: [BanubaVideoEditorSDK.InteractiveTestFieldMetaData], coordinatesParams: BanubaVideoEditorSDK.CoordinatesParams)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class InteractiveTestFieldMetaData : ObjectiveC.NSObject, Swift.Codable {
  final public let answer: Swift.String
  final public let isAnswer: Swift.Bool
  public init(answer: Swift.String, isAnswer: Swift.Bool)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension SmallActivityIndicatorConfiguration {
  public static var config: BanubaVideoEditorSDK.SmallActivityIndicatorConfiguration {
    get
  }
}
extension FullScreenActivityConfiguration {
  public static var config: BanubaVideoEditorSDK.FullScreenActivityConfiguration {
    get
  }
}
extension WatermarkConfiguration {
  public static var config: BanubaVideoEditorSDK.WatermarkConfiguration {
    get
  }
}
public protocol VideoCoverSelectionControllerDelegate : AnyObject {
  func videoCoverSelectionController(_ viewController: BanubaVideoEditorSDK.VideoCoverSelectionController, didDoneWithImage image: UIKit.UIImage?, atIndent indent: CoreMedia.CMTime)
  func videoCoverSelectionControllerDidCancel(_ viewController: BanubaVideoEditorSDK.VideoCoverSelectionController)
}
public protocol VideoCoverSelectionController : UIKit.UIViewController {
  var coverTime: CoreMedia.CMTime { get set }
  var delegate: BanubaVideoEditorSDK.VideoCoverSelectionControllerDelegate? { get set }
}
@objc @_hasMissingDesignatedInitializers public class VideoCoverSelectionViewController : UIKit.UIViewController, BanubaVideoEditorSDK.VideoCoverSelectionController {
  final public let asset: AVFoundation.AVAsset
  final public let videoEditorService: VideoEditor.VideoEditorServicing
  final public let configuration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  public var coverTime: CoreMedia.CMTime {
    get
    set
  }
  weak public var delegate: BanubaVideoEditorSDK.VideoCoverSelectionControllerDelegate?
  required public init(asset: AVFoundation.AVAsset, configuration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension VideoCoverSelectionViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension VideoCoverSelectionViewController : BanubaVideoEditorSDK.TimelineViewControllerDelegate {
  public func changeVideoPosition(on time: CoreMedia.CMTime)
  public func shouldPauseVideo()
}
extension VideoCoverSelectionViewController {
  public func embed(_ viewController: UIKit.UIViewController, in host: UIKit.UIView)
}
@objc public protocol TextEditSelectionColorBehavior {
  @objc func setColorView(_ view: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
}
public class DefaultExposureViewFactory : BanubaVideoEditorSDK.AnimatableViewFactory {
  public init()
  public func makeAnimatableView() -> BanubaVideoEditorSDK.AnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ExposureAnimationView : UIKit.UIView, BanubaVideoEditorSDK.AnimatableView {
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func stop()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class EffectModel {
  public var url: Foundation.URL?
  public var name: Swift.String?
  public init(url: Foundation.URL)
  public init(name: Swift.String)
  @objc deinit
}
public protocol NibLoadable : AnyObject {
  static var nib: UIKit.UINib { get }
}
extension NibLoadable {
  public static var nib: UIKit.UINib {
    get
  }
}
extension NibLoadable where Self : UIKit.UIView {
  public static func loadFromNib() -> Self
}
public struct EditorAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case appearEffects
    case cancel
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.EditorAnalytics.ParameterKey]? {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.EditorAnalytics.ParameterKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case videoPartsCount
    case musicId
    case visualEffectIds
    case colorEffectId
    case timeEffectIds
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.EditorAnalytics.EventKind>
}
@objc @_inheritsConvenienceInitializers public class ImageCropperView : UIKit.UIView {
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var croppingInfo: BanubaVideoEditorSDK.ImageCroppingInfo {
    get
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public enum CaptureButtonMode : Swift.Int {
  case video = 0
  case mixed = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PhotoVideoCaptureButtonViewController : UIKit.UIViewController {
  @objc weak public var delegate: BanubaVideoEditorSDK.VideoEditorCaptureButtonDelegate?
  @objc public var configuration: BanubaVideoEditorSDK.RecordButtonConfiguration?
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PhotoVideoCaptureButtonViewController : BanubaVideoEditorSDK.VideoEditorCaptureButton {
  @objc dynamic public func updateVideoRecordingProgress(_ captureProgress: Swift.Double)
  @objc dynamic public func changeViewToIdleState()
  @objc dynamic public func changeViewToCaptureState()
}
@_inheritsConvenienceInitializers public class GifEffectDrawer : BanubaVideoEditorSDK.VideoEditorEffectDrawer {
  required public init(sequence: BanubaVideoEditorSDK.ImagesSequence)
  required public init()
  public func createRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  @objc deinit
}
public protocol AnalyticsEventKind : Swift.RawRepresentable where Self.RawValue == Swift.String {
  associatedtype ParameterKey : BanubaVideoEditorSDK.AnalyticsParameterKey
  static var domain: Swift.String { get }
  var parameterKeys: [Self.ParameterKey]? { get }
}
extension AnalyticsEventKind {
  public var id: Swift.String {
    get
  }
}
public protocol AnalyticsParameterKey : Swift.Hashable, Swift.RawRepresentable where Self.RawValue == Swift.String {
}
public class AnalyticsManager<Kind> where Kind : BanubaVideoEditorSDK.AnalyticsEventKind {
  public typealias ParameterKey = Kind.ParameterKey
  public init(analyticsEngine: BanubaVideoEditorSDK.AnalyticsEngine)
  public func log(_ eventKind: Kind, _ parameters: [BanubaVideoEditorSDK.AnalyticsManager<Kind>.ParameterKey : Any]? = nil)
  public func set(_ value: Any?, forKey key: BanubaVideoEditorSDK.AnalyticsManager<Kind>.ParameterKey)
  public func log(error: Swift.Error, message: Swift.String)
  @objc deinit
}
public struct GalleryAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case present
    case multichoiceOn
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.GalleryAnalytics.ParameterKey]? {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.GalleryAnalytics.ParameterKey
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case isMultichoiceOn
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.GalleryAnalytics.EventKind>
}
@objc public protocol ProgressAnimatableViewFactory {
  @objc func makeProgressAnimatableView() -> BanubaVideoEditorSDK.ProgressAnimatableView
}
@_hasMissingDesignatedInitializers public class CircularProgressViewFactory : BanubaVideoEditorSDK.ProgressAnimatableViewFactory {
  @objc public func makeProgressAnimatableView() -> BanubaVideoEditorSDK.ProgressAnimatableView
  @objc deinit
}
public typealias GetPaginatedListHandler<T> = (BanubaVideoEditorSDK.Result<T>, Swift.Bool) -> Swift.Void
@objc public class GiphyAPI : ObjectiveC.NSObject {
  public init(apiKey: Swift.String)
  public func cancelTask(with url: Foundation.URL)
  public func cancelAllTasks()
  public func getData(from url: Foundation.URL, compeletionQueue: Dispatch.DispatchQueue, completion: @escaping (BanubaVideoEditorSDK.Result<Foundation.Data>) -> Swift.Void)
  public func getTrendingGIFObjects(byPageNumber pageNumber: Swift.Int, completion: @escaping BanubaVideoEditorSDK.GetPaginatedListHandler<[BanubaVideoEditorSDK.GiphyImage]>)
  public func getGIFObjects(byPageNumber pageNumber: Swift.Int, searchQuery: Swift.String, completion: @escaping BanubaVideoEditorSDK.GetPaginatedListHandler<[BanubaVideoEditorSDK.GiphyImage]>)
  @objc override dynamic public init()
  @objc deinit
}
extension String {
  public func lookUpForImage() -> UIKit.UIImage?
}
public class RecorderInteractor {
  public init(presenter: BanubaVideoEditorSDK.RecorderPresenterProtocol, sdk: BanubaVideoEditorSDK.SDKServicing, analytics: BanubaVideoEditorSDK.RecorderAnalytics.Manager?, recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration, mode: BanubaVideoEditorSDK.CaptureButtonMode)
  @objc deinit
}
extension RecorderInteractor : BanubaMusicEditorSDK.AudioPlayerDelegate {
  public func playerPlaysFrameAtTime(_ time: Foundation.TimeInterval)
  public func didEndPlaying()
}
public class MaskModel : Swift.Hashable, Swift.Comparable {
  final public let name: Swift.String
  final public let imageUrl: Foundation.URL
  public var url: Foundation.URL
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType
  final public let id: Swift.UInt
  public var progress: Swift.Float?
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)?
  public var image: UIKit.UIImage?
  convenience public init(url: Foundation.URL)
  convenience public init(name: Swift.String, imageUrl: Foundation.URL, downloadType: BanubaVideoEditorSDK.ContentLocationType, id: Swift.UInt)
  public init(name: Swift.String, imageUrl: Foundation.URL, url: Foundation.URL, downloadType: BanubaVideoEditorSDK.ContentLocationType, id: Swift.UInt)
  public static func == (lhs: BanubaVideoEditorSDK.MaskModel, rhs: BanubaVideoEditorSDK.MaskModel) -> Swift.Bool
  public static func < (lhs: BanubaVideoEditorSDK.MaskModel, rhs: BanubaVideoEditorSDK.MaskModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension MaskModel : BanubaVideoEditorSDK.ExternalMask {
  public var previewImageURL: Foundation.URL {
    get
  }
  public var status: BanubaVideoEditorSDK.ExternalMaskStatus {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class PreviewSingleVideoViewController : UIKit.UIViewController, BanubaMusicEditorSDK.PlayablePreview, BanubaOverlayEditorSDK.OverlayEditorPlayablePreview, BanubaOverlayEditorSDK.OverlayItemDisplayable {
  weak public var playerDelegate: BanubaMusicEditorSDK.PlayerDelegate? {
    get
    set
  }
  public var previewView: UIKit.UIView {
    get
  }
  @objc override dynamic public func viewDidLayoutSubviews()
  weak public var overlayEditorPlayerDelegate: BanubaOverlayEditorSDK.OverlayEditorPlayerDelegate? {
    get
    set
  }
  public var overlayEditorAdoptablePlayer: AVFoundation.AVPlayer? {
    get
  }
  public var currentTime: Foundation.TimeInterval {
    get
  }
  public var videoDuration: Swift.Double {
    get
  }
  public var videoDurationInCMTime: CoreMedia.CMTime {
    get
  }
  public var currentTimeInCMTime: CoreMedia.CMTime {
    get
  }
  public var isPlaying: Swift.Bool {
    get
  }
  public var adoptablePlayer: BanubaMusicEditorSDK.PlayerAdoptable? {
    get
    set
  }
  public var player: VideoEditor.Playable? {
    get
    set
  }
  weak public var previewPlayerDelegate: VideoEditor.PreviewPlayerDelegate? {
    get
    set
  }
  public init(itemToPlay: VideoEditor.Playable)
  @objc deinit
  public func updateViewFrame()
  public func startPlay(loop: Swift.Bool = true, fixedSpeed: Swift.Bool = false)
  public func startPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
  public func stopPlay()
  public func pausePlay()
  public func resumePlay()
  public func smoothlySeek(to time: CoreMedia.CMTime)
  public func reloadPreview()
  public func reloadPreview(shouldAutoStart: Swift.Bool)
  public func startStopPlay(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  public func seek(to time: CoreMedia.CMTime)
  public func replacePlayer(_ newPlayer: VideoEditor.Playable)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension PreviewSingleVideoViewController : VideoEditor.PreviewPlayerDelegate, BanubaOverlayEditorSDK.OverlayEditorPlayerDelegate {
  public func playerPlaysFrameAtTime(_ time: CoreMedia.CMTime)
  public func didEndPlaying()
}
extension PreviewSingleVideoViewController {
  public func hideOverlayItems()
  public func showOverlayItems()
  public func reloadOverlayItems()
  public func getExistingOverlayItems() -> [BanubaOverlayEditorSDK.OverlayItem]
  public func addOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  public func updateOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  public func removeOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  public func didVideoPlay(at time: CoreMedia.CMTime)
}
public struct MusicPickerAnalytics {
  public enum EventKind : Swift.String, BanubaVideoEditorSDK.AnalyticsEventKind {
    public static let domain: Swift.String
    case present
    case cancel
    case select
    case remove
    case done
    public var parameterKeys: [BanubaVideoEditorSDK.MusicPickerAnalytics.ParameterKey]? {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias ParameterKey = BanubaVideoEditorSDK.MusicPickerAnalytics.ParameterKey
  }
  public enum ParameterKey : Swift.String, BanubaVideoEditorSDK.AnalyticsParameterKey {
    case context
    case musicId
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Manager = BanubaVideoEditorSDK.AnalyticsManager<BanubaVideoEditorSDK.MusicPickerAnalytics.EventKind>
}
extension CountdownView : BanubaMusicEditorSDK.MusicEditorCountdownAnimatableView {
}
public enum ContentLocationType {
  case remote
  case local
  public static func == (a: BanubaVideoEditorSDK.ContentLocationType, b: BanubaVideoEditorSDK.ContentLocationType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol EffectViewModel : AnyObject {
  var type: BanubaVideoEditorSDK.EffectType { get }
  var image: UIKit.UIImage? { get set }
  var title: Swift.String { get }
  var id: Swift.UInt { get }
  var progress: Swift.Float? { get set }
  var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? { get set }
  var downloadType: BanubaVideoEditorSDK.ContentLocationType { get }
  func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
}
extension EffectModel : BanubaVideoEditorSDK.EffectViewModel {
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public var id: Swift.UInt {
    get
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
extension MaskModel : BanubaVideoEditorSDK.EffectViewModel {
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var title: Swift.String {
    get
  }
}
extension VideoEditorFilterModel : BanubaVideoEditorSDK.EffectViewModel {
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((Swift.Float, Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
public protocol SDKBeautyEffectManaging : AnyObject {
  var isBeatificationEnabled: Swift.Bool { get set }
  func toggleBeautification() -> Swift.Bool
}
public protocol AnimatableView {
  func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  func stop()
}
public protocol CountdownTimerAnimatableView : BanubaVideoEditorSDK.AnimatableView {
  var countdownDigit: Swift.Int { get set }
}
@objc public protocol ProgressAnimatableView {
  @objc var progress: Swift.Float { get set }
}
public struct RecordedVideoCover {
  public var image: UIKit.UIImage
  public var time: CoreMedia.CMTime
  public init(image: UIKit.UIImage, time: CoreMedia.CMTime)
}
public class CoverExtractor {
  public init(videoEditorService: VideoEditor.VideoEditorServicing)
  public func create(at time: CoreMedia.CMTime) -> BanubaVideoEditorSDK.RecordedVideoCover
  @objc deinit
}
public protocol MusicApplicable {
  func applyMusic(from file: Foundation.URL, title: Swift.String, id: Swift.Int64)
  func removeMusic()
}
public protocol BeautyEffectManaging {
  var enabled: Swift.Bool { get set }
  var applyHandler: ((Swift.String?) -> Swift.Void)? { get set }
}
public class BeautyEffectManager : BanubaVideoEditorSDK.BeautyEffectManaging {
  public var applyHandler: ((Swift.String?) -> Swift.Void)?
  public var enabled: Swift.Bool {
    get
    set
  }
  public init()
  public func enable()
  public func disable()
  @objc deinit
}
public enum OutputServiceError : Swift.Error {
  case notEnoughSpace
  public static func == (a: BanubaVideoEditorSDK.OutputServiceError, b: BanubaVideoEditorSDK.OutputServiceError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum Styles {
}
extension Styles {
  public enum TextEdit {
    public static let palette: [BanubaVideoEditorSDK.VideoTextColorPair]
  }
}
@_hasMissingDesignatedInitializers public class EffectsFactory {
  public static func glitch2EffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func cathodeEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func polaroidEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func soulEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func zoomEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func flashEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func raveEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func acidEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func tvFoamEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func vhsEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func colorEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func glitchEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  public static func gifEffectRenderer(sequence: BanubaVideoEditorSDK.ImagesSequence) -> BanubaVideoEditorSDK.EffectRenderer
  public static func textEffectRenderer(imageInfo: BanubaVideoEditorSDK.ImageEffectInfo) -> BanubaVideoEditorSDK.EffectRenderer
  public static func maskEffectRenderer() -> BanubaVideoEditorSDK.EffectRenderer
  @objc deinit
}
@objc public enum VideoEditorCaptureButtonState : Swift.Int {
  case idle = 0
  case capture = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol VideoEditorCaptureButton : AnyObject {
  @objc var delegate: BanubaVideoEditorSDK.VideoEditorCaptureButtonDelegate? { get set }
  @objc var configuration: BanubaVideoEditorSDK.RecordButtonConfiguration? { get set }
  @objc func updateVideoRecordingProgress(_ captureProgress: Swift.Double)
  @objc func changeViewToIdleState()
  @objc func changeViewToCaptureState()
}
@objc public protocol VideoEditorCaptureButtonDelegate : AnyObject {
  @objc func сaptureButtonGotTapEvent()
  @objc func сaptureButtonGotLongTapEvent()
  @objc func сaptureButtonDropLongTapEvent()
}
extension BanubaVideoEditorSDK.AlertViewController.AlertType : Swift.Equatable {}
extension BanubaVideoEditorSDK.AlertViewController.AlertType : Swift.Hashable {}
extension BanubaVideoEditorSDK.CameraModuleSessionType : Swift.Equatable {}
extension BanubaVideoEditorSDK.CameraModuleSessionType : Swift.Hashable {}
extension BanubaVideoEditorSDK.AudioWriterStatus : Swift.Equatable {}
extension BanubaVideoEditorSDK.AudioWriterStatus : Swift.Hashable {}
extension BanubaVideoEditorSDK.CameraAlertType : Swift.Equatable {}
extension BanubaVideoEditorSDK.CameraAlertType : Swift.Hashable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.Equatable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.Hashable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.RecorderAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.RecorderAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.BackButtonConfiguration.Position : Swift.Equatable {}
extension BanubaVideoEditorSDK.BackButtonConfiguration.Position : Swift.Hashable {}
extension BanubaVideoEditorSDK.BackButtonConfiguration.Position : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.AdditionalEffectsButtonConfigurationPosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.AdditionalEffectsButtonConfigurationPosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.AdditionalEffectsButtonConfigurationPosition : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.TitlePosition : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.WatermarkConfiguration.WatermarkPosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.WatermarkConfiguration.WatermarkPosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.WatermarkConfiguration.WatermarkPosition : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.TimeResult : Swift.Equatable {}
extension BanubaVideoEditorSDK.TimeResult : Swift.Hashable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Equatable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.TrimAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.TrimAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.EditorEffectKey : Swift.Equatable {}
extension BanubaVideoEditorSDK.EditorEffectKey : Swift.Hashable {}
extension BanubaVideoEditorSDK.EditorEffectKey : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.EffectPickerAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.EffectPickerAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.EditorAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.EditorAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.CaptureButtonMode : Swift.Equatable {}
extension BanubaVideoEditorSDK.CaptureButtonMode : Swift.Hashable {}
extension BanubaVideoEditorSDK.CaptureButtonMode : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.GalleryAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.GalleryAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.MusicPickerAnalytics.EventKind : Swift.Equatable {}
extension BanubaVideoEditorSDK.MusicPickerAnalytics.EventKind : Swift.Hashable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Equatable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Hashable {}
extension BanubaVideoEditorSDK.OutputServiceError : Swift.Equatable {}
extension BanubaVideoEditorSDK.OutputServiceError : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoEditorCaptureButtonState : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoEditorCaptureButtonState : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoEditorCaptureButtonState : Swift.RawRepresentable {}
